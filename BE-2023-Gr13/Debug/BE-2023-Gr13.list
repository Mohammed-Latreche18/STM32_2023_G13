
BE-2023-Gr13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c24c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  0800c390  0800c390  0001c390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdbc  0800cdbc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc4  0800cdc4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cdcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c1c  200001e8  0800cfb4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  0800cfb4  00021e04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d16c  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004211  00000000  00000000  0003d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00041590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00042e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6d4  00000000  00000000  00044610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd2d  00000000  00000000  0005ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bdbf  00000000  00000000  0007ba11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001177d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b34  00000000  00000000  00117820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c374 	.word	0x0800c374

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800c374 	.word	0x0800c374

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <__aeabi_ldivmod>:
 8000fc0:	b97b      	cbnz	r3, 8000fe2 <__aeabi_ldivmod+0x22>
 8000fc2:	b972      	cbnz	r2, 8000fe2 <__aeabi_ldivmod+0x22>
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	bfbe      	ittt	lt
 8000fc8:	2000      	movlt	r0, #0
 8000fca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000fce:	e006      	blt.n	8000fde <__aeabi_ldivmod+0x1e>
 8000fd0:	bf08      	it	eq
 8000fd2:	2800      	cmpeq	r0, #0
 8000fd4:	bf1c      	itt	ne
 8000fd6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000fda:	f04f 30ff 	movne.w	r0, #4294967295
 8000fde:	f000 b9c1 	b.w	8001364 <__aeabi_idiv0>
 8000fe2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fea:	2900      	cmp	r1, #0
 8000fec:	db09      	blt.n	8001002 <__aeabi_ldivmod+0x42>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db1a      	blt.n	8001028 <__aeabi_ldivmod+0x68>
 8000ff2:	f000 f84d 	bl	8001090 <__udivmoddi4>
 8000ff6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ffe:	b004      	add	sp, #16
 8001000:	4770      	bx	lr
 8001002:	4240      	negs	r0, r0
 8001004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	db1b      	blt.n	8001044 <__aeabi_ldivmod+0x84>
 800100c:	f000 f840 	bl	8001090 <__udivmoddi4>
 8001010:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001018:	b004      	add	sp, #16
 800101a:	4240      	negs	r0, r0
 800101c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001020:	4252      	negs	r2, r2
 8001022:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001026:	4770      	bx	lr
 8001028:	4252      	negs	r2, r2
 800102a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800102e:	f000 f82f 	bl	8001090 <__udivmoddi4>
 8001032:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103a:	b004      	add	sp, #16
 800103c:	4240      	negs	r0, r0
 800103e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001042:	4770      	bx	lr
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	f000 f821 	bl	8001090 <__udivmoddi4>
 800104e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001056:	b004      	add	sp, #16
 8001058:	4252      	negs	r2, r2
 800105a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800105e:	4770      	bx	lr

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b976 	b.w	8001364 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	4688      	mov	r8, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14d      	bne.n	800113c <__udivmoddi4+0xac>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4694      	mov	ip, r2
 80010a4:	d968      	bls.n	8001178 <__udivmoddi4+0xe8>
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b152      	cbz	r2, 80010c2 <__udivmoddi4+0x32>
 80010ac:	fa01 f302 	lsl.w	r3, r1, r2
 80010b0:	f1c2 0120 	rsb	r1, r2, #32
 80010b4:	fa20 f101 	lsr.w	r1, r0, r1
 80010b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010bc:	ea41 0803 	orr.w	r8, r1, r3
 80010c0:	4094      	lsls	r4, r2
 80010c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80010ca:	fa1f fe8c 	uxth.w	lr, ip
 80010ce:	fb01 8817 	mls	r8, r1, r7, r8
 80010d2:	fb07 f00e 	mul.w	r0, r7, lr
 80010d6:	0c23      	lsrs	r3, r4, #16
 80010d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010dc:	4298      	cmp	r0, r3
 80010de:	d90a      	bls.n	80010f6 <__udivmoddi4+0x66>
 80010e0:	eb1c 0303 	adds.w	r3, ip, r3
 80010e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80010e8:	f080 811e 	bcs.w	8001328 <__udivmoddi4+0x298>
 80010ec:	4298      	cmp	r0, r3
 80010ee:	f240 811b 	bls.w	8001328 <__udivmoddi4+0x298>
 80010f2:	3f02      	subs	r7, #2
 80010f4:	4463      	add	r3, ip
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80010fc:	fb01 3310 	mls	r3, r1, r0, r3
 8001100:	fb00 fe0e 	mul.w	lr, r0, lr
 8001104:	b2a4      	uxth	r4, r4
 8001106:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110a:	45a6      	cmp	lr, r4
 800110c:	d90a      	bls.n	8001124 <__udivmoddi4+0x94>
 800110e:	eb1c 0404 	adds.w	r4, ip, r4
 8001112:	f100 33ff 	add.w	r3, r0, #4294967295
 8001116:	f080 8109 	bcs.w	800132c <__udivmoddi4+0x29c>
 800111a:	45a6      	cmp	lr, r4
 800111c:	f240 8106 	bls.w	800132c <__udivmoddi4+0x29c>
 8001120:	4464      	add	r4, ip
 8001122:	3802      	subs	r0, #2
 8001124:	2100      	movs	r1, #0
 8001126:	eba4 040e 	sub.w	r4, r4, lr
 800112a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800112e:	b11e      	cbz	r6, 8001138 <__udivmoddi4+0xa8>
 8001130:	2300      	movs	r3, #0
 8001132:	40d4      	lsrs	r4, r2
 8001134:	e9c6 4300 	strd	r4, r3, [r6]
 8001138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113c:	428b      	cmp	r3, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0xc2>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 80ee 	beq.w	8001322 <__udivmoddi4+0x292>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c6 0500 	strd	r0, r5, [r6]
 800114c:	4608      	mov	r0, r1
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	fab3 f183 	clz	r1, r3
 8001156:	2900      	cmp	r1, #0
 8001158:	d14a      	bne.n	80011f0 <__udivmoddi4+0x160>
 800115a:	42ab      	cmp	r3, r5
 800115c:	d302      	bcc.n	8001164 <__udivmoddi4+0xd4>
 800115e:	4282      	cmp	r2, r0
 8001160:	f200 80fc 	bhi.w	800135c <__udivmoddi4+0x2cc>
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb65 0303 	sbc.w	r3, r5, r3
 800116a:	2001      	movs	r0, #1
 800116c:	4698      	mov	r8, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d0e2      	beq.n	8001138 <__udivmoddi4+0xa8>
 8001172:	e9c6 4800 	strd	r4, r8, [r6]
 8001176:	e7df      	b.n	8001138 <__udivmoddi4+0xa8>
 8001178:	b902      	cbnz	r2, 800117c <__udivmoddi4+0xec>
 800117a:	deff      	udf	#255	; 0xff
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	2a00      	cmp	r2, #0
 8001182:	f040 8091 	bne.w	80012a8 <__udivmoddi4+0x218>
 8001186:	eba1 000c 	sub.w	r0, r1, ip
 800118a:	2101      	movs	r1, #1
 800118c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001190:	fa1f fe8c 	uxth.w	lr, ip
 8001194:	fbb0 f3f7 	udiv	r3, r0, r7
 8001198:	fb07 0013 	mls	r0, r7, r3, r0
 800119c:	0c25      	lsrs	r5, r4, #16
 800119e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011a2:	fb0e f003 	mul.w	r0, lr, r3
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x12c>
 80011aa:	eb1c 0505 	adds.w	r5, ip, r5
 80011ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80011b2:	d202      	bcs.n	80011ba <__udivmoddi4+0x12a>
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	f200 80ce 	bhi.w	8001356 <__udivmoddi4+0x2c6>
 80011ba:	4643      	mov	r3, r8
 80011bc:	1a2d      	subs	r5, r5, r0
 80011be:	fbb5 f0f7 	udiv	r0, r5, r7
 80011c2:	fb07 5510 	mls	r5, r7, r0, r5
 80011c6:	fb0e fe00 	mul.w	lr, lr, r0
 80011ca:	b2a4      	uxth	r4, r4
 80011cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d0:	45a6      	cmp	lr, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x156>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011dc:	d202      	bcs.n	80011e4 <__udivmoddi4+0x154>
 80011de:	45a6      	cmp	lr, r4
 80011e0:	f200 80b6 	bhi.w	8001350 <__udivmoddi4+0x2c0>
 80011e4:	4628      	mov	r0, r5
 80011e6:	eba4 040e 	sub.w	r4, r4, lr
 80011ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011ee:	e79e      	b.n	800112e <__udivmoddi4+0x9e>
 80011f0:	f1c1 0720 	rsb	r7, r1, #32
 80011f4:	408b      	lsls	r3, r1
 80011f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8001202:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001206:	fbba f8f9 	udiv	r8, sl, r9
 800120a:	fa20 f307 	lsr.w	r3, r0, r7
 800120e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001212:	408d      	lsls	r5, r1
 8001214:	fa1f fe8c 	uxth.w	lr, ip
 8001218:	431d      	orrs	r5, r3
 800121a:	fa00 f301 	lsl.w	r3, r0, r1
 800121e:	fb08 f00e 	mul.w	r0, r8, lr
 8001222:	0c2c      	lsrs	r4, r5, #16
 8001224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001228:	42a0      	cmp	r0, r4
 800122a:	fa02 f201 	lsl.w	r2, r2, r1
 800122e:	d90b      	bls.n	8001248 <__udivmoddi4+0x1b8>
 8001230:	eb1c 0404 	adds.w	r4, ip, r4
 8001234:	f108 3aff 	add.w	sl, r8, #4294967295
 8001238:	f080 8088 	bcs.w	800134c <__udivmoddi4+0x2bc>
 800123c:	42a0      	cmp	r0, r4
 800123e:	f240 8085 	bls.w	800134c <__udivmoddi4+0x2bc>
 8001242:	f1a8 0802 	sub.w	r8, r8, #2
 8001246:	4464      	add	r4, ip
 8001248:	1a24      	subs	r4, r4, r0
 800124a:	fbb4 f0f9 	udiv	r0, r4, r9
 800124e:	fb09 4410 	mls	r4, r9, r0, r4
 8001252:	fb00 fe0e 	mul.w	lr, r0, lr
 8001256:	b2ad      	uxth	r5, r5
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x1e2>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d26c      	bcs.n	8001344 <__udivmoddi4+0x2b4>
 800126a:	45a6      	cmp	lr, r4
 800126c:	d96a      	bls.n	8001344 <__udivmoddi4+0x2b4>
 800126e:	3802      	subs	r0, #2
 8001270:	4464      	add	r4, ip
 8001272:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001276:	fba0 9502 	umull	r9, r5, r0, r2
 800127a:	eba4 040e 	sub.w	r4, r4, lr
 800127e:	42ac      	cmp	r4, r5
 8001280:	46c8      	mov	r8, r9
 8001282:	46ae      	mov	lr, r5
 8001284:	d356      	bcc.n	8001334 <__udivmoddi4+0x2a4>
 8001286:	d053      	beq.n	8001330 <__udivmoddi4+0x2a0>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d069      	beq.n	8001360 <__udivmoddi4+0x2d0>
 800128c:	ebb3 0208 	subs.w	r2, r3, r8
 8001290:	eb64 040e 	sbc.w	r4, r4, lr
 8001294:	fa22 f301 	lsr.w	r3, r2, r1
 8001298:	fa04 f707 	lsl.w	r7, r4, r7
 800129c:	431f      	orrs	r7, r3
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e747      	b.n	8001138 <__udivmoddi4+0xa8>
 80012a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ac:	f1c2 0120 	rsb	r1, r2, #32
 80012b0:	fa25 f301 	lsr.w	r3, r5, r1
 80012b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b8:	fa20 f101 	lsr.w	r1, r0, r1
 80012bc:	4095      	lsls	r5, r2
 80012be:	430d      	orrs	r5, r1
 80012c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80012c4:	fb07 3311 	mls	r3, r7, r1, r3
 80012c8:	fa1f fe8c 	uxth.w	lr, ip
 80012cc:	0c28      	lsrs	r0, r5, #16
 80012ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012d2:	fb01 f30e 	mul.w	r3, r1, lr
 80012d6:	4283      	cmp	r3, r0
 80012d8:	fa04 f402 	lsl.w	r4, r4, r2
 80012dc:	d908      	bls.n	80012f0 <__udivmoddi4+0x260>
 80012de:	eb1c 0000 	adds.w	r0, ip, r0
 80012e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80012e6:	d22f      	bcs.n	8001348 <__udivmoddi4+0x2b8>
 80012e8:	4283      	cmp	r3, r0
 80012ea:	d92d      	bls.n	8001348 <__udivmoddi4+0x2b8>
 80012ec:	3902      	subs	r1, #2
 80012ee:	4460      	add	r0, ip
 80012f0:	1ac0      	subs	r0, r0, r3
 80012f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80012f6:	fb07 0013 	mls	r0, r7, r3, r0
 80012fa:	b2ad      	uxth	r5, r5
 80012fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001300:	fb03 f00e 	mul.w	r0, r3, lr
 8001304:	42a8      	cmp	r0, r5
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x28a>
 8001308:	eb1c 0505 	adds.w	r5, ip, r5
 800130c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001310:	d216      	bcs.n	8001340 <__udivmoddi4+0x2b0>
 8001312:	42a8      	cmp	r0, r5
 8001314:	d914      	bls.n	8001340 <__udivmoddi4+0x2b0>
 8001316:	3b02      	subs	r3, #2
 8001318:	4465      	add	r5, ip
 800131a:	1a28      	subs	r0, r5, r0
 800131c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001320:	e738      	b.n	8001194 <__udivmoddi4+0x104>
 8001322:	4631      	mov	r1, r6
 8001324:	4630      	mov	r0, r6
 8001326:	e707      	b.n	8001138 <__udivmoddi4+0xa8>
 8001328:	462f      	mov	r7, r5
 800132a:	e6e4      	b.n	80010f6 <__udivmoddi4+0x66>
 800132c:	4618      	mov	r0, r3
 800132e:	e6f9      	b.n	8001124 <__udivmoddi4+0x94>
 8001330:	454b      	cmp	r3, r9
 8001332:	d2a9      	bcs.n	8001288 <__udivmoddi4+0x1f8>
 8001334:	ebb9 0802 	subs.w	r8, r9, r2
 8001338:	eb65 0e0c 	sbc.w	lr, r5, ip
 800133c:	3801      	subs	r0, #1
 800133e:	e7a3      	b.n	8001288 <__udivmoddi4+0x1f8>
 8001340:	4643      	mov	r3, r8
 8001342:	e7ea      	b.n	800131a <__udivmoddi4+0x28a>
 8001344:	4628      	mov	r0, r5
 8001346:	e794      	b.n	8001272 <__udivmoddi4+0x1e2>
 8001348:	4641      	mov	r1, r8
 800134a:	e7d1      	b.n	80012f0 <__udivmoddi4+0x260>
 800134c:	46d0      	mov	r8, sl
 800134e:	e77b      	b.n	8001248 <__udivmoddi4+0x1b8>
 8001350:	4464      	add	r4, ip
 8001352:	3802      	subs	r0, #2
 8001354:	e747      	b.n	80011e6 <__udivmoddi4+0x156>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	e72f      	b.n	80011bc <__udivmoddi4+0x12c>
 800135c:	4608      	mov	r0, r1
 800135e:	e706      	b.n	800116e <__udivmoddi4+0xde>
 8001360:	4631      	mov	r1, r6
 8001362:	e6e9      	b.n	8001138 <__udivmoddi4+0xa8>

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <lcd7735_senddata>:
#include "ST7735.h"
#include "stm32l1xx_hal.h"              // Keil::Device:STM32Cube HAL:Common

//**********************Start of ST7735 LCD APIs*********************/
extern SPI_HandleTypeDef hspi1;
void lcd7735_senddata(unsigned char data) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,1,0x1);
 8001372:	1df9      	adds	r1, r7, #7
 8001374:	2301      	movs	r3, #1
 8001376:	2201      	movs	r2, #1
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <lcd7735_senddata+0x20>)
 800137a:	f004 fd28 	bl	8005dce <HAL_SPI_Transmit>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002c4 	.word	0x200002c4

0800138c <ST7735_Init>:

void ST7735_SetCursor(uint32_t newX, uint32_t newY);
void standard_Init_Cmd(void);


void ST7735_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

 //ST7735_GPIO_Init();
 //ST7735_SPI_Init();
 standard_Init_Cmd();
 8001390:	f000 f980 	bl	8001694 <standard_Init_Cmd>

  ST7735_SetCursor(0,0);
 8001394:	2100      	movs	r1, #0
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f80c 	bl	80013b4 <ST7735_SetCursor>
  StTextColor = YELLOW;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <ST7735_Init+0x24>)
 800139e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80013a2:	801a      	strh	r2, [r3, #0]
  ST7735_FillScreen(BLACK);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f8ab 	bl	8001500 <ST7735_FillScreen>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000004 	.word	0x20000004

080013b4 <ST7735_SetCursor>:

void ST7735_SetCursor(uint32_t newX, uint32_t newY){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  if((newX > 20) || (newY > 15)){
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b14      	cmp	r3, #20
 80013c2:	d809      	bhi.n	80013d8 <ST7735_SetCursor+0x24>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	d806      	bhi.n	80013d8 <ST7735_SetCursor+0x24>
    return;
  }
  StX = newX;
 80013ca:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <ST7735_SetCursor+0x30>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
  StY = newY;
 80013d0:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <ST7735_SetCursor+0x34>)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e000      	b.n	80013da <ST7735_SetCursor+0x26>
    return;
 80013d8:	bf00      	nop
}
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000204 	.word	0x20000204
 80013e8:	20000208 	.word	0x20000208

080013ec <ST7735_FillRect>:

void ST7735_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	803b      	strh	r3, [r7, #0]
  uint8_t hi = color >> 8, lo = color;
 800140a:	8c3b      	ldrh	r3, [r7, #32]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	b29b      	uxth	r3, r3
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	8c3b      	ldrh	r3, [r7, #32]
 8001414:	73bb      	strb	r3, [r7, #14]

  if((x >= _width) || (y >= _height)) return;
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <ST7735_FillRect+0x10c>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001420:	429a      	cmp	r2, r3
 8001422:	da64      	bge.n	80014ee <ST7735_FillRect+0x102>
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <ST7735_FillRect+0x110>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	da5d      	bge.n	80014ee <ST7735_FillRect+0x102>
  if((x + w - 1) >= _width)  w = _width  - x;
 8001432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143a:	4413      	add	r3, r2
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <ST7735_FillRect+0x10c>)
 800143e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001442:	4293      	cmp	r3, r2
 8001444:	dd07      	ble.n	8001456 <ST7735_FillRect+0x6a>
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <ST7735_FillRect+0x10c>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	b29a      	uxth	r2, r3
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b29b      	uxth	r3, r3
 8001454:	807b      	strh	r3, [r7, #2]
  if((y + h - 1) >= _height) h = _height - y;
 8001456:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800145a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800145e:	4413      	add	r3, r2
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <ST7735_FillRect+0x110>)
 8001462:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001466:	4293      	cmp	r3, r2
 8001468:	dd07      	ble.n	800147a <ST7735_FillRect+0x8e>
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <ST7735_FillRect+0x110>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	803b      	strh	r3, [r7, #0]

  setAddrWindow(x, y, x+w-1, y+h-1);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3b01      	subs	r3, #1
 8001490:	b2dc      	uxtb	r4, r3
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4622      	mov	r2, r4
 80014a4:	f000 f872 	bl	800158c <setAddrWindow>

  for(y=h; y>0; y--) {
 80014a8:	883b      	ldrh	r3, [r7, #0]
 80014aa:	80bb      	strh	r3, [r7, #4]
 80014ac:	e01a      	b.n	80014e4 <ST7735_FillRect+0xf8>
    for(x=w; x>0; x--) {
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	e00d      	b.n	80014d0 <ST7735_FillRect+0xe4>
      writedata(hi);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f852 	bl	8001560 <writedata>
      writedata(lo);
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f84e 	bl	8001560 <writedata>
    for(x=w; x>0; x--) {
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dced      	bgt.n	80014b4 <ST7735_FillRect+0xc8>
  for(y=h; y>0; y--) {
 80014d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	80bb      	strh	r3, [r7, #4]
 80014e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dce0      	bgt.n	80014ae <ST7735_FillRect+0xc2>
 80014ec:	e000      	b.n	80014f0 <ST7735_FillRect+0x104>
  if((x >= _width) || (y >= _height)) return;
 80014ee:	bf00      	nop
    }
  }
}
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000002 	.word	0x20000002

08001500 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  ST7735_FillRect(0, 0, _width, _height, color);
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <ST7735_FillScreen+0x2c>)
 800150c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <ST7735_FillScreen+0x30>)
 8001512:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	460b      	mov	r3, r1
 800151c:	2100      	movs	r1, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ff64 	bl	80013ec <ST7735_FillRect>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000002 	.word	0x20000002

08001534 <writecommand>:

void static writecommand(uint8_t c) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  LCD_DC0; //Set DC low
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <writecommand+0x28>)
 8001546:	f002 f949 	bl	80037dc <HAL_GPIO_WritePin>
  lcd7735_senddata(c);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff0b 	bl	8001368 <lcd7735_senddata>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000

08001560 <writedata>:
void static writedata(uint8_t d) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  LCD_DC1;//Set DC HIGH
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <writedata+0x28>)
 8001572:	f002 f933 	bl	80037dc <HAL_GPIO_WritePin>
   lcd7735_senddata(d);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fef5 	bl	8001368 <lcd7735_senddata>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020000 	.word	0x40020000

0800158c <setAddrWindow>:

void static setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	461a      	mov	r2, r3
 800159a:	4623      	mov	r3, r4
 800159c:	71fb      	strb	r3, [r7, #7]
 800159e:	4603      	mov	r3, r0
 80015a0:	71bb      	strb	r3, [r7, #6]
 80015a2:	460b      	mov	r3, r1
 80015a4:	717b      	strb	r3, [r7, #5]
 80015a6:	4613      	mov	r3, r2
 80015a8:	713b      	strb	r3, [r7, #4]

  writecommand(ST7735_CASET); // Column addr set
 80015aa:	202a      	movs	r0, #42	; 0x2a
 80015ac:	f7ff ffc2 	bl	8001534 <writecommand>
  writedata(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ffd5 	bl	8001560 <writedata>
  writedata(x0+ColStart);     // XSTART
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <setAddrWindow+0x90>)
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4413      	add	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ffcd 	bl	8001560 <writedata>
  writedata(0x00);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff ffca 	bl	8001560 <writedata>
  writedata(x1+ColStart);     // XEND
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <setAddrWindow+0x90>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	4413      	add	r3, r2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ffc2 	bl	8001560 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 80015dc:	202b      	movs	r0, #43	; 0x2b
 80015de:	f7ff ffa9 	bl	8001534 <writecommand>
  writedata(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff ffbc 	bl	8001560 <writedata>
  writedata(y0+RowStart);     // YSTART
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <setAddrWindow+0x94>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	4413      	add	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ffb4 	bl	8001560 <writedata>
  writedata(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff ffb1 	bl	8001560 <writedata>
  writedata(y1+RowStart);     // YEND
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <setAddrWindow+0x94>)
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	793b      	ldrb	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffa9 	bl	8001560 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800160e:	202c      	movs	r0, #44	; 0x2c
 8001610:	f7ff ff90 	bl	8001534 <writecommand>
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	2000020c 	.word	0x2000020c
 8001620:	2000020d 	.word	0x2000020d

08001624 <Delay_Millisecond>:


void Delay_Millisecond(uint32_t delay){
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

     // configure TIM23to wrap around at 1000 Hz
    RCC->APB1ENR |= 0x02;              /* enable TIM3 clock */
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <Delay_Millisecond+0x68>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <Delay_Millisecond+0x68>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	6253      	str	r3, [r2, #36]	; 0x24
    TIM3->PSC = 160 - 1;           /* 16 000 000 / 160 = 100 000 */
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <Delay_Millisecond+0x6c>)
 800163a:	229f      	movs	r2, #159	; 0x9f
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 100 - 1;          /* 100 000 / 100 = 1000 */
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <Delay_Millisecond+0x6c>)
 8001640:	2263      	movs	r2, #99	; 0x63
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CNT = 0;                  /* clear timer counter */
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <Delay_Millisecond+0x6c>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3->CR1 = 1;                  /* enable TIM2 */
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <Delay_Millisecond+0x6c>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

 for(int i =0;i< delay;i++){
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e00f      	b.n	8001676 <Delay_Millisecond+0x52>

		while(!(TIM3->SR & 1)) {}   /* wait until UIF set */
 8001656:	bf00      	nop
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <Delay_Millisecond+0x6c>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f9      	beq.n	8001658 <Delay_Millisecond+0x34>
		TIM3->SR &= ~1;             /* clear UIF */
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <Delay_Millisecond+0x6c>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <Delay_Millisecond+0x6c>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6113      	str	r3, [r2, #16]
 for(int i =0;i< delay;i++){
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d8eb      	bhi.n	8001656 <Delay_Millisecond+0x32>
  }
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40000400 	.word	0x40000400

08001694 <standard_Init_Cmd>:


void standard_Init_Cmd(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	LCD_CS0;            // CS=0
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <standard_Init_Cmd+0x5c>)
 800169e:	f002 f89d 	bl	80037dc <HAL_GPIO_WritePin>
  LCD_RST0;           // RST=0
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4813      	ldr	r0, [pc, #76]	; (80016f4 <standard_Init_Cmd+0x60>)
 80016a8:	f002 f898 	bl	80037dc <HAL_GPIO_WritePin>

  Delay_Millisecond(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f7ff ffb9 	bl	8001624 <Delay_Millisecond>

  LCD_RST1;           // RST=1
 80016b2:	2201      	movs	r2, #1
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <standard_Init_Cmd+0x60>)
 80016b8:	f002 f890 	bl	80037dc <HAL_GPIO_WritePin>
  Delay_Millisecond(10);
 80016bc:	200a      	movs	r0, #10
 80016be:	f7ff ffb1 	bl	8001624 <Delay_Millisecond>


   lcd7735_sendCmd(0x11);
 80016c2:	2011      	movs	r0, #17
 80016c4:	f000 f986 	bl	80019d4 <lcd7735_sendCmd>

   Delay_Millisecond(120);
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f7ff ffab 	bl	8001624 <Delay_Millisecond>

   lcd7735_sendCmd (0x3A); //Set Color mode
 80016ce:	203a      	movs	r0, #58	; 0x3a
 80016d0:	f000 f980 	bl	80019d4 <lcd7735_sendCmd>
   lcd7735_sendData(0x05); //16 bits
 80016d4:	2005      	movs	r0, #5
 80016d6:	f000 f993 	bl	8001a00 <lcd7735_sendData>
	 lcd7735_sendCmd (0x36);
 80016da:	2036      	movs	r0, #54	; 0x36
 80016dc:	f000 f97a 	bl	80019d4 <lcd7735_sendCmd>
	 lcd7735_sendData(0x14);
 80016e0:	2014      	movs	r0, #20
 80016e2:	f000 f98d 	bl	8001a00 <lcd7735_sendData>
	 lcd7735_sendCmd (0x29);//Display on
 80016e6:	2029      	movs	r0, #41	; 0x29
 80016e8:	f000 f974 	bl	80019d4 <lcd7735_sendCmd>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800

080016f8 <pushColor>:

void static pushColor(uint16_t color) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  writedata((uint8_t)(color >> 8));
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff28 	bl	8001560 <writedata>
  writedata((uint8_t)color);
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff23 	bl	8001560 <writedata>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <ST7735_DrawPixel>:

void ST7735_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	80bb      	strh	r3, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	807b      	strh	r3, [r7, #2]

  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db20      	blt.n	8001780 <ST7735_DrawPixel+0x5c>
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <ST7735_DrawPixel+0x64>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001748:	429a      	cmp	r2, r3
 800174a:	da19      	bge.n	8001780 <ST7735_DrawPixel+0x5c>
 800174c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db15      	blt.n	8001780 <ST7735_DrawPixel+0x5c>
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <ST7735_DrawPixel+0x68>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	da0e      	bge.n	8001780 <ST7735_DrawPixel+0x5c>

  setAddrWindow(x,y,x,y);
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	b2d8      	uxtb	r0, r3
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	b2d9      	uxtb	r1, r3
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f7ff ff0b 	bl	800158c <setAddrWindow>

  pushColor(color);
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ffbd 	bl	80016f8 <pushColor>
 800177e:	e000      	b.n	8001782 <ST7735_DrawPixel+0x5e>
  if((x < 0) || (x >= _width) || (y < 0) || (y >= _height)) return;
 8001780:	bf00      	nop
}
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000002 	.word	0x20000002

08001790 <ST7735_DrawCharS>:
    i = i + skipC;
    i = i - 2*originalWidth;
  }
}

void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af02      	add	r7, sp, #8
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	80fb      	strh	r3, [r7, #6]
 80017a2:	4603      	mov	r3, r0
 80017a4:	80bb      	strh	r3, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
 80017aa:	4613      	mov	r3, r2
 80017ac:	803b      	strh	r3, [r7, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <ST7735_DrawCharS+0x1b4>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f280 80bf 	bge.w	800193c <ST7735_DrawCharS+0x1ac>
     (y >= _height)           ||
 80017be:	4b62      	ldr	r3, [pc, #392]	; (8001948 <ST7735_DrawCharS+0x1b8>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
  if((x >= _width)            ||
 80017c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f280 80b7 	bge.w	800193c <ST7735_DrawCharS+0x1ac>
     ((x + 5 * size - 1) < 0) ||
 80017ce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	440b      	add	r3, r1
     (y >= _height)           ||
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f340 80ac 	ble.w	800193c <ST7735_DrawCharS+0x1ac>
     ((y + 8 * size - 1) < 0))
 80017e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) ||
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f340 80a3 	ble.w	800193c <ST7735_DrawCharS+0x1ac>
    return;

  for (i=0; i<6; i++ ) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e09a      	b.n	8001932 <ST7735_DrawCharS+0x1a2>
    if (i == 5)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d102      	bne.n	8001808 <ST7735_DrawCharS+0x78>
      line = 0x0;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e008      	b.n	800181a <ST7735_DrawCharS+0x8a>
    else
      line = Font[(c*5)+i];
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <ST7735_DrawCharS+0x1bc>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e081      	b.n	8001924 <ST7735_DrawCharS+0x194>
      if (line & 0x1) {
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d038      	beq.n	800189c <ST7735_DrawCharS+0x10c>
        if (size == 1)
 800182a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800182e:	2b01      	cmp	r3, #1
 8001830:	d110      	bne.n	8001854 <ST7735_DrawCharS+0xc4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	b29a      	uxth	r2, r3
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4413      	add	r3, r2
 800183a:	b29b      	uxth	r3, r3
 800183c:	b218      	sxth	r0, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	b29a      	uxth	r2, r3
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21b      	sxth	r3, r3
 800184a:	883a      	ldrh	r2, [r7, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff ff69 	bl	8001724 <ST7735_DrawPixel>
 8001852:	e061      	b.n	8001918 <ST7735_DrawCharS+0x188>
        else {
          ST7735_FillRect(x+(i*size), y+(j*size), size, size, textColor);
 8001854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001858:	b29b      	uxth	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	b292      	uxth	r2, r2
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	b29a      	uxth	r2, r3
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	b218      	sxth	r0, r3
 800186c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001870:	b29b      	uxth	r3, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	b292      	uxth	r2, r2
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	b219      	sxth	r1, r3
 8001884:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001888:	b21a      	sxth	r2, r3
 800188a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800188e:	b21c      	sxth	r4, r3
 8001890:	883b      	ldrh	r3, [r7, #0]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff fda9 	bl	80013ec <ST7735_FillRect>
 800189a:	e03d      	b.n	8001918 <ST7735_DrawCharS+0x188>
        }
      } else if (bgColor != textColor) {
 800189c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80018a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d037      	beq.n	8001918 <ST7735_DrawCharS+0x188>
        if (size == 1) // default size
 80018a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d110      	bne.n	80018d2 <ST7735_DrawCharS+0x142>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b218      	sxth	r0, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff ff2a 	bl	8001724 <ST7735_DrawPixel>
 80018d0:	e022      	b.n	8001918 <ST7735_DrawCharS+0x188>
        else {  // big size
          ST7735_FillRect(x+i*size, y+j*size, size, size, bgColor);
 80018d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	b292      	uxth	r2, r2
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	4413      	add	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b218      	sxth	r0, r3
 80018ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	b292      	uxth	r2, r2
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b219      	sxth	r1, r3
 8001902:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001906:	b21a      	sxth	r2, r3
 8001908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800190c:	b21c      	sxth	r4, r3
 800190e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4623      	mov	r3, r4
 8001914:	f7ff fd6a 	bl	80013ec <ST7735_FillRect>
        }
      }
      line >>= 1;
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b07      	cmp	r3, #7
 8001928:	f77f af7a 	ble.w	8001820 <ST7735_DrawCharS+0x90>
  for (i=0; i<6; i++ ) {
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	3301      	adds	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b05      	cmp	r3, #5
 8001936:	f77f af61 	ble.w	80017fc <ST7735_DrawCharS+0x6c>
 800193a:	e000      	b.n	800193e <ST7735_DrawCharS+0x1ae>
    return;
 800193c:	bf00      	nop
    }
  }
}
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000002 	.word	0x20000002
 800194c:	0800c49c 	.word	0x0800c49c

08001950 <ST7735_DrawString>:
}
uint16_t ST7735_Color565(uint8_t r, uint8_t g, uint8_t b) {
  return ((b & 0xF8) << 8) | ((g & 0xFC) << 3) | (r >> 3);
}

uint32_t ST7735_DrawString(uint16_t x, uint16_t y, char *pt, int16_t textColor){
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af02      	add	r7, sp, #8
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	460b      	mov	r3, r1
 8001960:	81bb      	strh	r3, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
  uint32_t count = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if(y>15) return 0;
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d927      	bls.n	80019c0 <ST7735_DrawString+0x70>
 8001970:	2300      	movs	r3, #0
 8001972:	e02a      	b.n	80019ca <ST7735_DrawString+0x7a>
  while(*pt){
    ST7735_DrawCharS(x*6, y*10, *pt, textColor, BLACK, 1);
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	461a      	mov	r2, r3
 8001978:	0052      	lsls	r2, r2, #1
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	b218      	sxth	r0, r3
 8001982:	89bb      	ldrh	r3, [r7, #12]
 8001984:	461a      	mov	r2, r3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	b219      	sxth	r1, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001998:	2401      	movs	r4, #1
 800199a:	9401      	str	r4, [sp, #4]
 800199c:	2400      	movs	r4, #0
 800199e:	9400      	str	r4, [sp, #0]
 80019a0:	f7ff fef6 	bl	8001790 <ST7735_DrawCharS>
    pt++;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
    x = x+1;
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	3301      	adds	r3, #1
 80019ae:	81fb      	strh	r3, [r7, #14]
    if(x>20) return count;  // number of characters printed
 80019b0:	89fb      	ldrh	r3, [r7, #14]
 80019b2:	2b14      	cmp	r3, #20
 80019b4:	d901      	bls.n	80019ba <ST7735_DrawString+0x6a>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	e007      	b.n	80019ca <ST7735_DrawString+0x7a>
    count++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while(*pt){
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1d5      	bne.n	8001974 <ST7735_DrawString+0x24>
  }
  return count;  // number of characters printed
 80019c8:	697b      	ldr	r3, [r7, #20]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
	...

080019d4 <lcd7735_sendCmd>:
  } else{
    X++;
  }
}

void lcd7735_sendCmd(unsigned char cmd) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <lcd7735_sendCmd+0x28>)
 80019e6:	f001 fef9 	bl	80037dc <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fcbb 	bl	8001368 <lcd7735_senddata>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40020000 	.word	0x40020000

08001a00 <lcd7735_sendData>:

void lcd7735_sendData(unsigned char data) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <lcd7735_sendData+0x28>)
 8001a12:	f001 fee3 	bl	80037dc <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fca5 	bl	8001368 <lcd7735_senddata>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020000 	.word	0x40020000

08001a2c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2203      	movs	r2, #3
 8001a44:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	715a      	strb	r2, [r3, #5]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b08a      	sub	sp, #40	; 0x28
 8001a66:	af04      	add	r7, sp, #16
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	8af9      	ldrh	r1, [r7, #22]
 8001a82:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	f002 fc1c 	bl	80042d0 <HAL_I2C_Mem_Read>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10b      	bne.n	8001ab6 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a9e:	7d7b      	ldrb	r3, [r7, #21]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	7d3b      	ldrb	r3, [r7, #20]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	801a      	strh	r2, [r3, #0]
		return true;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <read_register16+0x56>
	} else
		return false;
 8001ab6:	2300      	movs	r3, #0

}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	461a      	mov	r2, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	72fb      	strb	r3, [r7, #11]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	7abb      	ldrb	r3, [r7, #10]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8af9      	ldrh	r1, [r7, #22]
 8001aea:	f241 3488 	movw	r4, #5000	; 0x1388
 8001aee:	9402      	str	r4, [sp, #8]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2301      	movs	r3, #1
 8001af8:	f002 fbea 	bl	80042d0 <HAL_I2C_Mem_Read>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <read_data+0x46>
		return 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <read_data+0x48>
	else
		return 1;
 8001b06:	2301      	movs	r3, #1

}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}

08001b10 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2188      	movs	r1, #136	; 0x88
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff9f 	bl	8001a62 <read_register16>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06f      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	218a      	movs	r1, #138	; 0x8a
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff95 	bl	8001a62 <read_register16>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d065      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	461a      	mov	r2, r3
 8001b44:	218c      	movs	r1, #140	; 0x8c
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff8b 	bl	8001a62 <read_register16>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d05b      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3306      	adds	r3, #6
 8001b56:	461a      	mov	r2, r3
 8001b58:	218e      	movs	r1, #142	; 0x8e
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ff81 	bl	8001a62 <read_register16>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d051      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2190      	movs	r1, #144	; 0x90
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff77 	bl	8001a62 <read_register16>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d047      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	330a      	adds	r3, #10
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2192      	movs	r1, #146	; 0x92
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff6d 	bl	8001a62 <read_register16>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03d      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	330c      	adds	r3, #12
 8001b92:	461a      	mov	r2, r3
 8001b94:	2194      	movs	r1, #148	; 0x94
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff63 	bl	8001a62 <read_register16>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d033      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	330e      	adds	r3, #14
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2196      	movs	r1, #150	; 0x96
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ff59 	bl	8001a62 <read_register16>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d029      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3310      	adds	r3, #16
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2198      	movs	r1, #152	; 0x98
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff4f 	bl	8001a62 <read_register16>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01f      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3312      	adds	r3, #18
 8001bce:	461a      	mov	r2, r3
 8001bd0:	219a      	movs	r1, #154	; 0x9a
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff45 	bl	8001a62 <read_register16>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3314      	adds	r3, #20
 8001be2:	461a      	mov	r2, r3
 8001be4:	219c      	movs	r1, #156	; 0x9c
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff3b 	bl	8001a62 <read_register16>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	219e      	movs	r1, #158	; 0x9e
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff31 	bl	8001a62 <read_register16>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <read_calibration_data+0xfa>

		return true;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <read_calibration_data+0xfc>
	}

	return false;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af04      	add	r7, sp, #16
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	4613      	mov	r3, r2
 8001c22:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	89f9      	ldrh	r1, [r7, #14]
 8001c36:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	1cbb      	adds	r3, r7, #2
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	f002 fa49 	bl	80040dc <HAL_I2C_Mem_Write>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <write_register8+0x40>
		return false;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <write_register8+0x42>
	else
		return true;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_1) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c6c:	2b77      	cmp	r3, #119	; 0x77
 8001c6e:	d001      	beq.n	8001c74 <bmp280_init+0x16>

		return false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e071      	b.n	8001d58 <bmp280_init+0xfa>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	21d0      	movs	r1, #208	; 0xd0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff1e 	bl	8001ac0 <read_data>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <bmp280_init+0x30>
		return false;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e064      	b.n	8001d58 <bmp280_init+0xfa>
	}

	if (dev->id != BMP280_CHIP_ID) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c94:	2b58      	cmp	r3, #88	; 0x58
 8001c96:	d001      	beq.n	8001c9c <bmp280_init+0x3e>

		return false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e05d      	b.n	8001d58 <bmp280_init+0xfa>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001c9c:	22b6      	movs	r2, #182	; 0xb6
 8001c9e:	21e0      	movs	r1, #224	; 0xe0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffb7 	bl	8001c14 <write_register8>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <bmp280_init+0x52>
		return false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	e053      	b.n	8001d58 <bmp280_init+0xfa>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001cb0:	f107 020d 	add.w	r2, r7, #13
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	21f3      	movs	r1, #243	; 0xf3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff01 	bl	8001ac0 <read_data>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f5      	bne.n	8001cb0 <bmp280_init+0x52>
				&& (status & 1) == 0)
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <bmp280_init+0x52>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff1e 	bl	8001b10 <read_calibration_data>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d100      	bne.n	8001ce2 <bmp280_init+0x84>
 8001ce0:	e001      	b.n	8001ce6 <bmp280_init+0x88>
		return false;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e038      	b.n	8001d58 <bmp280_init+0xfa>
	}


	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	795b      	ldrb	r3, [r3, #5]
 8001cea:	015b      	lsls	r3, r3, #5
 8001cec:	b25a      	sxtb	r2, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	21f5      	movs	r1, #245	; 0xf5
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff86 	bl	8001c14 <write_register8>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <bmp280_init+0xb4>
		return false;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e022      	b.n	8001d58 <bmp280_init+0xfa>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <bmp280_init+0xc2>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001d3e:	73bb      	strb	r3, [r7, #14]


	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001d40:	7bbb      	ldrb	r3, [r7, #14]
 8001d42:	461a      	mov	r2, r3
 8001d44:	21f4      	movs	r1, #244	; 0xf4
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff64 	bl	8001c14 <write_register8>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <bmp280_init+0xf8>
		return false;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <bmp280_init+0xfa>
	}

	return true;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001d60:	b480      	push	{r7}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	10da      	asrs	r2, r3, #3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001d82:	12db      	asrs	r3, r3, #11
 8001d84:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	111b      	asrs	r3, r3, #4
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	8812      	ldrh	r2, [r2, #0]
 8001d8e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	1112      	asrs	r2, r2, #4
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	8809      	ldrh	r1, [r1, #0]
 8001d98:	1a52      	subs	r2, r2, r1
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001daa:	139b      	asrs	r3, r3, #14
 8001dac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	441a      	add	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3380      	adds	r3, #128	; 0x80
 8001dc4:	121b      	asrs	r3, r3, #8
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd4:	b0cc      	sub	sp, #304	; 0x130
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001ddc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001de0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001de8:	17da      	asrs	r2, r3, #31
 8001dea:	461c      	mov	r4, r3
 8001dec:	4615      	mov	r5, r2
 8001dee:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001df2:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001df6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001dfa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e02:	fb03 f102 	mul.w	r1, r3, r2
 8001e06:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	18ca      	adds	r2, r1, r3
 8001e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e18:	fba3 8903 	umull	r8, r9, r3, r3
 8001e1c:	eb02 0309 	add.w	r3, r2, r9
 8001e20:	4699      	mov	r9, r3
 8001e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	17da      	asrs	r2, r3, #31
 8001e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e32:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e36:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	fb03 f209 	mul.w	r2, r3, r9
 8001e40:	460b      	mov	r3, r1
 8001e42:	fb08 f303 	mul.w	r3, r8, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	4602      	mov	r2, r0
 8001e4a:	fba8 2102 	umull	r2, r1, r8, r2
 8001e4e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001e52:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001e60:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001e64:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001e68:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e70:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e7c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001e80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e84:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001e88:	462a      	mov	r2, r5
 8001e8a:	fb02 f203 	mul.w	r2, r2, r3
 8001e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e92:	4621      	mov	r1, r4
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	441a      	add	r2, r3
 8001e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	fba3 3101 	umull	r3, r1, r3, r1
 8001ea4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001ea8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001ec2:	462b      	mov	r3, r5
 8001ec4:	0459      	lsls	r1, r3, #17
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ecc:	4623      	mov	r3, r4
 8001ece:	0458      	lsls	r0, r3, #17
 8001ed0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ed4:	1814      	adds	r4, r2, r0
 8001ed6:	643c      	str	r4, [r7, #64]	; 0x40
 8001ed8:	414b      	adcs	r3, r1
 8001eda:	647b      	str	r3, [r7, #68]	; 0x44
 8001edc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ee0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ee8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	17da      	asrs	r2, r3, #31
 8001ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f04:	00d9      	lsls	r1, r3, #3
 8001f06:	2000      	movs	r0, #0
 8001f08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001f0c:	1814      	adds	r4, r2, r0
 8001f0e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001f10:	414b      	adcs	r3, r1
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f14:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001f18:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001f1c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f24:	fb03 f102 	mul.w	r1, r3, r2
 8001f28:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	18ca      	adds	r2, r1, r3
 8001f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f3a:	fba3 3103 	umull	r3, r1, r3, r3
 8001f3e:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001f42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f4a:	18d3      	adds	r3, r2, r3
 8001f4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	17da      	asrs	r2, r3, #31
 8001f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f60:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f64:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001f68:	4622      	mov	r2, r4
 8001f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f6e:	4641      	mov	r1, r8
 8001f70:	fb01 f202 	mul.w	r2, r1, r2
 8001f74:	464d      	mov	r5, r9
 8001f76:	4618      	mov	r0, r3
 8001f78:	4621      	mov	r1, r4
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	fb03 f305 	mul.w	r3, r3, r5
 8001f80:	4413      	add	r3, r2
 8001f82:	4602      	mov	r2, r0
 8001f84:	4641      	mov	r1, r8
 8001f86:	fba2 2101 	umull	r2, r1, r2, r1
 8001f8a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001f8e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001f92:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001f96:	4413      	add	r3, r2
 8001f98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001f9c:	f04f 0000 	mov.w	r0, #0
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001fa8:	4623      	mov	r3, r4
 8001faa:	0a18      	lsrs	r0, r3, #8
 8001fac:	462a      	mov	r2, r5
 8001fae:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	17da      	asrs	r2, r3, #31
 8001fc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fc6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fce:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001fd2:	464a      	mov	r2, r9
 8001fd4:	fb02 f203 	mul.w	r2, r2, r3
 8001fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fdc:	4644      	mov	r4, r8
 8001fde:	fb04 f303 	mul.w	r3, r4, r3
 8001fe2:	441a      	add	r2, r3
 8001fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fe8:	4644      	mov	r4, r8
 8001fea:	fba3 3404 	umull	r3, r4, r3, r4
 8001fee:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ffa:	18d3      	adds	r3, r2, r3
 8001ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800200c:	464c      	mov	r4, r9
 800200e:	0323      	lsls	r3, r4, #12
 8002010:	46c4      	mov	ip, r8
 8002012:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8002016:	4644      	mov	r4, r8
 8002018:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800201a:	1884      	adds	r4, r0, r2
 800201c:	633c      	str	r4, [r7, #48]	; 0x30
 800201e:	eb41 0303 	adc.w	r3, r1, r3
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
 8002024:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002028:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800202c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002030:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002034:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002038:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800203c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002040:	88db      	ldrh	r3, [r3, #6]
 8002042:	b29b      	uxth	r3, r3
 8002044:	2200      	movs	r2, #0
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800204a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800204e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002052:	4622      	mov	r2, r4
 8002054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002058:	4641      	mov	r1, r8
 800205a:	fb01 f202 	mul.w	r2, r1, r2
 800205e:	464d      	mov	r5, r9
 8002060:	4618      	mov	r0, r3
 8002062:	4621      	mov	r1, r4
 8002064:	4603      	mov	r3, r0
 8002066:	fb03 f305 	mul.w	r3, r3, r5
 800206a:	4413      	add	r3, r2
 800206c:	4602      	mov	r2, r0
 800206e:	4641      	mov	r1, r8
 8002070:	fba2 2101 	umull	r2, r1, r2, r1
 8002074:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002078:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800207c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002080:	4413      	add	r3, r2
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002092:	4629      	mov	r1, r5
 8002094:	104a      	asrs	r2, r1, #1
 8002096:	4629      	mov	r1, r5
 8002098:	17cb      	asrs	r3, r1, #31
 800209a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800209e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80020a2:	4313      	orrs	r3, r2
 80020a4:	d101      	bne.n	80020aa <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 80020a6:	2300      	movs	r3, #0
 80020a8:	e146      	b.n	8002338 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 80020aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020ae:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80020b2:	17da      	asrs	r2, r3, #31
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80020bc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80020c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020c4:	105b      	asrs	r3, r3, #1
 80020c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020ce:	07db      	lsls	r3, r3, #31
 80020d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020dc:	4604      	mov	r4, r0
 80020de:	1aa4      	subs	r4, r4, r2
 80020e0:	67bc      	str	r4, [r7, #120]	; 0x78
 80020e2:	eb61 0303 	sbc.w	r3, r1, r3
 80020e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020e8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020ec:	4622      	mov	r2, r4
 80020ee:	462b      	mov	r3, r5
 80020f0:	1891      	adds	r1, r2, r2
 80020f2:	6239      	str	r1, [r7, #32]
 80020f4:	415b      	adcs	r3, r3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020fc:	4621      	mov	r1, r4
 80020fe:	1851      	adds	r1, r2, r1
 8002100:	61b9      	str	r1, [r7, #24]
 8002102:	4629      	mov	r1, r5
 8002104:	414b      	adcs	r3, r1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002114:	4649      	mov	r1, r9
 8002116:	018b      	lsls	r3, r1, #6
 8002118:	4641      	mov	r1, r8
 800211a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800211e:	4641      	mov	r1, r8
 8002120:	018a      	lsls	r2, r1, #6
 8002122:	4641      	mov	r1, r8
 8002124:	1889      	adds	r1, r1, r2
 8002126:	6139      	str	r1, [r7, #16]
 8002128:	4649      	mov	r1, r9
 800212a:	eb43 0101 	adc.w	r1, r3, r1
 800212e:	6179      	str	r1, [r7, #20]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800213c:	4649      	mov	r1, r9
 800213e:	008b      	lsls	r3, r1, #2
 8002140:	46c4      	mov	ip, r8
 8002142:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002146:	4641      	mov	r1, r8
 8002148:	008a      	lsls	r2, r1, #2
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	4603      	mov	r3, r0
 8002150:	4622      	mov	r2, r4
 8002152:	189b      	adds	r3, r3, r2
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	460b      	mov	r3, r1
 8002158:	462a      	mov	r2, r5
 800215a:	eb42 0303 	adc.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800216c:	4649      	mov	r1, r9
 800216e:	008b      	lsls	r3, r1, #2
 8002170:	46c4      	mov	ip, r8
 8002172:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8002176:	4641      	mov	r1, r8
 8002178:	008a      	lsls	r2, r1, #2
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	4603      	mov	r3, r0
 8002180:	4622      	mov	r2, r4
 8002182:	189b      	adds	r3, r3, r2
 8002184:	673b      	str	r3, [r7, #112]	; 0x70
 8002186:	462b      	mov	r3, r5
 8002188:	460a      	mov	r2, r1
 800218a:	eb42 0303 	adc.w	r3, r2, r3
 800218e:	677b      	str	r3, [r7, #116]	; 0x74
 8002190:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002194:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002198:	f7fe ff12 	bl	8000fc0 <__aeabi_ldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80021a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021a8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	17da      	asrs	r2, r3, #31
 80021b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80021b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021b8:	f04f 0000 	mov.w	r0, #0
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	0b50      	lsrs	r0, r2, #13
 80021c2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80021c6:	1359      	asrs	r1, r3, #13
 80021c8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80021cc:	462b      	mov	r3, r5
 80021ce:	fb00 f203 	mul.w	r2, r0, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	fb03 f301 	mul.w	r3, r3, r1
 80021d8:	4413      	add	r3, r2
 80021da:	4622      	mov	r2, r4
 80021dc:	fba2 2100 	umull	r2, r1, r2, r0
 80021e0:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80021e4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80021e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80021ec:	4413      	add	r3, r2
 80021ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80021f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0b50      	lsrs	r0, r2, #13
 8002200:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002204:	1359      	asrs	r1, r3, #13
 8002206:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800220a:	462b      	mov	r3, r5
 800220c:	fb00 f203 	mul.w	r2, r0, r3
 8002210:	4623      	mov	r3, r4
 8002212:	fb03 f301 	mul.w	r3, r3, r1
 8002216:	4413      	add	r3, r2
 8002218:	4622      	mov	r2, r4
 800221a:	fba2 2100 	umull	r2, r1, r2, r0
 800221e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8002222:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8002226:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800222a:	4413      	add	r3, r2
 800222c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800223c:	4621      	mov	r1, r4
 800223e:	0e4a      	lsrs	r2, r1, #25
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	460c      	mov	r4, r1
 8002246:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 800224a:	164b      	asrs	r3, r1, #25
 800224c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002254:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002258:	b21b      	sxth	r3, r3
 800225a:	17da      	asrs	r2, r3, #31
 800225c:	663b      	str	r3, [r7, #96]	; 0x60
 800225e:	667a      	str	r2, [r7, #100]	; 0x64
 8002260:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002264:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002268:	462a      	mov	r2, r5
 800226a:	fb02 f203 	mul.w	r2, r2, r3
 800226e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002272:	4621      	mov	r1, r4
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800227e:	4621      	mov	r1, r4
 8002280:	fba2 2101 	umull	r2, r1, r2, r1
 8002284:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8002288:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800228c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002290:	4413      	add	r3, r2
 8002292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80022a2:	4621      	mov	r1, r4
 80022a4:	0cca      	lsrs	r2, r1, #19
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	460c      	mov	r4, r1
 80022ac:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80022b0:	14cb      	asrs	r3, r1, #19
 80022b2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80022b6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80022ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80022be:	1884      	adds	r4, r0, r2
 80022c0:	65bc      	str	r4, [r7, #88]	; 0x58
 80022c2:	eb41 0303 	adc.w	r3, r1, r3
 80022c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80022cc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80022d0:	4621      	mov	r1, r4
 80022d2:	1889      	adds	r1, r1, r2
 80022d4:	6539      	str	r1, [r7, #80]	; 0x50
 80022d6:	4629      	mov	r1, r5
 80022d8:	eb43 0101 	adc.w	r1, r3, r1
 80022dc:	6579      	str	r1, [r7, #84]	; 0x54
 80022de:	f04f 0000 	mov.w	r0, #0
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80022ea:	4623      	mov	r3, r4
 80022ec:	0a18      	lsrs	r0, r3, #8
 80022ee:	462a      	mov	r2, r5
 80022f0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80022f4:	462b      	mov	r3, r5
 80022f6:	1219      	asrs	r1, r3, #8
 80022f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80022fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002300:	b21b      	sxth	r3, r3
 8002302:	17da      	asrs	r2, r3, #31
 8002304:	64bb      	str	r3, [r7, #72]	; 0x48
 8002306:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8002314:	464c      	mov	r4, r9
 8002316:	0123      	lsls	r3, r4, #4
 8002318:	46c4      	mov	ip, r8
 800231a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 800231e:	4644      	mov	r4, r8
 8002320:	0122      	lsls	r2, r4, #4
 8002322:	1884      	adds	r4, r0, r2
 8002324:	603c      	str	r4, [r7, #0]
 8002326:	eb41 0303 	adc.w	r3, r1, r3
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002330:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8002334:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002338:	4618      	mov	r0, r3
 800233a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800233e:	46bd      	mov	sp, r7
 8002340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002344 <bmp280_read_fixed>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	int32_t adc_temp;
	uint8_t data[8];


	// Need to read in one sequence to ensure they match.
	size_t size = temperature ? 8 : 6;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <bmp280_read_fixed+0x16>
 8002356:	2308      	movs	r3, #8
 8002358:	e000      	b.n	800235c <bmp280_read_fixed+0x18>
 800235a:	2306      	movs	r3, #6
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(dev, 0xf7, data, size)) {
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f107 0214 	add.w	r2, r7, #20
 8002366:	21f7      	movs	r1, #247	; 0xf7
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7ff fba9 	bl	8001ac0 <read_data>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <bmp280_read_fixed+0x34>
		return false;
 8002374:	2300      	movs	r3, #0
 8002376:	e027      	b.n	80023c8 <bmp280_read_fixed+0x84>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002378:	7d3b      	ldrb	r3, [r7, #20]
 800237a:	031a      	lsls	r2, r3, #12
 800237c:	7d7b      	ldrb	r3, [r7, #21]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4313      	orrs	r3, r2
 8002382:	7dba      	ldrb	r2, [r7, #22]
 8002384:	0912      	lsrs	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	4313      	orrs	r3, r2
 800238a:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	031a      	lsls	r2, r3, #12
 8002390:	7e3b      	ldrb	r3, [r7, #24]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4313      	orrs	r3, r2
 8002396:	7e7a      	ldrb	r2, [r7, #25]
 8002398:	0912      	lsrs	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4313      	orrs	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	461a      	mov	r2, r3
 80023a6:	69f9      	ldr	r1, [r7, #28]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fcd9 	bl	8001d60 <compensate_temperature>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	461a      	mov	r2, r3
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff fd08 	bl	8001dd0 <compensate_pressure>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]

	return true;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure)) {
 80023dc:	f107 0210 	add.w	r2, r7, #16
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7ff ffac 	bl	8002344 <bmp280_read_fixed>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01c      	beq.n	800242c <bmp280_read_float+0x5c>
		*temperature = (float) fixed_temperature / 100;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fc19 	bl	8000c2c <__aeabi_i2f>
 80023fa:	4603      	mov	r3, r0
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <bmp280_read_float+0x68>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fd1c 	bl	8000e3c <__aeabi_fdiv>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fc08 	bl	8000c24 <__aeabi_ui2f>
 8002414:	4603      	mov	r3, r0
 8002416:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fd0e 	bl	8000e3c <__aeabi_fdiv>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
		return true;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <bmp280_read_float+0x5e>
	}

	return false;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	42c80000 	.word	0x42c80000

0800243c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <MX_FREERTOS_Init+0x18>)
 8002442:	2100      	movs	r1, #0
 8002444:	4804      	ldr	r0, [pc, #16]	; (8002458 <MX_FREERTOS_Init+0x1c>)
 8002446:	f004 fb47 	bl	8006ad8 <osThreadNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a03      	ldr	r2, [pc, #12]	; (800245c <MX_FREERTOS_Init+0x20>)
 800244e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	0800c998 	.word	0x0800c998
 8002458:	08002461 	.word	0x08002461
 800245c:	20000210 	.word	0x20000210

08002460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002468:	2001      	movs	r0, #1
 800246a:	f004 fbdf 	bl	8006c2c <osDelay>
 800246e:	e7fb      	b.n	8002468 <StartDefaultTask+0x8>

08002470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <MX_GPIO_Init+0x110>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <MX_GPIO_Init+0x110>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <MX_GPIO_Init+0x110>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249e:	4b38      	ldr	r3, [pc, #224]	; (8002580 <MX_GPIO_Init+0x110>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a37      	ldr	r2, [pc, #220]	; (8002580 <MX_GPIO_Init+0x110>)
 80024a4:	f043 0320 	orr.w	r3, r3, #32
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <MX_GPIO_Init+0x110>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <MX_GPIO_Init+0x110>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a31      	ldr	r2, [pc, #196]	; (8002580 <MX_GPIO_Init+0x110>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <MX_GPIO_Init+0x110>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <MX_GPIO_Init+0x110>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <MX_GPIO_Init+0x110>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <MX_GPIO_Init+0x110>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	4826      	ldr	r0, [pc, #152]	; (8002584 <MX_GPIO_Init+0x114>)
 80024ec:	f001 f976 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024f6:	4824      	ldr	r0, [pc, #144]	; (8002588 <MX_GPIO_Init+0x118>)
 80024f8:	f001 f970 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	4822      	ldr	r0, [pc, #136]	; (800258c <MX_GPIO_Init+0x11c>)
 8002502:	f001 f96b 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800250c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	4819      	ldr	r0, [pc, #100]	; (8002584 <MX_GPIO_Init+0x114>)
 800251e:	f000 ffcd 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4812      	ldr	r0, [pc, #72]	; (8002584 <MX_GPIO_Init+0x114>)
 800253a:	f000 ffbf 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_GPIO_Init+0x118>)
 8002558:	f000 ffb0 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_GPIO_Init+0x11c>)
 8002574:	f000 ffa2 	bl	80034bc <HAL_GPIO_Init>

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	40020800 	.word	0x40020800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400

08002590 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <MX_I2C1_Init+0x50>)
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <MX_I2C1_Init+0x54>)
 8002598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_I2C1_Init+0x50>)
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <MX_I2C1_Init+0x58>)
 800259e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_I2C1_Init+0x50>)
 80025ce:	f001 f91d 	bl	800380c <HAL_I2C_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025d8:	f000 fa8d 	bl	8002af6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000214 	.word	0x20000214
 80025e4:	40005400 	.word	0x40005400
 80025e8:	000186a0 	.word	0x000186a0

080025ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_I2C_MspInit+0x7c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d128      	bne.n	8002660 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_I2C_MspInit+0x80>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <HAL_I2C_MspInit+0x80>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_I2C_MspInit+0x80>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002638:	2304      	movs	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	480b      	ldr	r0, [pc, #44]	; (8002670 <HAL_I2C_MspInit+0x84>)
 8002644:	f000 ff3a 	bl	80034bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_I2C_MspInit+0x80>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_I2C_MspInit+0x80>)
 800264e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002652:	6253      	str	r3, [r2, #36]	; 0x24
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_I2C_MspInit+0x80>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002660:	bf00      	nop
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40005400 	.word	0x40005400
 800266c:	40023800 	.word	0x40023800
 8002670:	40020400 	.word	0x40020400

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267a:	f000 fe0a 	bl	8003292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267e:	f000 f865 	bl	800274c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002682:	f7ff fef5 	bl	8002470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002686:	f000 fd15 	bl	80030b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800268a:	f7ff ff81 	bl	8002590 <MX_I2C1_Init>
  MX_SPI1_Init();
 800268e:	f000 fb01 	bl	8002c94 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002692:	f000 fd39 	bl	8003108 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
    ST7735_Init();
 8002696:	f7fe fe79 	bl	800138c <ST7735_Init>
    bmp280_init_default_params(&bmp280.params);
 800269a:	4820      	ldr	r0, [pc, #128]	; (800271c <main+0xa8>)
 800269c:	f7ff f9c6 	bl	8001a2c <bmp280_init_default_params>
    bmp280.addr = BMP280_I2C_ADDRESS_1;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <main+0xac>)
 80026a2:	2277      	movs	r2, #119	; 0x77
 80026a4:	849a      	strh	r2, [r3, #36]	; 0x24
    bmp280.i2c = &hi2c1;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <main+0xac>)
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <main+0xb0>)
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
    bmp280_init(&bmp280, &bmp280.params);
 80026ac:	491b      	ldr	r1, [pc, #108]	; (800271c <main+0xa8>)
 80026ae:	481c      	ldr	r0, [pc, #112]	; (8002720 <main+0xac>)
 80026b0:	f7ff fad5 	bl	8001c5e <bmp280_init>
    xPrintQueue_temp = xQueueCreate(50, sizeof(float));
 80026b4:	2200      	movs	r2, #0
 80026b6:	2104      	movs	r1, #4
 80026b8:	2032      	movs	r0, #50	; 0x32
 80026ba:	f004 fca6 	bl	800700a <xQueueGenericCreate>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <main+0xb4>)
 80026c2:	6013      	str	r3, [r2, #0]
    xPrintQueue_press = xQueueCreate(50, sizeof(float));
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	2032      	movs	r0, #50	; 0x32
 80026ca:	f004 fc9e 	bl	800700a <xQueueGenericCreate>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <main+0xb8>)
 80026d2:	6013      	str	r3, [r2, #0]
    xPrintQueue_hum = xQueueCreate(50, sizeof(float));
 80026d4:	2200      	movs	r2, #0
 80026d6:	2104      	movs	r1, #4
 80026d8:	2032      	movs	r0, #50	; 0x32
 80026da:	f004 fc96 	bl	800700a <xQueueGenericCreate>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <main+0xbc>)
 80026e2:	6013      	str	r3, [r2, #0]

    xTaskCreate(vReadTemperature_pressure_humidity_ValuesTask,
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <main+0xc0>)
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2301      	movs	r3, #1
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	2264      	movs	r2, #100	; 0x64
 80026f0:	4911      	ldr	r1, [pc, #68]	; (8002738 <main+0xc4>)
 80026f2:	4812      	ldr	r0, [pc, #72]	; (800273c <main+0xc8>)
 80026f4:	f005 f928 	bl	8007948 <xTaskCreate>
      		  	  100,
      			  NULL,
      			  1,
      			  &xTempReadHandle);

    xTaskCreate(vPrintTemperatureValueTask,
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <main+0xcc>)
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2301      	movs	r3, #1
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002706:	490f      	ldr	r1, [pc, #60]	; (8002744 <main+0xd0>)
 8002708:	480f      	ldr	r0, [pc, #60]	; (8002748 <main+0xd4>)
 800270a:	f005 f91d 	bl	8007948 <xTaskCreate>
       			  1,
       			  &xTempPrintHandle);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800270e:	f004 f97d 	bl	8006a0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002712:	f7ff fe93 	bl	800243c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002716:	f004 f9ab 	bl	8006a70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800271a:	e7fe      	b.n	800271a <main+0xa6>
 800271c:	20000294 	.word	0x20000294
 8002720:	20000268 	.word	0x20000268
 8002724:	20000214 	.word	0x20000214
 8002728:	200002b0 	.word	0x200002b0
 800272c:	200002b4 	.word	0x200002b4
 8002730:	200002b8 	.word	0x200002b8
 8002734:	200002bc 	.word	0x200002bc
 8002738:	0800c39c 	.word	0x0800c39c
 800273c:	080027e9 	.word	0x080027e9
 8002740:	200002c0 	.word	0x200002c0
 8002744:	0800c3b0 	.word	0x0800c3b0
 8002748:	080028c9 	.word	0x080028c9

0800274c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b092      	sub	sp, #72	; 0x48
 8002750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	2234      	movs	r2, #52	; 0x34
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f006 ffc7 	bl	80096ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <SystemClock_Config+0x98>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <SystemClock_Config+0x98>)
 8002778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800277c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277e:	2302      	movs	r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002782:	2301      	movs	r3, #1
 8002784:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002786:	2310      	movs	r3, #16
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278a:	2302      	movs	r3, #2
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800278e:	2300      	movs	r3, #0
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002792:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002796:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002798:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800279c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fc64 	bl	8005070 <HAL_RCC_OscConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027ae:	f000 f9a2 	bl	8002af6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b2:	230f      	movs	r3, #15
 80027b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b6:	2303      	movs	r3, #3
 80027b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027c6:	463b      	mov	r3, r7
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 ff80 	bl	80056d0 <HAL_RCC_ClockConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027d6:	f000 f98e 	bl	8002af6 <Error_Handler>
  }
}
 80027da:	bf00      	nop
 80027dc:	3748      	adds	r7, #72	; 0x48
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40007000 	.word	0x40007000

080027e8 <vReadTemperature_pressure_humidity_ValuesTask>:

/* USER CODE BEGIN 4 */
void vReadTemperature_pressure_humidity_ValuesTask(void * pvParameters){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b090      	sub	sp, #64	; 0x40
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

	uint8_t Data[40];
	uint16_t size;
	//float temperature=0,pressure=0,humidity=0;
	while(1){
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 80027f0:	e019      	b.n	8002826 <vReadTemperature_pressure_humidity_ValuesTask+0x3e>
			size = sprintf((char *)Data,"Temperature/pressure reading failed\n\r");
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	4927      	ldr	r1, [pc, #156]	; (8002894 <vReadTemperature_pressure_humidity_ValuesTask+0xac>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f007 fcef 	bl	800a1dc <siprintf>
 80027fe:	4603      	mov	r3, r0
 8002800:	86fb      	strh	r3, [r7, #54]	; 0x36
			 HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002802:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002804:	f107 010c 	add.w	r1, r7, #12
 8002808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280c:	4822      	ldr	r0, [pc, #136]	; (8002898 <vReadTemperature_pressure_humidity_ValuesTask+0xb0>)
 800280e:	f003 ff3c 	bl	800668a <HAL_UART_Transmit>
			 for(int i=0;i<100000;i++);
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002816:	e002      	b.n	800281e <vReadTemperature_pressure_humidity_ValuesTask+0x36>
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	3301      	adds	r3, #1
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <vReadTemperature_pressure_humidity_ValuesTask+0xb4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	ddf8      	ble.n	8002818 <vReadTemperature_pressure_humidity_ValuesTask+0x30>
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <vReadTemperature_pressure_humidity_ValuesTask+0xb8>)
 8002828:	491e      	ldr	r1, [pc, #120]	; (80028a4 <vReadTemperature_pressure_humidity_ValuesTask+0xbc>)
 800282a:	481f      	ldr	r0, [pc, #124]	; (80028a8 <vReadTemperature_pressure_humidity_ValuesTask+0xc0>)
 800282c:	f7ff fdd0 	bl	80023d0 <bmp280_read_float>
 8002830:	4603      	mov	r3, r0
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1da      	bne.n	80027f2 <vReadTemperature_pressure_humidity_ValuesTask+0xa>
			 }
    xQueueSend(xPrintQueue_press, &pressure, 0);
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <vReadTemperature_pressure_humidity_ValuesTask+0xc4>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	2200      	movs	r2, #0
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <vReadTemperature_pressure_humidity_ValuesTask+0xb8>)
 8002846:	f004 fc41 	bl	80070cc <xQueueGenericSend>
	xQueueSend(xPrintQueue_temp, &temperature, 0);
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <vReadTemperature_pressure_humidity_ValuesTask+0xc8>)
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	2200      	movs	r2, #0
 8002852:	4914      	ldr	r1, [pc, #80]	; (80028a4 <vReadTemperature_pressure_humidity_ValuesTask+0xbc>)
 8002854:	f004 fc3a 	bl	80070cc <xQueueGenericSend>
    humidity = humidity_read_value (&hi2c1,&huart2);
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <vReadTemperature_pressure_humidity_ValuesTask+0xb0>)
 800285a:	4816      	ldr	r0, [pc, #88]	; (80028b4 <vReadTemperature_pressure_humidity_ValuesTask+0xcc>)
 800285c:	f000 f950 	bl	8002b00 <humidity_read_value>
 8002860:	4603      	mov	r3, r0
 8002862:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <vReadTemperature_pressure_humidity_ValuesTask+0xd0>)
 8002864:	6013      	str	r3, [r2, #0]
    xQueueSend(xPrintQueue_hum, &humidity, 0);
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <vReadTemperature_pressure_humidity_ValuesTask+0xd4>)
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	2200      	movs	r2, #0
 800286e:	4912      	ldr	r1, [pc, #72]	; (80028b8 <vReadTemperature_pressure_humidity_ValuesTask+0xd0>)
 8002870:	f004 fc2c 	bl	80070cc <xQueueGenericSend>
	ReadTaskProfiler++;
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <vReadTemperature_pressure_humidity_ValuesTask+0xd8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <vReadTemperature_pressure_humidity_ValuesTask+0xd8>)
 800287c:	6013      	str	r3, [r2, #0]
	for(int i=0;i<1400000;i++);
 800287e:	2300      	movs	r3, #0
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
 8002882:	e002      	b.n	800288a <vReadTemperature_pressure_humidity_ValuesTask+0xa2>
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	3301      	adds	r3, #1
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
 800288a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <vReadTemperature_pressure_humidity_ValuesTask+0xdc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	dbf8      	blt.n	8002884 <vReadTemperature_pressure_humidity_ValuesTask+0x9c>
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 8002892:	e7c8      	b.n	8002826 <vReadTemperature_pressure_humidity_ValuesTask+0x3e>
 8002894:	0800c3c8 	.word	0x0800c3c8
 8002898:	20000360 	.word	0x20000360
 800289c:	0001869f 	.word	0x0001869f
 80028a0:	200002a0 	.word	0x200002a0
 80028a4:	2000029c 	.word	0x2000029c
 80028a8:	20000268 	.word	0x20000268
 80028ac:	200002b4 	.word	0x200002b4
 80028b0:	200002b0 	.word	0x200002b0
 80028b4:	20000214 	.word	0x20000214
 80028b8:	200002a4 	.word	0x200002a4
 80028bc:	200002b8 	.word	0x200002b8
 80028c0:	200002a8 	.word	0x200002a8
 80028c4:	00155cc0 	.word	0x00155cc0

080028c8 <vPrintTemperatureValueTask>:
	}
}


void vPrintTemperatureValueTask(void * pvParameters){
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0a2      	sub	sp, #136	; 0x88
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	 char Data_pres[30];
	 char Data_hum[30];
	 uint8_t buf[15];
	 int size;
	while(1){
		if ((xQueueReceive(xPrintQueue_temp,&temperature,portMAX_DELAY) == pdPASS)&&(xQueueReceive(xPrintQueue_press,&pressure,portMAX_DELAY))&&(xQueueReceive(xPrintQueue_hum,&humidity,portMAX_DELAY) == pdPASS)){
 80028d0:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <vPrintTemperatureValueTask+0x1c8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	496e      	ldr	r1, [pc, #440]	; (8002a94 <vPrintTemperatureValueTask+0x1cc>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fd8c 	bl	80073f8 <xQueueReceive>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80be 	bne.w	8002a64 <vPrintTemperatureValueTask+0x19c>
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <vPrintTemperatureValueTask+0x1d0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	496a      	ldr	r1, [pc, #424]	; (8002a9c <vPrintTemperatureValueTask+0x1d4>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fd80 	bl	80073f8 <xQueueReceive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80b2 	beq.w	8002a64 <vPrintTemperatureValueTask+0x19c>
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <vPrintTemperatureValueTask+0x1d8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <vPrintTemperatureValueTask+0x1dc>)
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fd74 	bl	80073f8 <xQueueReceive>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 80a6 	bne.w	8002a64 <vPrintTemperatureValueTask+0x19c>
			sprintf(Data_temp,"Temp:%.1f C",temperature);
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <vPrintTemperatureValueTask+0x1cc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fd9b 	bl	8000458 <__aeabi_f2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800292a:	495f      	ldr	r1, [pc, #380]	; (8002aa8 <vPrintTemperatureValueTask+0x1e0>)
 800292c:	f007 fc56 	bl	800a1dc <siprintf>
			sprintf(Data_pres,"Press:%.1f Kpa",pressure/1000);
 8002930:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <vPrintTemperatureValueTask+0x1d4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	495d      	ldr	r1, [pc, #372]	; (8002aac <vPrintTemperatureValueTask+0x1e4>)
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fa80 	bl	8000e3c <__aeabi_fdiv>
 800293c:	4603      	mov	r3, r0
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fd8a 	bl	8000458 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800294c:	4958      	ldr	r1, [pc, #352]	; (8002ab0 <vPrintTemperatureValueTask+0x1e8>)
 800294e:	f007 fc45 	bl	800a1dc <siprintf>
			sprintf(Data_hum,"Humidity: %.1f %",humidity);
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <vPrintTemperatureValueTask+0x1dc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fd7e 	bl	8000458 <__aeabi_f2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	f107 0018 	add.w	r0, r7, #24
 8002964:	4953      	ldr	r1, [pc, #332]	; (8002ab4 <vPrintTemperatureValueTask+0x1ec>)
 8002966:	f007 fc39 	bl	800a1dc <siprintf>
			ST7735_DrawString(1,4,Data_temp,ORANGE);
 800296a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <vPrintTemperatureValueTask+0x1f0>)
 8002970:	2104      	movs	r1, #4
 8002972:	2001      	movs	r0, #1
 8002974:	f7fe ffec 	bl	8001950 <ST7735_DrawString>
			ST7735_DrawString(1,6,Data_pres,ORANGE);
 8002978:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <vPrintTemperatureValueTask+0x1f0>)
 800297e:	2106      	movs	r1, #6
 8002980:	2001      	movs	r0, #1
 8002982:	f7fe ffe5 	bl	8001950 <ST7735_DrawString>
			ST7735_DrawString(1,8,Data_hum,ORANGE);
 8002986:	f107 0218 	add.w	r2, r7, #24
 800298a:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <vPrintTemperatureValueTask+0x1f0>)
 800298c:	2108      	movs	r1, #8
 800298e:	2001      	movs	r0, #1
 8002990:	f7fe ffde 	bl	8001950 <ST7735_DrawString>
			sprintf(Data_temp,"Temp:%.1f C \n\r",temperature);
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <vPrintTemperatureValueTask+0x1cc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fd5d 	bl	8000458 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80029a6:	4945      	ldr	r1, [pc, #276]	; (8002abc <vPrintTemperatureValueTask+0x1f4>)
 80029a8:	f007 fc18 	bl	800a1dc <siprintf>
			sprintf(Data_pres,"Press:%.1f Kpa \n\r",pressure/1000);
 80029ac:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <vPrintTemperatureValueTask+0x1d4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	493e      	ldr	r1, [pc, #248]	; (8002aac <vPrintTemperatureValueTask+0x1e4>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fa42 	bl	8000e3c <__aeabi_fdiv>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd4c 	bl	8000458 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80029c8:	493d      	ldr	r1, [pc, #244]	; (8002ac0 <vPrintTemperatureValueTask+0x1f8>)
 80029ca:	f007 fc07 	bl	800a1dc <siprintf>
			sprintf(Data_hum,"Humidity: %.1f % \n\r",humidity);
 80029ce:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <vPrintTemperatureValueTask+0x1dc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd40 	bl	8000458 <__aeabi_f2d>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	f107 0018 	add.w	r0, r7, #24
 80029e0:	4938      	ldr	r1, [pc, #224]	; (8002ac4 <vPrintTemperatureValueTask+0x1fc>)
 80029e2:	f007 fbfb 	bl	800a1dc <siprintf>
			HAL_UART_Transmit(&huart3,(char*)Data_temp, sizeof(Data_temp),100);
 80029e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80029ea:	2364      	movs	r3, #100	; 0x64
 80029ec:	221e      	movs	r2, #30
 80029ee:	4836      	ldr	r0, [pc, #216]	; (8002ac8 <vPrintTemperatureValueTask+0x200>)
 80029f0:	f003 fe4b 	bl	800668a <HAL_UART_Transmit>
			for(int i=0;i<10000;i++);
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029fa:	e004      	b.n	8002a06 <vPrintTemperatureValueTask+0x13e>
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a00:	3301      	adds	r3, #1
 8002a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	ddf4      	ble.n	80029fc <vPrintTemperatureValueTask+0x134>
			HAL_UART_Transmit(&huart3,(char*)Data_pres, sizeof(Data_pres),100);
 8002a12:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002a16:	2364      	movs	r3, #100	; 0x64
 8002a18:	221e      	movs	r2, #30
 8002a1a:	482b      	ldr	r0, [pc, #172]	; (8002ac8 <vPrintTemperatureValueTask+0x200>)
 8002a1c:	f003 fe35 	bl	800668a <HAL_UART_Transmit>
			for(int i=0;i<10000;i++);
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a26:	e004      	b.n	8002a32 <vPrintTemperatureValueTask+0x16a>
 8002a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a36:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	ddf4      	ble.n	8002a28 <vPrintTemperatureValueTask+0x160>
			HAL_UART_Transmit(&huart3,(char*)Data_hum, sizeof(Data_hum),100);
 8002a3e:	f107 0118 	add.w	r1, r7, #24
 8002a42:	2364      	movs	r3, #100	; 0x64
 8002a44:	221e      	movs	r2, #30
 8002a46:	4820      	ldr	r0, [pc, #128]	; (8002ac8 <vPrintTemperatureValueTask+0x200>)
 8002a48:	f003 fe1f 	bl	800668a <HAL_UART_Transmit>
			for(int i=0;i<10000;i++);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a50:	e002      	b.n	8002a58 <vPrintTemperatureValueTask+0x190>
 8002a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a54:	3301      	adds	r3, #1
 8002a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	ddf7      	ble.n	8002a52 <vPrintTemperatureValueTask+0x18a>
 8002a62:	e00f      	b.n	8002a84 <vPrintTemperatureValueTask+0x1bc>
		}
		else {
			size= sprintf( (char*)buf, "error2 \n\r");
 8002a64:	f107 0308 	add.w	r3, r7, #8
 8002a68:	4918      	ldr	r1, [pc, #96]	; (8002acc <vPrintTemperatureValueTask+0x204>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f007 fbb6 	bl	800a1dc <siprintf>
 8002a70:	67b8      	str	r0, [r7, #120]	; 0x78
			HAL_UART_Transmit(&huart2, buf, size, 1000);
 8002a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	f107 0108 	add.w	r1, r7, #8
 8002a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7e:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <vPrintTemperatureValueTask+0x208>)
 8002a80:	f003 fe03 	bl	800668a <HAL_UART_Transmit>

		}
		PrintTaskProfiler++;
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <vPrintTemperatureValueTask+0x20c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <vPrintTemperatureValueTask+0x20c>)
 8002a8c:	6013      	str	r3, [r2, #0]
		if ((xQueueReceive(xPrintQueue_temp,&temperature,portMAX_DELAY) == pdPASS)&&(xQueueReceive(xPrintQueue_press,&pressure,portMAX_DELAY))&&(xQueueReceive(xPrintQueue_hum,&humidity,portMAX_DELAY) == pdPASS)){
 8002a8e:	e71f      	b.n	80028d0 <vPrintTemperatureValueTask+0x8>
 8002a90:	200002b0 	.word	0x200002b0
 8002a94:	2000029c 	.word	0x2000029c
 8002a98:	200002b4 	.word	0x200002b4
 8002a9c:	200002a0 	.word	0x200002a0
 8002aa0:	200002b8 	.word	0x200002b8
 8002aa4:	200002a4 	.word	0x200002a4
 8002aa8:	0800c3f0 	.word	0x0800c3f0
 8002aac:	447a0000 	.word	0x447a0000
 8002ab0:	0800c3fc 	.word	0x0800c3fc
 8002ab4:	0800c40c 	.word	0x0800c40c
 8002ab8:	fffffd60 	.word	0xfffffd60
 8002abc:	0800c420 	.word	0x0800c420
 8002ac0:	0800c430 	.word	0x0800c430
 8002ac4:	0800c444 	.word	0x0800c444
 8002ac8:	200003a4 	.word	0x200003a4
 8002acc:	0800c458 	.word	0x0800c458
 8002ad0:	20000360 	.word	0x20000360
 8002ad4:	200002ac 	.word	0x200002ac

08002ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aea:	f000 fbeb 	bl	80032c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002afa:	b672      	cpsid	i
}
 8002afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002afe:	e7fe      	b.n	8002afe <Error_Handler+0x8>

08002b00 <humidity_read_value>:
#include "sht31.h"




float humidity_read_value (I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef *huart2){
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b091      	sub	sp, #68	; 0x44
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
		uint8_t buf[20];
		volatile uint16_t value;
		volatile float temp;
		float Decimal_part;
		float Entier_part;
	    buf[0] = CAPTEUR_CMD_MSB;
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <humidity_read_value+0x168>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	753b      	strb	r3, [r7, #20]
	    		buf[1] = CAPTEUR_CMD_LSB;
 8002b10:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <humidity_read_value+0x16c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	757b      	strb	r3, [r7, #21]
	    		ret = HAL_I2C_Master_Transmit( hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);
 8002b16:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <humidity_read_value+0x170>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b299      	uxth	r1, r3
 8002b1c:	f107 0214 	add.w	r2, r7, #20
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2302      	movs	r3, #2
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 ffb3 	bl	8003a94 <HAL_I2C_Master_Transmit>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	    		if ( ret != HAL_OK)
 8002b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <humidity_read_value+0x5e>
	    		{
	    			strcpy((char*)buf, "erreur_T!!\r\n");
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <humidity_read_value+0x174>)
 8002b42:	461c      	mov	r4, r3
 8002b44:	4613      	mov	r3, r2
 8002b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b48:	c407      	stmia	r4!, {r0, r1, r2}
 8002b4a:	7023      	strb	r3, [r4, #0]
	    			HAL_UART_Transmit(huart2, buf, sizeof(buf), 1000);
 8002b4c:	f107 0114 	add.w	r1, r7, #20
 8002b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b54:	2214      	movs	r2, #20
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f003 fd97 	bl	800668a <HAL_UART_Transmit>
 8002b5c:	e07e      	b.n	8002c5c <humidity_read_value+0x15c>
	    			else
	    		{



	    		ret = HAL_I2C_Master_Receive(hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);
 8002b5e:	4b44      	ldr	r3, [pc, #272]	; (8002c70 <humidity_read_value+0x170>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b299      	uxth	r1, r3
 8002b64:	f107 0214 	add.w	r2, r7, #20
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2306      	movs	r3, #6
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f001 f88d 	bl	8003c90 <HAL_I2C_Master_Receive>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	    					if ( ret != HAL_OK)
 8002b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <humidity_read_value+0xa6>
	    				{
	    					strcpy((char*)buf, "erreur_R!!\r\n");
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <humidity_read_value+0x178>)
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b90:	c407      	stmia	r4!, {r0, r1, r2}
 8002b92:	7023      	strb	r3, [r4, #0]
	    					HAL_UART_Transmit(huart2, buf, sizeof(buf), 1000);
 8002b94:	f107 0114 	add.w	r1, r7, #20
 8002b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9c:	2214      	movs	r2, #20
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f003 fd73 	bl	800668a <HAL_UART_Transmit>
 8002ba4:	e05a      	b.n	8002c5c <humidity_read_value+0x15c>
	    				}
	    		else
	    		{

	    			value  =   buf[1] | buf[0] << 8;
 8002ba6:	7d7b      	ldrb	r3, [r7, #21]
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	7d3b      	ldrb	r3, [r7, #20]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	827b      	strh	r3, [r7, #18]


	    			temp = -45 + 175 * ( (float)value / 65535);
 8002bb8:	8a7b      	ldrh	r3, [r7, #18]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f831 	bl	8000c24 <__aeabi_ui2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	492d      	ldr	r1, [pc, #180]	; (8002c7c <humidity_read_value+0x17c>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f938 	bl	8000e3c <__aeabi_fdiv>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	492c      	ldr	r1, [pc, #176]	; (8002c80 <humidity_read_value+0x180>)
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe f87f 	bl	8000cd4 <__aeabi_fmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	492a      	ldr	r1, [pc, #168]	; (8002c84 <humidity_read_value+0x184>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd ff70 	bl	8000ac0 <__aeabi_fsub>
 8002be0:	4603      	mov	r3, r0
 8002be2:	60fb      	str	r3, [r7, #12]

	    			Entier_part = (int) temp;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f9c4 	bl	8000f74 <__aeabi_f2iz>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f81c 	bl	8000c2c <__aeabi_i2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    			Decimal_part = temp;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	    			Decimal_part *= 100;
 8002bfc:	4922      	ldr	r1, [pc, #136]	; (8002c88 <humidity_read_value+0x188>)
 8002bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c00:	f7fe f868 	bl	8000cd4 <__aeabi_fmul>
 8002c04:	4603      	mov	r3, r0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
	    			Decimal_part = Decimal_part - (Entier_part * 100);
 8002c08:	491f      	ldr	r1, [pc, #124]	; (8002c88 <humidity_read_value+0x188>)
 8002c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c0c:	f7fe f862 	bl	8000cd4 <__aeabi_fmul>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4619      	mov	r1, r3
 8002c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c16:	f7fd ff53 	bl	8000ac0 <__aeabi_fsub>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	    			value = buf[4] | buf[3] << 8;
 8002c1e:	7e3b      	ldrb	r3, [r7, #24]
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	827b      	strh	r3, [r7, #18]

	    			umid = -49 + 315 *( (float)value / 65535);
 8002c30:	8a7b      	ldrh	r3, [r7, #18]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fff5 	bl	8000c24 <__aeabi_ui2f>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	490f      	ldr	r1, [pc, #60]	; (8002c7c <humidity_read_value+0x17c>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f8fc 	bl	8000e3c <__aeabi_fdiv>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4911      	ldr	r1, [pc, #68]	; (8002c8c <humidity_read_value+0x18c>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f843 	bl	8000cd4 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	490f      	ldr	r1, [pc, #60]	; (8002c90 <humidity_read_value+0x190>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd ff34 	bl	8000ac0 <__aeabi_fsub>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34

	    		}
	    		}
	    return umid;
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	373c      	adds	r7, #60	; 0x3c
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	0800c9bc 	.word	0x0800c9bc
 8002c6c:	0800c9bd 	.word	0x0800c9bd
 8002c70:	0800c9be 	.word	0x0800c9be
 8002c74:	0800c464 	.word	0x0800c464
 8002c78:	0800c474 	.word	0x0800c474
 8002c7c:	477fff00 	.word	0x477fff00
 8002c80:	432f0000 	.word	0x432f0000
 8002c84:	42340000 	.word	0x42340000
 8002c88:	42c80000 	.word	0x42c80000
 8002c8c:	439d8000 	.word	0x439d8000
 8002c90:	42440000 	.word	0x42440000

08002c94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002c9a:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <MX_SPI1_Init+0x6c>)
 8002c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002ca8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002ce2:	220a      	movs	r2, #10
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002ce8:	f002 ffe8 	bl	8005cbc <HAL_SPI_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002cf2:	f7ff ff00 	bl	8002af6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200002c4 	.word	0x200002c4
 8002d00:	40013000 	.word	0x40013000

08002d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_SPI_MspInit+0x7c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d127      	bne.n	8002d76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	61d3      	str	r3, [r2, #28]
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_SPI_MspInit+0x80>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d56:	23a0      	movs	r3, #160	; 0xa0
 8002d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d66:	2305      	movs	r3, #5
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_SPI_MspInit+0x84>)
 8002d72:	f000 fba3 	bl	80034bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40013000 	.word	0x40013000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_MspInit+0x64>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <HAL_MspInit+0x64>)
 8002d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d9c:	6253      	str	r3, [r2, #36]	; 0x24
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_MspInit+0x64>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_MspInit+0x64>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_MspInit+0x64>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_MspInit+0x64>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_MspInit+0x64>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_MspInit+0x64>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6253      	str	r3, [r2, #36]	; 0x24
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_MspInit+0x64>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	210f      	movs	r1, #15
 8002dde:	f06f 0001 	mvn.w	r0, #1
 8002de2:	f000 fb40 	bl	8003466 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08e      	sub	sp, #56	; 0x38
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_InitTick+0xe4>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	4a32      	ldr	r2, [pc, #200]	; (8002ed8 <HAL_InitTick+0xe4>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6253      	str	r3, [r2, #36]	; 0x24
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_InitTick+0xe4>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e22:	f107 0210 	add.w	r2, r7, #16
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 feb5 	bl	8005b9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f002 fe86 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8002e40:	6378      	str	r0, [r7, #52]	; 0x34
 8002e42:	e004      	b.n	8002e4e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e44:	f002 fe82 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <HAL_InitTick+0xe8>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8002e7e:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e80:	f003 f9ac 	bl	80061dc <HAL_TIM_Base_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002e8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11b      	bne.n	8002eca <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002e92:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <HAL_InitTick+0xec>)
 8002e94:	f003 f9ea 	bl	800626c <HAL_TIM_Base_Start_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d111      	bne.n	8002eca <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ea6:	201c      	movs	r0, #28
 8002ea8:	f000 faf9 	bl	800349e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	d808      	bhi.n	8002ec4 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f000 fad5 	bl	8003466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_InitTick+0xf0>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e002      	b.n	8002eca <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002eca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3738      	adds	r7, #56	; 0x38
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	431bde83 	.word	0x431bde83
 8002ee0:	2000031c 	.word	0x2000031c
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <NMI_Handler+0x4>

08002eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <BusFault_Handler+0x4>

08002f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <UsageFault_Handler+0x4>

08002f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <TIM2_IRQHandler+0x10>)
 8002f1a:	f003 f9f9 	bl	8006310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000031c 	.word	0x2000031c

08002f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <_kill>:

int _kill(int pid, int sig)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f40:	f006 faa4 	bl	800948c <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2216      	movs	r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
  return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_exit>:

void _exit (int status)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffe7 	bl	8002f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f68:	e7fe      	b.n	8002f68 <_exit+0x12>

08002f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e00a      	b.n	8002f92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f7c:	f3af 8000 	nop.w
 8002f80:	4601      	mov	r1, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	60ba      	str	r2, [r7, #8]
 8002f88:	b2ca      	uxtb	r2, r1
 8002f8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	dbf0      	blt.n	8002f7c <_read+0x12>
  }

  return len;
 8002f9a:	687b      	ldr	r3, [r7, #4]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e009      	b.n	8002fca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	60ba      	str	r2, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dbf1      	blt.n	8002fb6 <_write+0x12>
  }
  return len;
 8002fd2:	687b      	ldr	r3, [r7, #4]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <_close>:

int _close(int file)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003002:	605a      	str	r2, [r3, #4]
  return 0;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <_isatty>:

int _isatty(int file)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003018:	2301      	movs	r3, #1
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <_sbrk+0x5c>)
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <_sbrk+0x60>)
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <_sbrk+0x64>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <_sbrk+0x64>)
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <_sbrk+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <_sbrk+0x64>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d207      	bcs.n	800307c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800306c:	f006 fa0e 	bl	800948c <__errno>
 8003070:	4603      	mov	r3, r0
 8003072:	220c      	movs	r2, #12
 8003074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	e009      	b.n	8003090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <_sbrk+0x64>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <_sbrk+0x64>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <_sbrk+0x64>)
 800308c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800308e:	68fb      	ldr	r3, [r7, #12]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20014000 	.word	0x20014000
 800309c:	00000400 	.word	0x00000400
 80030a0:	2000035c 	.word	0x2000035c
 80030a4:	20001e08 	.word	0x20001e08

080030a8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <MX_USART2_UART_Init+0x50>)
 80030bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030da:	220c      	movs	r2, #12
 80030dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <MX_USART2_UART_Init+0x4c>)
 80030ec:	f003 fa80 	bl	80065f0 <HAL_UART_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030f6:	f7ff fcfe 	bl	8002af6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000360 	.word	0x20000360
 8003104:	40004400 	.word	0x40004400

08003108 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <MX_USART3_UART_Init+0x50>)
 8003110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 8003114:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART3_UART_Init+0x4c>)
 8003140:	f003 fa56 	bl	80065f0 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800314a:	f7ff fcd4 	bl	8002af6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003a4 	.word	0x200003a4
 8003158:	40004800 	.word	0x40004800

0800315c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <HAL_UART_MspInit+0xd8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d128      	bne.n	80031d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	6253      	str	r3, [r2, #36]	; 0x24
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_UART_MspInit+0xdc>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_UART_MspInit+0xdc>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031ae:	230c      	movs	r3, #12
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ba:	2303      	movs	r3, #3
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031be:	2307      	movs	r3, #7
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	481c      	ldr	r0, [pc, #112]	; (800323c <HAL_UART_MspInit+0xe0>)
 80031ca:	f000 f977 	bl	80034bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031ce:	e02d      	b.n	800322c <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <HAL_UART_MspInit+0xe4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d128      	bne.n	800322c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	4a16      	ldr	r2, [pc, #88]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6253      	str	r3, [r2, #36]	; 0x24
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_UART_MspInit+0xdc>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	61d3      	str	r3, [r2, #28]
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_UART_MspInit+0xdc>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800320a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800321c:	2307      	movs	r3, #7
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	4807      	ldr	r0, [pc, #28]	; (8003244 <HAL_UART_MspInit+0xe8>)
 8003228:	f000 f948 	bl	80034bc <HAL_GPIO_Init>
}
 800322c:	bf00      	nop
 800322e:	3730      	adds	r7, #48	; 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40004400 	.word	0x40004400
 8003238:	40023800 	.word	0x40023800
 800323c:	40020000 	.word	0x40020000
 8003240:	40004800 	.word	0x40004800
 8003244:	40020400 	.word	0x40020400

08003248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800324a:	490d      	ldr	r1, [pc, #52]	; (8003280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003250:	e002      	b.n	8003258 <LoopCopyDataInit>

08003252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003256:	3304      	adds	r3, #4

08003258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800325c:	d3f9      	bcc.n	8003252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003260:	4c0a      	ldr	r4, [pc, #40]	; (800328c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003264:	e001      	b.n	800326a <LoopFillZerobss>

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003268:	3204      	adds	r2, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800326e:	f7ff ff1b 	bl	80030a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003272:	f006 fa07 	bl	8009684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003276:	f7ff f9fd 	bl	8002674 <main>
  bx lr
 800327a:	4770      	bx	lr
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003284:	0800cdcc 	.word	0x0800cdcc
  ldr r2, =_sbss
 8003288:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800328c:	20001e04 	.word	0x20001e04

08003290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC1_IRQHandler>

08003292 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 f8d7 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a2:	200f      	movs	r0, #15
 80032a4:	f7ff fda6 	bl	8002df4 <HAL_InitTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	e001      	b.n	80032b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b4:	f7ff fd6a 	bl	8002d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b8:	79fb      	ldrb	r3, [r7, #7]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_IncTick+0x1c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_IncTick+0x20>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <HAL_IncTick+0x1c>)
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	200003e8 	.word	0x200003e8
 80032e4:	20000010 	.word	0x20000010

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_GetTick+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	200003e8 	.word	0x200003e8

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4906      	ldr	r1, [pc, #24]	; (8003394 <__NVIC_EnableIRQ+0x34>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff4f 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff64 	bl	8003344 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ffb2 	bl	80033ec <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff81 	bl	8003398 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff57 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80034d2:	e160      	b.n	8003796 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2101      	movs	r1, #1
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8152 	beq.w	8003790 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d005      	beq.n	8003504 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003500:	2b02      	cmp	r3, #2
 8003502:	d130      	bne.n	8003566 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800353a:	2201      	movs	r2, #1
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 0201 	and.w	r2, r3, #1
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b03      	cmp	r3, #3
 8003570:	d017      	beq.n	80035a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d123      	bne.n	80035f6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	08da      	lsrs	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	6939      	ldr	r1, [r7, #16]
 80035f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80ac 	beq.w	8003790 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003638:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <HAL_GPIO_Init+0x2f8>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_GPIO_Init+0x2f8>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_GPIO_Init+0x2f8>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003650:	4a59      	ldr	r2, [pc, #356]	; (80037b8 <HAL_GPIO_Init+0x2fc>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	220f      	movs	r2, #15
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a51      	ldr	r2, [pc, #324]	; (80037bc <HAL_GPIO_Init+0x300>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d025      	beq.n	80036c8 <HAL_GPIO_Init+0x20c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a50      	ldr	r2, [pc, #320]	; (80037c0 <HAL_GPIO_Init+0x304>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01f      	beq.n	80036c4 <HAL_GPIO_Init+0x208>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_GPIO_Init+0x308>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d019      	beq.n	80036c0 <HAL_GPIO_Init+0x204>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_GPIO_Init+0x30c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_GPIO_Init+0x200>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_GPIO_Init+0x310>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00d      	beq.n	80036b8 <HAL_GPIO_Init+0x1fc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_GPIO_Init+0x314>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_Init+0x1f8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a4b      	ldr	r2, [pc, #300]	; (80037d4 <HAL_GPIO_Init+0x318>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_GPIO_Init+0x1f4>
 80036ac:	2306      	movs	r3, #6
 80036ae:	e00c      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036b0:	2307      	movs	r3, #7
 80036b2:	e00a      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036b4:	2305      	movs	r3, #5
 80036b6:	e008      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036b8:	2304      	movs	r3, #4
 80036ba:	e006      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036bc:	2303      	movs	r3, #3
 80036be:	e004      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e002      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_GPIO_Init+0x20e>
 80036c8:	2300      	movs	r3, #0
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	f002 0203 	and.w	r2, r2, #3
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	4093      	lsls	r3, r2
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036da:	4937      	ldr	r1, [pc, #220]	; (80037b8 <HAL_GPIO_Init+0x2fc>)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e8:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003712:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003736:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_GPIO_Init+0x31c>)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3301      	adds	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f ae97 	bne.w	80034d4 <HAL_GPIO_Init+0x18>
  }
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40020000 	.word	0x40020000
 80037c0:	40020400 	.word	0x40020400
 80037c4:	40020800 	.word	0x40020800
 80037c8:	40020c00 	.word	0x40020c00
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40021400 	.word	0x40021400
 80037d4:	40021800 	.word	0x40021800
 80037d8:	40010400 	.word	0x40010400

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80037f8:	e003      	b.n	8003802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	041a      	lsls	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	619a      	str	r2, [r3, #24]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e12b      	b.n	8003a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe feda 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800386e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003870:	f002 f96c 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8003874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a81      	ldr	r2, [pc, #516]	; (8003a80 <HAL_I2C_Init+0x274>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d807      	bhi.n	8003890 <HAL_I2C_Init+0x84>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a80      	ldr	r2, [pc, #512]	; (8003a84 <HAL_I2C_Init+0x278>)
 8003884:	4293      	cmp	r3, r2
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e006      	b.n	800389e <HAL_I2C_Init+0x92>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a7d      	ldr	r2, [pc, #500]	; (8003a88 <HAL_I2C_Init+0x27c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	bf94      	ite	ls
 8003898:	2301      	movls	r3, #1
 800389a:	2300      	movhi	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0e7      	b.n	8003a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a78      	ldr	r2, [pc, #480]	; (8003a8c <HAL_I2C_Init+0x280>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9b      	lsrs	r3, r3, #18
 80038b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <HAL_I2C_Init+0x274>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d802      	bhi.n	80038e0 <HAL_I2C_Init+0xd4>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3301      	adds	r3, #1
 80038de:	e009      	b.n	80038f4 <HAL_I2C_Init+0xe8>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a69      	ldr	r2, [pc, #420]	; (8003a90 <HAL_I2C_Init+0x284>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	3301      	adds	r3, #1
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	495c      	ldr	r1, [pc, #368]	; (8003a80 <HAL_I2C_Init+0x274>)
 8003910:	428b      	cmp	r3, r1
 8003912:	d819      	bhi.n	8003948 <HAL_I2C_Init+0x13c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e59      	subs	r1, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003922:	1c59      	adds	r1, r3, #1
 8003924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003928:	400b      	ands	r3, r1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_I2C_Init+0x138>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1e59      	subs	r1, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fbb1 f3f3 	udiv	r3, r1, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	e051      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 8003944:	2304      	movs	r3, #4
 8003946:	e04f      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d111      	bne.n	8003974 <HAL_I2C_Init+0x168>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e012      	b.n	800399a <HAL_I2C_Init+0x18e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e58      	subs	r0, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	0099      	lsls	r1, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	fbb0 f3f3 	udiv	r3, r0, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Init+0x196>
 800399e:	2301      	movs	r3, #1
 80039a0:	e022      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10e      	bne.n	80039c8 <HAL_I2C_Init+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e58      	subs	r0, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	440b      	add	r3, r1
 80039b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c6:	e00f      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	6809      	ldr	r1, [r1, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6911      	ldr	r1, [r2, #16]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68d2      	ldr	r2, [r2, #12]
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	000186a0 	.word	0x000186a0
 8003a84:	001e847f 	.word	0x001e847f
 8003a88:	003d08ff 	.word	0x003d08ff
 8003a8c:	431bde83 	.word	0x431bde83
 8003a90:	10624dd3 	.word	0x10624dd3

08003a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	817b      	strh	r3, [r7, #10]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff fc1e 	bl	80032e8 <HAL_GetTick>
 8003aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	f040 80e0 	bne.w	8003c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4970      	ldr	r1, [pc, #448]	; (8003c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f001 f8f6 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0d3      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2C_Master_Transmit+0x50>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0cc      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d007      	beq.n	8003b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2221      	movs	r2, #33	; 0x21
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2210      	movs	r2, #16
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	893a      	ldrh	r2, [r7, #8]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a50      	ldr	r2, [pc, #320]	; (8003c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fde2 	bl	800471c <I2C_MasterRequestWrite>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e08d      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b78:	e066      	b.n	8003c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f001 f970 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06b      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_I2C_Master_Transmit+0x188>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	6a39      	ldr	r1, [r7, #32]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f001 f960 	bl	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d107      	bne.n	8003c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e01a      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d194      	bne.n	8003b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	00100002 	.word	0x00100002
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	; 0x30
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7ff fb20 	bl	80032e8 <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	f040 820b 	bne.w	80040ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2319      	movs	r3, #25
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	497c      	ldr	r1, [pc, #496]	; (8003eb4 <HAL_I2C_Master_Receive+0x224>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fff8 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e1fe      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2C_Master_Receive+0x50>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e1f7      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d007      	beq.n	8003d06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2222      	movs	r2, #34	; 0x22
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2210      	movs	r2, #16
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	893a      	ldrh	r2, [r7, #8]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <HAL_I2C_Master_Receive+0x228>)
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d48:	8979      	ldrh	r1, [r7, #10]
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fd66 	bl	8004820 <I2C_MasterRequestRead>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1b8      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e18c      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11b      	bne.n	8003dce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e16c      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11b      	bne.n	8003e0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	e14c      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e34:	e138      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	f200 80f1 	bhi.w	8004022 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d123      	bne.n	8003e90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f001 f88b 	bl	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e139      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8e:	e10b      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d14e      	bne.n	8003f36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4906      	ldr	r1, [pc, #24]	; (8003ebc <HAL_I2C_Master_Receive+0x22c>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 ff08 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e10e      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
 8003eb2:	bf00      	nop
 8003eb4:	00100002 	.word	0x00100002
 8003eb8:	ffff0000 	.word	0xffff0000
 8003ebc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f34:	e0b8      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4966      	ldr	r1, [pc, #408]	; (80040d8 <HAL_I2C_Master_Receive+0x448>)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 feb9 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0bf      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2200      	movs	r2, #0
 8003f9a:	494f      	ldr	r1, [pc, #316]	; (80040d8 <HAL_I2C_Master_Receive+0x448>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fe8b 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e091      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004020:	e042      	b.n	80040a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 ff9e 	bl	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e04c      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d118      	bne.n	80040a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f aec2 	bne.w	8003e36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010004 	.word	0x00010004

080040dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f6:	f7ff f8f7 	bl	80032e8 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b20      	cmp	r3, #32
 8004106:	f040 80d9 	bne.w	80042bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2319      	movs	r3, #25
 8004110:	2201      	movs	r2, #1
 8004112:	496d      	ldr	r1, [pc, #436]	; (80042c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fdcf 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
 8004122:	e0cc      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_I2C_Mem_Write+0x56>
 800412e:	2302      	movs	r3, #2
 8004130:	e0c5      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d007      	beq.n	8004158 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2221      	movs	r2, #33	; 0x21
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_I2C_Mem_Write+0x1f0>)
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419a:	88f8      	ldrh	r0, [r7, #6]
 800419c:	893a      	ldrh	r2, [r7, #8]
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fc06 	bl	80049bc <I2C_RequestMemoryWrite>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d052      	beq.n	800425c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e081      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fe50 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d107      	bne.n	80041e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e06b      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11b      	bne.n	800425c <HAL_I2C_Mem_Write+0x180>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1aa      	bne.n	80041ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fe3c 	bl	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b04      	cmp	r3, #4
 800427a:	d107      	bne.n	800428c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e016      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	00100002 	.word	0x00100002
 80042cc:	ffff0000 	.word	0xffff0000

080042d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08c      	sub	sp, #48	; 0x30
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	817b      	strh	r3, [r7, #10]
 80042e2:	460b      	mov	r3, r1
 80042e4:	813b      	strh	r3, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ea:	f7fe fffd 	bl	80032e8 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	f040 8208 	bne.w	800470e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2319      	movs	r3, #25
 8004304:	2201      	movs	r2, #1
 8004306:	497b      	ldr	r1, [pc, #492]	; (80044f4 <HAL_I2C_Mem_Read+0x224>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fcd5 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e1fb      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2C_Mem_Read+0x56>
 8004322:	2302      	movs	r3, #2
 8004324:	e1f4      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d007      	beq.n	800434c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2222      	movs	r2, #34	; 0x22
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a5b      	ldr	r2, [pc, #364]	; (80044f8 <HAL_I2C_Mem_Read+0x228>)
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438e:	88f8      	ldrh	r0, [r7, #6]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	8979      	ldrh	r1, [r7, #10]
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	4603      	mov	r3, r0
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fba2 	bl	8004ae8 <I2C_RequestMemoryRead>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1b0      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d113      	bne.n	80043de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e184      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d11b      	bne.n	800441e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e164      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	2b02      	cmp	r3, #2
 8004424:	d11b      	bne.n	800445e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004434:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	e144      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004474:	e138      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	2b03      	cmp	r3, #3
 800447c:	f200 80f1 	bhi.w	8004662 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	2b01      	cmp	r3, #1
 8004486:	d123      	bne.n	80044d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fd6b 	bl	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e139      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ce:	e10b      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d14e      	bne.n	8004576 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2200      	movs	r2, #0
 80044e0:	4906      	ldr	r1, [pc, #24]	; (80044fc <HAL_I2C_Mem_Read+0x22c>)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fbe8 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e10e      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
 80044f2:	bf00      	nop
 80044f4:	00100002 	.word	0x00100002
 80044f8:	ffff0000 	.word	0xffff0000
 80044fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004574:	e0b8      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	2200      	movs	r2, #0
 800457e:	4966      	ldr	r1, [pc, #408]	; (8004718 <HAL_I2C_Mem_Read+0x448>)
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fb99 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0bf      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2200      	movs	r2, #0
 80045da:	494f      	ldr	r1, [pc, #316]	; (8004718 <HAL_I2C_Mem_Read+0x448>)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fb6b 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e091      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004660:	e042      	b.n	80046e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fc7e 	bl	8004f68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e04c      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d118      	bne.n	80046e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f47f aec2 	bne.w	8004476 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	00010004 	.word	0x00010004

0800471c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d006      	beq.n	8004746 <I2C_MasterRequestWrite+0x2a>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d003      	beq.n	8004746 <I2C_MasterRequestWrite+0x2a>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004744:	d108      	bne.n	8004758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e00b      	b.n	8004770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b12      	cmp	r3, #18
 800475e:	d107      	bne.n	8004770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fa9b 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	d103      	bne.n	80047a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e035      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ac:	d108      	bne.n	80047c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	e01b      	b.n	80047f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	11db      	asrs	r3, r3, #7
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f063 030f 	orn	r3, r3, #15
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <I2C_MasterRequestWrite+0xfc>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fac1 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e010      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <I2C_MasterRequestWrite+0x100>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fab1 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	00010008 	.word	0x00010008
 800481c:	00010002 	.word	0x00010002

08004820 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	460b      	mov	r3, r1
 800482e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d006      	beq.n	800485a <I2C_MasterRequestRead+0x3a>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d003      	beq.n	800485a <I2C_MasterRequestRead+0x3a>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004858:	d108      	bne.n	800486c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e00b      	b.n	8004884 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	2b11      	cmp	r3, #17
 8004872:	d107      	bne.n	8004884 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fa11 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00d      	beq.n	80048b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048aa:	d103      	bne.n	80048b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e079      	b.n	80049ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c0:	d108      	bne.n	80048d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048c2:	897b      	ldrh	r3, [r7, #10]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	611a      	str	r2, [r3, #16]
 80048d2:	e05f      	b.n	8004994 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048d4:	897b      	ldrh	r3, [r7, #10]
 80048d6:	11db      	asrs	r3, r3, #7
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0306 	and.w	r3, r3, #6
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f063 030f 	orn	r3, r3, #15
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4930      	ldr	r1, [pc, #192]	; (80049b4 <I2C_MasterRequestRead+0x194>)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fa37 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e054      	b.n	80049ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4929      	ldr	r1, [pc, #164]	; (80049b8 <I2C_MasterRequestRead+0x198>)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa27 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e044      	b.n	80049ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004946:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f9af 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	d103      	bne.n	8004978 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e017      	b.n	80049ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800497c:	897b      	ldrh	r3, [r7, #10]
 800497e:	11db      	asrs	r3, r3, #7
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f063 030e 	orn	r3, r3, #14
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4907      	ldr	r1, [pc, #28]	; (80049b8 <I2C_MasterRequestRead+0x198>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9e3 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00010008 	.word	0x00010008
 80049b8:	00010002 	.word	0x00010002

080049bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	817b      	strh	r3, [r7, #10]
 80049ce:	460b      	mov	r3, r1
 80049d0:	813b      	strh	r3, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f960 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0c:	d103      	bne.n	8004a16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e05f      	b.n	8004ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1a:	897b      	ldrh	r3, [r7, #10]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	492d      	ldr	r1, [pc, #180]	; (8004ae4 <I2C_RequestMemoryWrite+0x128>)
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f998 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e04c      	b.n	8004ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a58:	6a39      	ldr	r1, [r7, #32]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fa02 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00d      	beq.n	8004a82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d107      	bne.n	8004a7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e02b      	b.n	8004ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a88:	893b      	ldrh	r3, [r7, #8]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]
 8004a92:	e021      	b.n	8004ad8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a94:	893b      	ldrh	r3, [r7, #8]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	6a39      	ldr	r1, [r7, #32]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f9dc 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e005      	b.n	8004ada <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	00010002 	.word	0x00010002

08004ae8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	817b      	strh	r3, [r7, #10]
 8004afa:	460b      	mov	r3, r1
 8004afc:	813b      	strh	r3, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f8c2 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b48:	d103      	bne.n	8004b52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0aa      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	4952      	ldr	r1, [pc, #328]	; (8004cb4 <I2C_RequestMemoryRead+0x1cc>)
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f8fa 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e097      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	6a39      	ldr	r1, [r7, #32]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f964 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d107      	bne.n	8004bba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e076      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc4:	893b      	ldrh	r3, [r7, #8]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]
 8004bce:	e021      	b.n	8004c14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	6a39      	ldr	r1, [r7, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f93e 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d107      	bne.n	8004c06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e050      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	6a39      	ldr	r1, [r7, #32]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f923 	bl	8004e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d107      	bne.n	8004c3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e035      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f82b 	bl	8004cb8 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c76:	d103      	bne.n	8004c80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e013      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c84:	897b      	ldrh	r3, [r7, #10]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	4906      	ldr	r1, [pc, #24]	; (8004cb4 <I2C_RequestMemoryRead+0x1cc>)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f863 	bl	8004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	00010002 	.word	0x00010002

08004cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc8:	e025      	b.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d021      	beq.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fe fb09 	bl	80032e8 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d116      	bne.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e023      	b.n	8004d5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10d      	bne.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	e00c      	b.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	43da      	mvns	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d0b6      	beq.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d74:	e051      	b.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d84:	d123      	bne.n	8004dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f043 0204 	orr.w	r2, r3, #4
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e046      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d021      	beq.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fe fa87 	bl	80032e8 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d116      	bne.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e020      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d10c      	bne.n	8004e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e00b      	b.n	8004e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	43da      	mvns	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d18d      	bne.n	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e70:	e02d      	b.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f8ce 	bl	8005014 <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e02d      	b.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d021      	beq.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fe fa2d 	bl	80032e8 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d116      	bne.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e007      	b.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d1ca      	bne.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ef2:	e02d      	b.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f88d 	bl	8005014 <I2C_IsAcknowledgeFailed>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e02d      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d021      	beq.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7fe f9ec 	bl	80032e8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d116      	bne.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e007      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d1ca      	bne.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f74:	e042      	b.n	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d119      	bne.n	8004fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e029      	b.n	800500c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7fe f996 	bl	80032e8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e007      	b.n	800500c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d1b5      	bne.n	8004f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d11b      	bne.n	8005064 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005034:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	f043 0204 	orr.w	r2, r3, #4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e31d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b94      	ldr	r3, [pc, #592]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b91      	ldr	r3, [pc, #580]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d07b      	beq.n	800519a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d006      	beq.n	80050b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d10f      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06a      	beq.n	8005198 <HAL_RCC_OscConfig+0x128>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d166      	bne.n	8005198 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2f7      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x74>
 80050d6:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7e      	ldr	r2, [pc, #504]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e02d      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_OscConfig+0x96>
 80050ec:	4b79      	ldr	r3, [pc, #484]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a78      	ldr	r2, [pc, #480]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a75      	ldr	r2, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0xb8>
 800510e:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a69      	ldr	r2, [pc, #420]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800513a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fe f8ce 	bl	80032e8 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fe f8ca 	bl	80032e8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e2ad      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0xe0>
 800516e:	e014      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fe f8ba 	bl	80032e8 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005178:	f7fe f8b6 	bl	80032e8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e299      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x108>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d05a      	beq.n	800525c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d119      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e276      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	493d      	ldr	r1, [pc, #244]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e4:	e03a      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fe f878 	bl	80032e8 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fe f874 	bl	80032e8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e257      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	492a      	ldr	r1, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
 800522e:	e015      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fe f857 	bl	80032e8 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523e:	f7fe f853 	bl	80032e8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e236      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b8 	beq.w	80053da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d170      	bne.n	8005352 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x218>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e21a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005294:	429a      	cmp	r2, r3
 8005296:	d921      	bls.n	80052dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fcad 	bl	8005bfc <RCC_SetFlashLatencyFromMSIRange>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e208      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4906      	ldr	r1, [pc, #24]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	4901      	ldr	r1, [pc, #4]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
 80052d2:	e020      	b.n	8005316 <HAL_RCC_OscConfig+0x2a6>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052dc:	4b99      	ldr	r3, [pc, #612]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	4996      	ldr	r1, [pc, #600]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	4b95      	ldr	r3, [pc, #596]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	4991      	ldr	r1, [pc, #580]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fc78 	bl	8005bfc <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e1d3      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	0b5b      	lsrs	r3, r3, #13
 800531c:	3301      	adds	r3, #1
 800531e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005326:	4a87      	ldr	r2, [pc, #540]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	f002 020f 	and.w	r2, r2, #15
 8005330:	4985      	ldr	r1, [pc, #532]	; (8005548 <HAL_RCC_OscConfig+0x4d8>)
 8005332:	5c8a      	ldrb	r2, [r1, r2]
 8005334:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005336:	4a85      	ldr	r2, [pc, #532]	; (800554c <HAL_RCC_OscConfig+0x4dc>)
 8005338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x4e0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fd58 	bl	8002df4 <HAL_InitTick>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d045      	beq.n	80053da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	e1b5      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d029      	beq.n	80053ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800535a:	4b7e      	ldr	r3, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x4e4>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd ffc2 	bl	80032e8 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005368:	f7fd ffbe 	bl	80032e8 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1a1      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	496c      	ldr	r1, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	4967      	ldr	r1, [pc, #412]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053ae:	4b69      	ldr	r3, [pc, #420]	; (8005554 <HAL_RCC_OscConfig+0x4e4>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd ff98 	bl	80032e8 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053bc:	f7fd ff94 	bl	80032e8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e177      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ce:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fd ff78 	bl	80032e8 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fd ff74 	bl	80032e8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e157      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800540e:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x38c>
 800541a:	e015      	b.n	8005448 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fd ff61 	bl	80032e8 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fd ff5d 	bl	80032e8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e140      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800543c:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80b5 	beq.w	80055c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	6253      	str	r3, [r2, #36]	; 0x24
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a32      	ldr	r2, [pc, #200]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fd ff25 	bl	80032e8 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fd ff21 	bl	80032e8 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e104      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b29      	ldr	r3, [pc, #164]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x466>
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	6353      	str	r3, [r2, #52]	; 0x34
 80054d4:	e02d      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x488>
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	6353      	str	r3, [r2, #52]	; 0x34
 80054ea:	4b16      	ldr	r3, [pc, #88]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f4:	6353      	str	r3, [r2, #52]	; 0x34
 80054f6:	e01c      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d10c      	bne.n	800551a <HAL_RCC_OscConfig+0x4aa>
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550a:	6353      	str	r3, [r2, #52]	; 0x34
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6353      	str	r3, [r2, #52]	; 0x34
 8005518:	e00b      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	6353      	str	r3, [r2, #52]	; 0x34
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800552c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005530:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553a:	f7fd fed5 	bl	80032e8 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005540:	e019      	b.n	8005576 <HAL_RCC_OscConfig+0x506>
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	0800c9cc 	.word	0x0800c9cc
 800554c:	20000008 	.word	0x20000008
 8005550:	2000000c 	.word	0x2000000c
 8005554:	42470020 	.word	0x42470020
 8005558:	42470680 	.word	0x42470680
 800555c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fd fec2 	bl	80032e8 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0a3      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005576:	4b54      	ldr	r3, [pc, #336]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ee      	beq.n	8005560 <HAL_RCC_OscConfig+0x4f0>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fd feb0 	bl	80032e8 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fd feac 	bl	80032e8 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e08d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a2:	4b49      	ldr	r3, [pc, #292]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ee      	bne.n	800558c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d079      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d056      	beq.n	800567c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d13b      	bne.n	800564e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fd fe84 	bl	80032e8 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fd fe80 	bl	80032e8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e063      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055f6:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4319      	orrs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	430b      	orrs	r3, r1
 800561a:	492b      	ldr	r1, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fd fe5f 	bl	80032e8 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fd fe5b 	bl	80032e8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e03e      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x5be>
 800564c:	e036      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fd fe48 	bl	80032e8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd fe44 	bl	80032e8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e027      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x5ec>
 800567a:	e01f      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e01a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	429a      	cmp	r2, r3
 800569a:	d10d      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d106      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470060 	.word	0x42470060

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e11a      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d919      	bls.n	8005726 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_ClockConfig+0x34>
 80056f8:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a89      	ldr	r2, [pc, #548]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b87      	ldr	r3, [pc, #540]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	4985      	ldr	r1, [pc, #532]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005714:	4b83      	ldr	r3, [pc, #524]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d001      	beq.n	8005726 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0f9      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b7d      	ldr	r3, [pc, #500]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	497a      	ldr	r1, [pc, #488]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005740:	4313      	orrs	r3, r2
 8005742:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 808e 	beq.w	800586e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800575a:	4b73      	ldr	r3, [pc, #460]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d121      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0d7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d115      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0cb      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0bf      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0b7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	495c      	ldr	r1, [pc, #368]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057bc:	f7fd fd94 	bl	80032e8 <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d112      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fd fd8c 	bl	80032e8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e09b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d1ee      	bne.n	80057cc <HAL_RCC_ClockConfig+0xfc>
 80057ee:	e03e      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d112      	bne.n	800581e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fa:	f7fd fd75 	bl	80032e8 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	; 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e084      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_ClockConfig+0x12a>
 800581c:	e027      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11d      	bne.n	8005862 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fd fd5e 	bl	80032e8 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e06d      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800583e:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b04      	cmp	r3, #4
 8005848:	d1ee      	bne.n	8005828 <HAL_RCC_ClockConfig+0x158>
 800584a:	e010      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fd fd4c 	bl	80032e8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e05b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d219      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCC_ClockConfig+0x1be>
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a27      	ldr	r2, [pc, #156]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	4923      	ldr	r1, [pc, #140]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e034      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f823 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490b      	ldr	r1, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x264>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fd fa70 	bl	8002df4 <HAL_InitTick>
 8005914:	4603      	mov	r3, r0
 8005916:	72fb      	strb	r3, [r7, #11]

  return status;
 8005918:	7afb      	ldrb	r3, [r7, #11]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023c00 	.word	0x40023c00
 8005928:	40023800 	.word	0x40023800
 800592c:	0800c9cc 	.word	0x0800c9cc
 8005930:	20000008 	.word	0x20000008
 8005934:	2000000c 	.word	0x2000000c

08005938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800593c:	b092      	sub	sp, #72	; 0x48
 800593e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x34>
 8005950:	2b0c      	cmp	r3, #12
 8005952:	f200 80d5 	bhi.w	8005b00 <HAL_RCC_GetSysClockFreq+0x1c8>
 8005956:	2b04      	cmp	r3, #4
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x28>
 800595a:	2b08      	cmp	r3, #8
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x2e>
 800595e:	e0cf      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b72      	ldr	r3, [pc, #456]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005964:	e0da      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800596a:	e0d7      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	0c9b      	lsrs	r3, r3, #18
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005976:	5c9b      	ldrb	r3, [r3, r2]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	0d9b      	lsrs	r3, r3, #22
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	3301      	adds	r3, #1
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005986:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d05d      	beq.n	8005a4e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2200      	movs	r2, #0
 8005996:	4618      	mov	r0, r3
 8005998:	4611      	mov	r1, r2
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	46d4      	mov	ip, sl
 80059e0:	ebb2 080c 	subs.w	r8, r2, ip
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	4604      	mov	r4, r0
 8005a28:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	024a      	lsls	r2, r1, #9
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	2200      	movs	r2, #0
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a40:	f7fb fb0e 	bl	8001060 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	e055      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2200      	movs	r2, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	627a      	str	r2, [r7, #36]	; 0x24
 8005a56:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	0159      	lsls	r1, r3, #5
 8005a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6c:	0150      	lsls	r0, r2, #5
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	46c4      	mov	ip, r8
 8005a74:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	468c      	mov	ip, r1
 8005a7e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a8e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a92:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a96:	ebb2 040a 	subs.w	r4, r2, sl
 8005a9a:	eb63 050b 	sbc.w	r5, r3, fp
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	00eb      	lsls	r3, r5, #3
 8005aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aac:	00e2      	lsls	r2, r4, #3
 8005aae:	4614      	mov	r4, r2
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	18e3      	adds	r3, r4, r3
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005acc:	4629      	mov	r1, r5
 8005ace:	028b      	lsls	r3, r1, #10
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005ada:	4601      	mov	r1, r0
 8005adc:	028a      	lsls	r2, r1, #10
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	61fa      	str	r2, [r7, #28]
 8005aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aee:	f7fb fab7 	bl	8001060 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4613      	mov	r3, r2
 8005af8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005afe:	e00d      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	0b5b      	lsrs	r3, r3, #13
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3748      	adds	r7, #72	; 0x48
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	007a1200 	.word	0x007a1200
 8005b34:	0800c9c0 	.word	0x0800c9c0

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	20000008 	.word	0x20000008

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff2 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	0800c9dc 	.word	0x0800c9dc

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffde 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0adb      	lsrs	r3, r3, #11
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	0800c9dc 	.word	0x0800c9dc

08005b9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	220f      	movs	r2, #15
 8005baa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <HAL_RCC_GetClockConfig+0x58>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0203 	and.w	r2, r3, #3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <HAL_RCC_GetClockConfig+0x58>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_GetClockConfig+0x58>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <HAL_RCC_GetClockConfig+0x58>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_GetClockConfig+0x5c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0201 	and.w	r2, r3, #1
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	601a      	str	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40023c00 	.word	0x40023c00

08005bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c08:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d12c      	bne.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c14:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c20:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e016      	b.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c2c:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6253      	str	r3, [r2, #36]	; 0x24
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005c44:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005c4c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c60:	d105      	bne.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c68:	d101      	bne.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d105      	bne.n	8005c80 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 0201 	bic.w	r2, r3, #1
 8005c88:	490b      	ldr	r1, [pc, #44]	; (8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d001      	beq.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40007000 	.word	0x40007000
 8005cb8:	40023c00 	.word	0x40023c00

08005cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07b      	b.n	8005dc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d108      	bne.n	8005ce8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cde:	d009      	beq.n	8005cf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	61da      	str	r2, [r3, #28]
 8005ce6:	e005      	b.n	8005cf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fc fff8 	bl	8002d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	ea42 0103 	orr.w	r1, r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	f003 0104 	and.w	r1, r3, #4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	f003 0210 	and.w	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_SPI_Transmit+0x22>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e126      	b.n	800603e <HAL_SPI_Transmit+0x270>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df8:	f7fd fa76 	bl	80032e8 <HAL_GetTick>
 8005dfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e12:	e10b      	b.n	800602c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0x52>
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e24:	e102      	b.n	800602c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2203      	movs	r2, #3
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d10f      	bne.n	8005e8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d007      	beq.n	8005eac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb4:	d14b      	bne.n	8005f4e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0xf6>
 8005ebe:	8afb      	ldrh	r3, [r7, #22]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d13e      	bne.n	8005f42 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ee8:	e02b      	b.n	8005f42 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d112      	bne.n	8005f1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	881a      	ldrh	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f1c:	e011      	b.n	8005f42 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f1e:	f7fd f9e3 	bl	80032e8 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d803      	bhi.n	8005f36 <HAL_SPI_Transmit+0x168>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d102      	bne.n	8005f3c <HAL_SPI_Transmit+0x16e>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f40:	e074      	b.n	800602c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ce      	bne.n	8005eea <HAL_SPI_Transmit+0x11c>
 8005f4c:	e04c      	b.n	8005fe8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x18e>
 8005f56:	8afb      	ldrh	r3, [r7, #22]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d140      	bne.n	8005fde <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	7812      	ldrb	r2, [r2, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f82:	e02c      	b.n	8005fde <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d113      	bne.n	8005fba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fb8:	e011      	b.n	8005fde <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fba:	f7fd f995 	bl	80032e8 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Transmit+0x204>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x20a>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fdc:	e026      	b.n	800602c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1cd      	bne.n	8005f84 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f8b3 	bl	8006158 <SPI_EndRxTxTransaction>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e000      	b.n	800602c <HAL_SPI_Transmit+0x25e>
  }

error:
 800602a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800603c:	7ffb      	ldrb	r3, [r7, #31]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006058:	f7fd f946 	bl	80032e8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	4413      	add	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006068:	f7fd f93e 	bl	80032e8 <HAL_GetTick>
 800606c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	015b      	lsls	r3, r3, #5
 8006074:	0d1b      	lsrs	r3, r3, #20
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607e:	e054      	b.n	800612a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d050      	beq.n	800612a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006088:	f7fd f92e 	bl	80032e8 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	429a      	cmp	r2, r3
 8006096:	d902      	bls.n	800609e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d13d      	bne.n	800611a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b6:	d111      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d004      	beq.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ca:	d107      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e4:	d10f      	bne.n	8006106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e017      	b.n	800614a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	3b01      	subs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d19b      	bne.n	8006080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000008 	.word	0x20000008

08006158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <SPI_EndRxTxTransaction+0x7c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <SPI_EndRxTxTransaction+0x80>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	0d5b      	lsrs	r3, r3, #21
 8006170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006174:	fb02 f303 	mul.w	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d112      	bne.n	80061aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff ff5a 	bl	8006048 <SPI_WaitFlagStateUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e00f      	b.n	80061ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	2b80      	cmp	r3, #128	; 0x80
 80061c2:	d0f2      	beq.n	80061aa <SPI_EndRxTxTransaction+0x52>
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061c6:	bf00      	nop
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000008 	.word	0x20000008
 80061d8:	165e9f81 	.word	0x165e9f81

080061dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e031      	b.n	8006252 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f829 	bl	800625a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f000 f978 	bl	8006510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e03a      	b.n	80062fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d00e      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x58>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a16      	ldr	r2, [pc, #88]	; (8006304 <HAL_TIM_Base_Start_IT+0x98>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x58>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a14      	ldr	r2, [pc, #80]	; (8006308 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x58>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a13      	ldr	r2, [pc, #76]	; (800630c <HAL_TIM_Base_Start_IT+0xa0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d010      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	e007      	b.n	80062f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40010800 	.word	0x40010800

08006310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d122      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d11b      	bne.n	800636c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0202 	mvn.w	r2, #2
 800633c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8c1 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8b4 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f8c3 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0204 	mvn.w	r2, #4
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f897 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f88a 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f899 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0208 	mvn.w	r2, #8
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2204      	movs	r2, #4
 80063ea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f86d 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f860 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f86f 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0210 	mvn.w	r2, #16
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2208      	movs	r2, #8
 800643e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f843 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f836 	bl	80064c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f845 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10e      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d107      	bne.n	8006494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0201 	mvn.w	r2, #1
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fc fb22 	bl	8002ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d10e      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d107      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f81f 	bl	80064fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006526:	d00f      	beq.n	8006548 <TIM_Base_SetConfig+0x38>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <TIM_Base_SetConfig+0xc8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_Base_SetConfig+0x38>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <TIM_Base_SetConfig+0xcc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_Base_SetConfig+0x38>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <TIM_Base_SetConfig+0xd0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_Base_SetConfig+0x38>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_Base_SetConfig+0xd4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d108      	bne.n	800655a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d017      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <TIM_Base_SetConfig+0xc8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <TIM_Base_SetConfig+0xcc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <TIM_Base_SetConfig+0xd0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <TIM_Base_SetConfig+0xd4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <TIM_Base_SetConfig+0xd8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_Base_SetConfig+0x82>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <TIM_Base_SetConfig+0xdc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d108      	bne.n	80065a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	615a      	str	r2, [r3, #20]
}
 80065ce:	bf00      	nop
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010800 	.word	0x40010800
 80065e8:	40010c00 	.word	0x40010c00
 80065ec:	40011000 	.word	0x40011000

080065f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e03f      	b.n	8006682 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fc fda0 	bl	800315c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2224      	movs	r2, #36	; 0x24
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f905 	bl	8006844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08a      	sub	sp, #40	; 0x28
 800668e:	af02      	add	r7, sp, #8
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d17c      	bne.n	80067a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_UART_Transmit+0x2c>
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e075      	b.n	80067a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_UART_Transmit+0x3e>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e06e      	b.n	80067a6 <HAL_UART_Transmit+0x11c>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066de:	f7fc fe03 	bl	80032e8 <HAL_GetTick>
 80066e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f8:	d108      	bne.n	800670c <HAL_UART_Transmit+0x82>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e003      	b.n	8006714 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800671c:	e02a      	b.n	8006774 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f840 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e036      	b.n	80067a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3302      	adds	r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e007      	b.n	8006766 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1cf      	bne.n	800671e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2200      	movs	r2, #0
 8006786:	2140      	movs	r1, #64	; 0x40
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f810 	bl	80067ae <UART_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e006      	b.n	80067a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067be:	e02c      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d028      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0x30>
 80067ce:	f7fc fd8b 	bl	80032e8 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d21d      	bcs.n	800681a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e00f      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	429a      	cmp	r2, r3
 8006836:	d0c3      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	4313      	orrs	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006884:	f023 030c 	bic.w	r3, r3, #12
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	430b      	orrs	r3, r1
 8006890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a55      	ldr	r2, [pc, #340]	; (8006a04 <UART_SetConfig+0x1c0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d103      	bne.n	80068ba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068b2:	f7ff f95f 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	e002      	b.n	80068c0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068ba:	f7ff f947 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80068be:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c8:	d14c      	bne.n	8006964 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	009a      	lsls	r2, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	4a49      	ldr	r2, [pc, #292]	; (8006a08 <UART_SetConfig+0x1c4>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	0119      	lsls	r1, r3, #4
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009a      	lsls	r2, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006900:	4b41      	ldr	r3, [pc, #260]	; (8006a08 <UART_SetConfig+0x1c4>)
 8006902:	fba3 0302 	umull	r0, r3, r3, r2
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	2064      	movs	r0, #100	; 0x64
 800690a:	fb00 f303 	mul.w	r3, r0, r3
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	3332      	adds	r3, #50	; 0x32
 8006914:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <UART_SetConfig+0x1c4>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006922:	4419      	add	r1, r3
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009a      	lsls	r2, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fbb2 f2f3 	udiv	r2, r2, r3
 800693a:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <UART_SetConfig+0x1c4>)
 800693c:	fba3 0302 	umull	r0, r3, r3, r2
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	2064      	movs	r0, #100	; 0x64
 8006944:	fb00 f303 	mul.w	r3, r0, r3
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	3332      	adds	r3, #50	; 0x32
 800694e:	4a2e      	ldr	r2, [pc, #184]	; (8006a08 <UART_SetConfig+0x1c4>)
 8006950:	fba2 2303 	umull	r2, r3, r2, r3
 8006954:	095b      	lsrs	r3, r3, #5
 8006956:	f003 0207 	and.w	r2, r3, #7
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	440a      	add	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006962:	e04a      	b.n	80069fa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009a      	lsls	r2, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <UART_SetConfig+0x1c4>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	0119      	lsls	r1, r3, #4
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009a      	lsls	r2, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	fbb2 f2f3 	udiv	r2, r2, r3
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <UART_SetConfig+0x1c4>)
 800699c:	fba3 0302 	umull	r0, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2064      	movs	r0, #100	; 0x64
 80069a4:	fb00 f303 	mul.w	r3, r0, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <UART_SetConfig+0x1c4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ba:	4419      	add	r1, r3
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009a      	lsls	r2, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d2:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <UART_SetConfig+0x1c4>)
 80069d4:	fba3 0302 	umull	r0, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	2064      	movs	r0, #100	; 0x64
 80069dc:	fb00 f303 	mul.w	r3, r0, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	3332      	adds	r3, #50	; 0x32
 80069e6:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <UART_SetConfig+0x1c4>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	f003 020f 	and.w	r2, r3, #15
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	440a      	add	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]
}
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40013800 	.word	0x40013800
 8006a08:	51eb851f 	.word	0x51eb851f

08006a0c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a12:	f3ef 8305 	mrs	r3, IPSR
 8006a16:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a22:	607b      	str	r3, [r7, #4]
  return(result);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <osKernelInitialize+0x32>
 8006a2a:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <osKernelInitialize+0x60>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d109      	bne.n	8006a46 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a32:	f3ef 8311 	mrs	r3, BASEPRI
 8006a36:	603b      	str	r3, [r7, #0]
  return(result);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a3e:	f06f 0305 	mvn.w	r3, #5
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e00c      	b.n	8006a60 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <osKernelInitialize+0x60>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <osKernelInitialize+0x60>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr
 8006a6c:	200003ec 	.word	0x200003ec

08006a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a76:	f3ef 8305 	mrs	r3, IPSR
 8006a7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10f      	bne.n	8006aa2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a82:	f3ef 8310 	mrs	r3, PRIMASK
 8006a86:	607b      	str	r3, [r7, #4]
  return(result);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d109      	bne.n	8006aa2 <osKernelStart+0x32>
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <osKernelStart+0x64>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d109      	bne.n	8006aaa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a96:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <osKernelStart+0x3a>
    stat = osErrorISR;
 8006aa2:	f06f 0305 	mvn.w	r3, #5
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e00e      	b.n	8006ac8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <osKernelStart+0x64>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d107      	bne.n	8006ac2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <osKernelStart+0x64>)
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006ab8:	f001 f8ce 	bl	8007c58 <vTaskStartScheduler>
      stat = osOK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e002      	b.n	8006ac8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200003ec 	.word	0x200003ec

08006ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b092      	sub	sp, #72	; 0x48
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae8:	f3ef 8305 	mrs	r3, IPSR
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8094 	bne.w	8006c1e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af6:	f3ef 8310 	mrs	r3, PRIMASK
 8006afa:	623b      	str	r3, [r7, #32]
  return(result);
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 808d 	bne.w	8006c1e <osThreadNew+0x146>
 8006b04:	4b48      	ldr	r3, [pc, #288]	; (8006c28 <osThreadNew+0x150>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d106      	bne.n	8006b1a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f040 8082 	bne.w	8006c1e <osThreadNew+0x146>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d07e      	beq.n	8006c1e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b24:	2318      	movs	r3, #24
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b28:	2300      	movs	r3, #0
 8006b2a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b2c:	f107 031b 	add.w	r3, r7, #27
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d045      	beq.n	8006bca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <osThreadNew+0x74>
        name = attr->name;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <osThreadNew+0x9a>
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b38      	cmp	r3, #56	; 0x38
 8006b64:	d805      	bhi.n	8006b72 <osThreadNew+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <osThreadNew+0x9e>
        return (NULL);
 8006b72:	2300      	movs	r3, #0
 8006b74:	e054      	b.n	8006c20 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <osThreadNew+0xd4>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2bbb      	cmp	r3, #187	; 0xbb
 8006b94:	d90a      	bls.n	8006bac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <osThreadNew+0xd4>
        mem = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006baa:	e010      	b.n	8006bce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <osThreadNew+0xf6>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <osThreadNew+0xf6>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <osThreadNew+0xf6>
          mem = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc8:	e001      	b.n	8006bce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d110      	bne.n	8006bf6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fe50 	bl	8007890 <xTaskCreateStatic>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e013      	b.n	8006c1e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f107 0314 	add.w	r3, r7, #20
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fe9a 	bl	8007948 <xTaskCreate>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <osThreadNew+0x146>
          hTask = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c1e:	697b      	ldr	r3, [r7, #20]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3738      	adds	r7, #56	; 0x38
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	200003ec 	.word	0x200003ec

08006c2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c34:	f3ef 8305 	mrs	r3, IPSR
 8006c38:	613b      	str	r3, [r7, #16]
  return(result);
 8006c3a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10f      	bne.n	8006c60 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c40:	f3ef 8310 	mrs	r3, PRIMASK
 8006c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <osDelay+0x34>
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <osDelay+0x58>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d109      	bne.n	8006c68 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c54:	f3ef 8311 	mrs	r3, BASEPRI
 8006c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <osDelay+0x3c>
    stat = osErrorISR;
 8006c60:	f06f 0305 	mvn.w	r3, #5
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	e007      	b.n	8006c78 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 ffbc 	bl	8007bf0 <vTaskDelay>
    }
  }

  return (stat);
 8006c78:	697b      	ldr	r3, [r7, #20]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200003ec 	.word	0x200003ec

08006c88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <vApplicationGetIdleTaskMemory+0x28>)
 8006c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4a05      	ldr	r2, [pc, #20]	; (8006cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2280      	movs	r2, #128	; 0x80
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr
 8006cb0:	200003f0 	.word	0x200003f0
 8006cb4:	200004ac 	.word	0x200004ac

08006cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8006cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd6:	601a      	str	r2, [r3, #0]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200006ac 	.word	0x200006ac
 8006ce8:	20000768 	.word	0x20000768

08006cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f103 0208 	add.w	r2, r3, #8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f103 0208 	add.w	r2, r3, #8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bc80      	pop	{r7}
 8006d28:	4770      	bx	lr

08006d2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d103      	bne.n	8006da8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e00c      	b.n	8006dc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3308      	adds	r3, #8
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e002      	b.n	8006db6 <vListInsert+0x2e>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d2f6      	bcs.n	8006db0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6892      	ldr	r2, [r2, #8]
 8006e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6852      	ldr	r2, [r2, #4]
 8006e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d103      	bne.n	8006e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
	...

08006e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e76:	f002 f831 	bl	8008edc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	441a      	add	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22ff      	movs	r2, #255	; 0xff
 8006ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d114      	bne.n	8006ef6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01a      	beq.n	8006f0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f959 	bl	8008190 <xTaskRemoveFromEventList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d012      	beq.n	8006f0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <xQueueGenericReset+0xcc>)
 8006ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	e009      	b.n	8006f0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3310      	adds	r3, #16
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fef6 	bl	8006cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fef1 	bl	8006cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f0a:	f002 f817 	bl	8008f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f0e:	2301      	movs	r3, #1
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08e      	sub	sp, #56	; 0x38
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <xQueueGenericCreateStatic+0x52>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <xQueueGenericCreateStatic+0x56>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <xQueueGenericCreateStatic+0x58>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	623b      	str	r3, [r7, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <xQueueGenericCreateStatic+0x7e>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <xQueueGenericCreateStatic+0x82>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueGenericCreateStatic+0x84>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	61fb      	str	r3, [r7, #28]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fba:	2350      	movs	r3, #80	; 0x50
 8006fbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b50      	cmp	r3, #80	; 0x50
 8006fc2:	d00a      	beq.n	8006fda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	61bb      	str	r3, [r7, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	68b9      	ldr	r1, [r7, #8]
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f843 	bl	8007086 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007002:	4618      	mov	r0, r3
 8007004:	3730      	adds	r7, #48	; 0x30
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800700a:	b580      	push	{r7, lr}
 800700c:	b08a      	sub	sp, #40	; 0x28
 800700e:	af02      	add	r7, sp, #8
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	4613      	mov	r3, r2
 8007016:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <xQueueGenericCreate+0x2a>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	613b      	str	r3, [r7, #16]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e004      	b.n	800704a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	fb02 f303 	mul.w	r3, r2, r3
 8007048:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3350      	adds	r3, #80	; 0x50
 800704e:	4618      	mov	r0, r3
 8007050:	f002 f844 	bl	80090dc <pvPortMalloc>
 8007054:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	3350      	adds	r3, #80	; 0x50
 8007060:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800706a:	79fa      	ldrb	r2, [r7, #7]
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f805 	bl	8007086 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800707c:	69bb      	ldr	r3, [r7, #24]
	}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
 8007092:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e002      	b.n	80070a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070b4:	2101      	movs	r1, #1
 80070b6:	69b8      	ldr	r0, [r7, #24]
 80070b8:	f7ff fec8 	bl	8006e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	78fa      	ldrb	r2, [r7, #3]
 80070c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08e      	sub	sp, #56	; 0x38
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070da:	2300      	movs	r3, #0
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueGenericSend+0x32>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <xQueueGenericSend+0x40>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xQueueGenericSend+0x44>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xQueueGenericSend+0x46>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xQueueGenericSend+0x60>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d103      	bne.n	800713a <xQueueGenericSend+0x6e>
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <xQueueGenericSend+0x72>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericSend+0x74>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericSend+0x8e>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800715a:	f001 f9df 	bl	800851c <xTaskGetSchedulerState>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <xQueueGenericSend+0x9e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <xQueueGenericSend+0xa2>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <xQueueGenericSend+0xa4>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xQueueGenericSend+0xbe>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	61fb      	str	r3, [r7, #28]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800718a:	f001 fea7 	bl	8008edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	429a      	cmp	r2, r3
 8007198:	d302      	bcc.n	80071a0 <xQueueGenericSend+0xd4>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d129      	bne.n	80071f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a6:	f000 fa07 	bl	80075b8 <prvCopyDataToQueue>
 80071aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 ffe9 	bl	8008190 <xTaskRemoveFromEventList>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d013      	beq.n	80071ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071c4:	4b3f      	ldr	r3, [pc, #252]	; (80072c4 <xQueueGenericSend+0x1f8>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	e00a      	b.n	80071ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d007      	beq.n	80071ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071dc:	4b39      	ldr	r3, [pc, #228]	; (80072c4 <xQueueGenericSend+0x1f8>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071ec:	f001 fea6 	bl	8008f3c <vPortExitCritical>
				return pdPASS;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e063      	b.n	80072bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d103      	bne.n	8007202 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071fa:	f001 fe9f 	bl	8008f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	e05c      	b.n	80072bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007208:	f107 0314 	add.w	r3, r7, #20
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f823 	bl	8008258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007216:	f001 fe91 	bl	8008f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800721a:	f000 fd8d 	bl	8007d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800721e:	f001 fe5d 	bl	8008edc <vPortEnterCritical>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007228:	b25b      	sxtb	r3, r3
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d103      	bne.n	8007238 <xQueueGenericSend+0x16c>
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723e:	b25b      	sxtb	r3, r3
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d103      	bne.n	800724e <xQueueGenericSend+0x182>
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800724e:	f001 fe75 	bl	8008f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007252:	1d3a      	adds	r2, r7, #4
 8007254:	f107 0314 	add.w	r3, r7, #20
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f812 	bl	8008284 <xTaskCheckForTimeOut>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d124      	bne.n	80072b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007268:	f000 fa9e 	bl	80077a8 <prvIsQueueFull>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	3310      	adds	r3, #16
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f000 ff38 	bl	80080f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007282:	f000 fa29 	bl	80076d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007286:	f000 fd65 	bl	8007d54 <xTaskResumeAll>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	f47f af7c 	bne.w	800718a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <xQueueGenericSend+0x1f8>)
 8007294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	e772      	b.n	800718a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a6:	f000 fa17 	bl	80076d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072aa:	f000 fd53 	bl	8007d54 <xTaskResumeAll>
 80072ae:	e76c      	b.n	800718a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fa11 	bl	80076d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b6:	f000 fd4d 	bl	8007d54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072ba:	2300      	movs	r3, #0
		}
	}
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3738      	adds	r7, #56	; 0x38
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08e      	sub	sp, #56	; 0x38
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <xQueueGenericSendFromISR+0x3c>
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <xQueueGenericSendFromISR+0x40>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <xQueueGenericSendFromISR+0x42>
 8007308:	2300      	movs	r3, #0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	623b      	str	r3, [r7, #32]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <xQueueGenericSendFromISR+0x6a>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <xQueueGenericSendFromISR+0x6e>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericSendFromISR+0x70>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61fb      	str	r3, [r7, #28]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007352:	f001 fe85 	bl	8009060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007356:	f3ef 8211 	mrs	r2, BASEPRI
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61ba      	str	r2, [r7, #24]
 800736c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800736e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	429a      	cmp	r2, r3
 800737c:	d302      	bcc.n	8007384 <xQueueGenericSendFromISR+0xbc>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d12c      	bne.n	80073de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007394:	f000 f910 	bl	80075b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007398:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d112      	bne.n	80073c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	3324      	adds	r3, #36	; 0x24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 feee 	bl	8008190 <xTaskRemoveFromEventList>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00e      	beq.n	80073d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e007      	b.n	80073d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073cc:	3301      	adds	r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	b25a      	sxtb	r2, r3
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073dc:	e001      	b.n	80073e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3738      	adds	r7, #56	; 0x38
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08c      	sub	sp, #48	; 0x30
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xQueueReceive+0x30>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	623b      	str	r3, [r7, #32]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <xQueueReceive+0x3e>
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <xQueueReceive+0x42>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <xQueueReceive+0x44>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xQueueReceive+0x5e>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	61fb      	str	r3, [r7, #28]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007456:	f001 f861 	bl	800851c <xTaskGetSchedulerState>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <xQueueReceive+0x6e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueReceive+0x72>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueReceive+0x74>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueReceive+0x8e>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61bb      	str	r3, [r7, #24]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007486:	f001 fd29 	bl	8008edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01f      	beq.n	80074d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800749a:	f000 f8f7 	bl	800768c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00f      	beq.n	80074ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	3310      	adds	r3, #16
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fe6c 	bl	8008190 <xTaskRemoveFromEventList>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074be:	4b3d      	ldr	r3, [pc, #244]	; (80075b4 <xQueueReceive+0x1bc>)
 80074c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074ce:	f001 fd35 	bl	8008f3c <vPortExitCritical>
				return pdPASS;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e069      	b.n	80075aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074dc:	f001 fd2e 	bl	8008f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e062      	b.n	80075aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ea:	f107 0310 	add.w	r3, r7, #16
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 feb2 	bl	8008258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074f4:	2301      	movs	r3, #1
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074f8:	f001 fd20 	bl	8008f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074fc:	f000 fc1c 	bl	8007d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007500:	f001 fcec 	bl	8008edc <vPortEnterCritical>
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800750a:	b25b      	sxtb	r3, r3
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d103      	bne.n	800751a <xQueueReceive+0x122>
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007520:	b25b      	sxtb	r3, r3
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d103      	bne.n	8007530 <xQueueReceive+0x138>
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007530:	f001 fd04 	bl	8008f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007534:	1d3a      	adds	r2, r7, #4
 8007536:	f107 0310 	add.w	r3, r7, #16
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fea1 	bl	8008284 <xTaskCheckForTimeOut>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d123      	bne.n	8007590 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754a:	f000 f917 	bl	800777c <prvIsQueueEmpty>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d017      	beq.n	8007584 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	3324      	adds	r3, #36	; 0x24
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4611      	mov	r1, r2
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fdc7 	bl	80080f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007564:	f000 f8b8 	bl	80076d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007568:	f000 fbf4 	bl	8007d54 <xTaskResumeAll>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d189      	bne.n	8007486 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <xQueueReceive+0x1bc>)
 8007574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	e780      	b.n	8007486 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	f000 f8a7 	bl	80076d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800758a:	f000 fbe3 	bl	8007d54 <xTaskResumeAll>
 800758e:	e77a      	b.n	8007486 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f000 f8a1 	bl	80076d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007596:	f000 fbdd 	bl	8007d54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800759a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800759c:	f000 f8ee 	bl	800777c <prvIsQueueEmpty>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f43f af6f 	beq.w	8007486 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3730      	adds	r7, #48	; 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d14d      	bne.n	800767a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 ffb8 	bl	8008558 <xTaskPriorityDisinherit>
 80075e8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	605a      	str	r2, [r3, #4]
 80075f0:	e043      	b.n	800767a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d119      	bne.n	800762c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6898      	ldr	r0, [r3, #8]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	461a      	mov	r2, r3
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	f002 f865 	bl	80096d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	441a      	add	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d32b      	bcc.n	800767a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	609a      	str	r2, [r3, #8]
 800762a:	e026      	b.n	800767a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68d8      	ldr	r0, [r3, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	461a      	mov	r2, r3
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	f002 f84b 	bl	80096d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	425b      	negs	r3, r3
 8007646:	441a      	add	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d207      	bcs.n	8007668 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	425b      	negs	r3, r3
 8007662:	441a      	add	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d105      	bne.n	800767a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3b01      	subs	r3, #1
 8007678:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007682:	697b      	ldr	r3, [r7, #20]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d018      	beq.n	80076d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	441a      	add	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d303      	bcc.n	80076c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68d9      	ldr	r1, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	461a      	mov	r2, r3
 80076ca:	6838      	ldr	r0, [r7, #0]
 80076cc:	f002 f801 	bl	80096d2 <memcpy>
	}
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076e0:	f001 fbfc 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ec:	e011      	b.n	8007712 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d012      	beq.n	800771c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fd48 	bl	8008190 <xTaskRemoveFromEventList>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007706:	f000 fe1f 	bl	8008348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	3b01      	subs	r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dce9      	bgt.n	80076ee <prvUnlockQueue+0x16>
 800771a:	e000      	b.n	800771e <prvUnlockQueue+0x46>
					break;
 800771c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	22ff      	movs	r2, #255	; 0xff
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007726:	f001 fc09 	bl	8008f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800772a:	f001 fbd7 	bl	8008edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007734:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007736:	e011      	b.n	800775c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d012      	beq.n	8007766 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3310      	adds	r3, #16
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fd23 	bl	8008190 <xTaskRemoveFromEventList>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007750:	f000 fdfa 	bl	8008348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	3b01      	subs	r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dce9      	bgt.n	8007738 <prvUnlockQueue+0x60>
 8007764:	e000      	b.n	8007768 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007766:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	22ff      	movs	r2, #255	; 0xff
 800776c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007770:	f001 fbe4 	bl	8008f3c <vPortExitCritical>
}
 8007774:	bf00      	nop
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007784:	f001 fbaa 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e001      	b.n	800779a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800779a:	f001 fbcf 	bl	8008f3c <vPortExitCritical>

	return xReturn;
 800779e:	68fb      	ldr	r3, [r7, #12]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077b0:	f001 fb94 	bl	8008edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	429a      	cmp	r2, r3
 80077be:	d102      	bne.n	80077c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077c0:	2301      	movs	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	e001      	b.n	80077ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ca:	f001 fbb7 	bl	8008f3c <vPortExitCritical>

	return xReturn;
 80077ce:	68fb      	ldr	r3, [r7, #12]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	e014      	b.n	8007812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077e8:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <vQueueAddToRegistry+0x4c>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077f4:	490b      	ldr	r1, [pc, #44]	; (8007824 <vQueueAddToRegistry+0x4c>)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <vQueueAddToRegistry+0x4c>)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	4413      	add	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800780a:	e006      	b.n	800781a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b07      	cmp	r3, #7
 8007816:	d9e7      	bls.n	80077e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr
 8007824:	20000b68 	.word	0x20000b68

08007828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007838:	f001 fb50 	bl	8008edc <vPortEnterCritical>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007842:	b25b      	sxtb	r3, r3
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d103      	bne.n	8007852 <vQueueWaitForMessageRestricted+0x2a>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007858:	b25b      	sxtb	r3, r3
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d103      	bne.n	8007868 <vQueueWaitForMessageRestricted+0x40>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007868:	f001 fb68 	bl	8008f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d106      	bne.n	8007882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3324      	adds	r3, #36	; 0x24
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fc5b 	bl	8008138 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007882:	6978      	ldr	r0, [r7, #20]
 8007884:	f7ff ff28 	bl	80076d8 <prvUnlockQueue>
	}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08e      	sub	sp, #56	; 0x38
 8007894:	af04      	add	r7, sp, #16
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	623b      	str	r3, [r7, #32]
}
 80078b6:	bf00      	nop
 80078b8:	e7fe      	b.n	80078b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	61fb      	str	r3, [r7, #28]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078d6:	23bc      	movs	r3, #188	; 0xbc
 80078d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2bbc      	cmp	r3, #188	; 0xbc
 80078de:	d00a      	beq.n	80078f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	61bb      	str	r3, [r7, #24]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01e      	beq.n	800793a <xTaskCreateStatic+0xaa>
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01b      	beq.n	800793a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	2202      	movs	r2, #2
 8007910:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007914:	2300      	movs	r3, #0
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	9302      	str	r3, [sp, #8]
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f851 	bl	80079d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007934:	f000 f8ec 	bl	8007b10 <prvAddNewTaskToReadyList>
 8007938:	e001      	b.n	800793e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800793e:	697b      	ldr	r3, [r7, #20]
	}
 8007940:	4618      	mov	r0, r3
 8007942:	3728      	adds	r7, #40	; 0x28
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af04      	add	r7, sp, #16
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4618      	mov	r0, r3
 800795e:	f001 fbbd 	bl	80090dc <pvPortMalloc>
 8007962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800796a:	20bc      	movs	r0, #188	; 0xbc
 800796c:	f001 fbb6 	bl	80090dc <pvPortMalloc>
 8007970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
 800797e:	e005      	b.n	800798c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007980:	6978      	ldr	r0, [r7, #20]
 8007982:	f001 fc6f 	bl	8009264 <vPortFree>
 8007986:	e001      	b.n	800798c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d017      	beq.n	80079c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	2300      	movs	r3, #0
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f80f 	bl	80079d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079b6:	69f8      	ldr	r0, [r7, #28]
 80079b8:	f000 f8aa 	bl	8007b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079bc:	2301      	movs	r3, #1
 80079be:	61bb      	str	r3, [r7, #24]
 80079c0:	e002      	b.n	80079c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079c8:	69bb      	ldr	r3, [r7, #24]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3720      	adds	r7, #32
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	461a      	mov	r2, r3
 80079ec:	21a5      	movs	r1, #165	; 0xa5
 80079ee:	f001 fe7e 	bl	80096ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079fc:	3b01      	subs	r3, #1
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	617b      	str	r3, [r7, #20]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e012      	b.n	8007a58 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	7819      	ldrb	r1, [r3, #0]
 8007a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	3334      	adds	r3, #52	; 0x34
 8007a42:	460a      	mov	r2, r1
 8007a44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d006      	beq.n	8007a60 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	3301      	adds	r3, #1
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	d9e9      	bls.n	8007a32 <prvInitialiseNewTask+0x5e>
 8007a5e:	e000      	b.n	8007a62 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2b37      	cmp	r3, #55	; 0x37
 8007a6e:	d901      	bls.n	8007a74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a70:	2337      	movs	r3, #55	; 0x37
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2200      	movs	r2, #0
 8007a84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff f94d 	bl	8006d2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	3318      	adds	r3, #24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff f948 	bl	8006d2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	3354      	adds	r3, #84	; 0x54
 8007ac4:	2260      	movs	r2, #96	; 0x60
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fe10 	bl	80096ee <memset>
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	4a0c      	ldr	r2, [pc, #48]	; (8007b04 <prvInitialiseNewTask+0x130>)
 8007ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <prvInitialiseNewTask+0x134>)
 8007ad8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <prvInitialiseNewTask+0x138>)
 8007ade:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	69b8      	ldr	r0, [r7, #24]
 8007ae6:	f001 f90b 	bl	8008d00 <pxPortInitialiseStack>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007afc:	bf00      	nop
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	0800ca04 	.word	0x0800ca04
 8007b08:	0800ca24 	.word	0x0800ca24
 8007b0c:	0800c9e4 	.word	0x0800c9e4

08007b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b18:	f001 f9e0 	bl	8008edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b1c:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <prvAddNewTaskToReadyList+0xc4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3301      	adds	r3, #1
 8007b22:	4a2c      	ldr	r2, [pc, #176]	; (8007bd4 <prvAddNewTaskToReadyList+0xc4>)
 8007b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <prvAddNewTaskToReadyList+0xc8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b2e:	4a2a      	ldr	r2, [pc, #168]	; (8007bd8 <prvAddNewTaskToReadyList+0xc8>)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b34:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <prvAddNewTaskToReadyList+0xc4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d110      	bne.n	8007b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b3c:	f000 fc28 	bl	8008390 <prvInitialiseTaskLists>
 8007b40:	e00d      	b.n	8007b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <prvAddNewTaskToReadyList+0xcc>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b4a:	4b23      	ldr	r3, [pc, #140]	; (8007bd8 <prvAddNewTaskToReadyList+0xc8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d802      	bhi.n	8007b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b58:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <prvAddNewTaskToReadyList+0xc8>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <prvAddNewTaskToReadyList+0xd0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3301      	adds	r3, #1
 8007b64:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <prvAddNewTaskToReadyList+0xd0>)
 8007b66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <prvAddNewTaskToReadyList+0xd0>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <prvAddNewTaskToReadyList+0xd4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d903      	bls.n	8007b84 <prvAddNewTaskToReadyList+0x74>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <prvAddNewTaskToReadyList+0xd4>)
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <prvAddNewTaskToReadyList+0xd8>)
 8007b92:	441a      	add	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f7ff f8d1 	bl	8006d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ba0:	f001 f9cc 	bl	8008f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ba4:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <prvAddNewTaskToReadyList+0xcc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00e      	beq.n	8007bca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <prvAddNewTaskToReadyList+0xc8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d207      	bcs.n	8007bca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvAddNewTaskToReadyList+0xdc>)
 8007bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000107c 	.word	0x2000107c
 8007bd8:	20000ba8 	.word	0x20000ba8
 8007bdc:	20001088 	.word	0x20001088
 8007be0:	20001098 	.word	0x20001098
 8007be4:	20001084 	.word	0x20001084
 8007be8:	20000bac 	.word	0x20000bac
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d017      	beq.n	8007c32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c02:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <vTaskDelay+0x60>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <vTaskDelay+0x30>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60bb      	str	r3, [r7, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c20:	f000 f88a 	bl	8007d38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd04 	bl	8008634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c2c:	f000 f892 	bl	8007d54 <xTaskResumeAll>
 8007c30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d107      	bne.n	8007c48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <vTaskDelay+0x64>)
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200010a4 	.word	0x200010a4
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c66:	463a      	mov	r2, r7
 8007c68:	1d39      	adds	r1, r7, #4
 8007c6a:	f107 0308 	add.w	r3, r7, #8
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff f80a 	bl	8006c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	460a      	mov	r2, r1
 8007c86:	4924      	ldr	r1, [pc, #144]	; (8007d18 <vTaskStartScheduler+0xc0>)
 8007c88:	4824      	ldr	r0, [pc, #144]	; (8007d1c <vTaskStartScheduler+0xc4>)
 8007c8a:	f7ff fe01 	bl	8007890 <xTaskCreateStatic>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4a23      	ldr	r2, [pc, #140]	; (8007d20 <vTaskStartScheduler+0xc8>)
 8007c92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c94:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <vTaskStartScheduler+0xc8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e001      	b.n	8007ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d102      	bne.n	8007cb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cac:	f000 fd16 	bl	80086dc <xTimerCreateTimerTask>
 8007cb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d11b      	bne.n	8007cf0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	613b      	str	r3, [r7, #16]
}
 8007cca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <vTaskStartScheduler+0xcc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3354      	adds	r3, #84	; 0x54
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <vTaskStartScheduler+0xd0>)
 8007cd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007cd6:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <vTaskStartScheduler+0xd4>)
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <vTaskStartScheduler+0xd8>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <vTaskStartScheduler+0xdc>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cea:	f001 f885 	bl	8008df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cee:	e00e      	b.n	8007d0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d10a      	bne.n	8007d0e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60fb      	str	r3, [r7, #12]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <vTaskStartScheduler+0xb4>
}
 8007d0e:	bf00      	nop
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	0800c484 	.word	0x0800c484
 8007d1c:	08008361 	.word	0x08008361
 8007d20:	200010a0 	.word	0x200010a0
 8007d24:	20000ba8 	.word	0x20000ba8
 8007d28:	20000018 	.word	0x20000018
 8007d2c:	2000109c 	.word	0x2000109c
 8007d30:	20001088 	.word	0x20001088
 8007d34:	20001080 	.word	0x20001080

08007d38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <vTaskSuspendAll+0x18>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	4a03      	ldr	r2, [pc, #12]	; (8007d50 <vTaskSuspendAll+0x18>)
 8007d44:	6013      	str	r3, [r2, #0]
}
 8007d46:	bf00      	nop
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	200010a4 	.word	0x200010a4

08007d54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d62:	4b42      	ldr	r3, [pc, #264]	; (8007e6c <xTaskResumeAll+0x118>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d80:	f001 f8ac 	bl	8008edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d84:	4b39      	ldr	r3, [pc, #228]	; (8007e6c <xTaskResumeAll+0x118>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	4a38      	ldr	r2, [pc, #224]	; (8007e6c <xTaskResumeAll+0x118>)
 8007d8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d8e:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <xTaskResumeAll+0x118>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d162      	bne.n	8007e5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d96:	4b36      	ldr	r3, [pc, #216]	; (8007e70 <xTaskResumeAll+0x11c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d05e      	beq.n	8007e5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d9e:	e02f      	b.n	8007e00 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007da0:	4b34      	ldr	r3, [pc, #208]	; (8007e74 <xTaskResumeAll+0x120>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3318      	adds	r3, #24
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff f823 	bl	8006df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff f81e 	bl	8006df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <xTaskResumeAll+0x124>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d903      	bls.n	8007dd0 <xTaskResumeAll+0x7c>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <xTaskResumeAll+0x124>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4a27      	ldr	r2, [pc, #156]	; (8007e7c <xTaskResumeAll+0x128>)
 8007dde:	441a      	add	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe ffab 	bl	8006d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <xTaskResumeAll+0x12c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d302      	bcc.n	8007e00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007dfa:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <xTaskResumeAll+0x130>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e00:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <xTaskResumeAll+0x120>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1cb      	bne.n	8007da0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e0e:	f000 fb61 	bl	80084d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e12:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <xTaskResumeAll+0x134>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d010      	beq.n	8007e40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e1e:	f000 f845 	bl	8007eac <xTaskIncrementTick>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e28:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <xTaskResumeAll+0x130>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f1      	bne.n	8007e1e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <xTaskResumeAll+0x134>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <xTaskResumeAll+0x130>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d009      	beq.n	8007e5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <xTaskResumeAll+0x138>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e5c:	f001 f86e 	bl	8008f3c <vPortExitCritical>

	return xAlreadyYielded;
 8007e60:	68bb      	ldr	r3, [r7, #8]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	200010a4 	.word	0x200010a4
 8007e70:	2000107c 	.word	0x2000107c
 8007e74:	2000103c 	.word	0x2000103c
 8007e78:	20001084 	.word	0x20001084
 8007e7c:	20000bac 	.word	0x20000bac
 8007e80:	20000ba8 	.word	0x20000ba8
 8007e84:	20001090 	.word	0x20001090
 8007e88:	2000108c 	.word	0x2000108c
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e96:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <xTaskGetTickCount+0x18>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e9c:	687b      	ldr	r3, [r7, #4]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr
 8007ea8:	20001080 	.word	0x20001080

08007eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb6:	4b51      	ldr	r3, [pc, #324]	; (8007ffc <xTaskIncrementTick+0x150>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f040 808e 	bne.w	8007fdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ec0:	4b4f      	ldr	r3, [pc, #316]	; (8008000 <xTaskIncrementTick+0x154>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ec8:	4a4d      	ldr	r2, [pc, #308]	; (8008000 <xTaskIncrementTick+0x154>)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d120      	bne.n	8007f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ed4:	4b4b      	ldr	r3, [pc, #300]	; (8008004 <xTaskIncrementTick+0x158>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	603b      	str	r3, [r7, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <xTaskIncrementTick+0x46>
 8007ef4:	4b43      	ldr	r3, [pc, #268]	; (8008004 <xTaskIncrementTick+0x158>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	4b43      	ldr	r3, [pc, #268]	; (8008008 <xTaskIncrementTick+0x15c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a41      	ldr	r2, [pc, #260]	; (8008004 <xTaskIncrementTick+0x158>)
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4a41      	ldr	r2, [pc, #260]	; (8008008 <xTaskIncrementTick+0x15c>)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	4b40      	ldr	r3, [pc, #256]	; (800800c <xTaskIncrementTick+0x160>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	4a3f      	ldr	r2, [pc, #252]	; (800800c <xTaskIncrementTick+0x160>)
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	f000 fadf 	bl	80084d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f16:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <xTaskIncrementTick+0x164>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d34e      	bcc.n	8007fbe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f20:	4b38      	ldr	r3, [pc, #224]	; (8008004 <xTaskIncrementTick+0x158>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <xTaskIncrementTick+0x82>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xTaskIncrementTick+0x84>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f34:	4b36      	ldr	r3, [pc, #216]	; (8008010 <xTaskIncrementTick+0x164>)
 8007f36:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3a:	601a      	str	r2, [r3, #0]
					break;
 8007f3c:	e03f      	b.n	8007fbe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <xTaskIncrementTick+0x158>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d203      	bcs.n	8007f5e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f56:	4a2e      	ldr	r2, [pc, #184]	; (8008010 <xTaskIncrementTick+0x164>)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6013      	str	r3, [r2, #0]
						break;
 8007f5c:	e02f      	b.n	8007fbe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe ff48 	bl	8006df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3318      	adds	r3, #24
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe ff3f 	bl	8006df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7e:	4b25      	ldr	r3, [pc, #148]	; (8008014 <xTaskIncrementTick+0x168>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d903      	bls.n	8007f8e <xTaskIncrementTick+0xe2>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	4a22      	ldr	r2, [pc, #136]	; (8008014 <xTaskIncrementTick+0x168>)
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <xTaskIncrementTick+0x16c>)
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f7fe fecc 	bl	8006d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fae:	4b1b      	ldr	r3, [pc, #108]	; (800801c <xTaskIncrementTick+0x170>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d3b3      	bcc.n	8007f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fbc:	e7b0      	b.n	8007f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <xTaskIncrementTick+0x170>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	4914      	ldr	r1, [pc, #80]	; (8008018 <xTaskIncrementTick+0x16c>)
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d907      	bls.n	8007fe6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e004      	b.n	8007fe6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <xTaskIncrementTick+0x174>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	4a0f      	ldr	r2, [pc, #60]	; (8008020 <xTaskIncrementTick+0x174>)
 8007fe4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <xTaskIncrementTick+0x178>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ff2:	697b      	ldr	r3, [r7, #20]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	200010a4 	.word	0x200010a4
 8008000:	20001080 	.word	0x20001080
 8008004:	20001034 	.word	0x20001034
 8008008:	20001038 	.word	0x20001038
 800800c:	20001094 	.word	0x20001094
 8008010:	2000109c 	.word	0x2000109c
 8008014:	20001084 	.word	0x20001084
 8008018:	20000bac 	.word	0x20000bac
 800801c:	20000ba8 	.word	0x20000ba8
 8008020:	2000108c 	.word	0x2000108c
 8008024:	20001090 	.word	0x20001090

08008028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800802e:	4b2a      	ldr	r3, [pc, #168]	; (80080d8 <vTaskSwitchContext+0xb0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008036:	4b29      	ldr	r3, [pc, #164]	; (80080dc <vTaskSwitchContext+0xb4>)
 8008038:	2201      	movs	r2, #1
 800803a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800803c:	e046      	b.n	80080cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <vTaskSwitchContext+0xb4>)
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008044:	4b26      	ldr	r3, [pc, #152]	; (80080e0 <vTaskSwitchContext+0xb8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e010      	b.n	800806e <vTaskSwitchContext+0x46>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <vTaskSwitchContext+0x40>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <vTaskSwitchContext+0x3e>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3b01      	subs	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	491d      	ldr	r1, [pc, #116]	; (80080e4 <vTaskSwitchContext+0xbc>)
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0e4      	beq.n	800804c <vTaskSwitchContext+0x24>
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <vTaskSwitchContext+0xbc>)
 800808e:	4413      	add	r3, r2
 8008090:	60bb      	str	r3, [r7, #8]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	605a      	str	r2, [r3, #4]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	3308      	adds	r3, #8
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d104      	bne.n	80080b2 <vTaskSwitchContext+0x8a>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	4a0b      	ldr	r2, [pc, #44]	; (80080e8 <vTaskSwitchContext+0xc0>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <vTaskSwitchContext+0xb8>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <vTaskSwitchContext+0xc0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3354      	adds	r3, #84	; 0x54
 80080c8:	4a08      	ldr	r2, [pc, #32]	; (80080ec <vTaskSwitchContext+0xc4>)
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	200010a4 	.word	0x200010a4
 80080dc:	20001090 	.word	0x20001090
 80080e0:	20001084 	.word	0x20001084
 80080e4:	20000bac 	.word	0x20000bac
 80080e8:	20000ba8 	.word	0x20000ba8
 80080ec:	20000018 	.word	0x20000018

080080f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <vTaskPlaceOnEventList+0x44>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3318      	adds	r3, #24
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe fe32 	bl	8006d88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008124:	2101      	movs	r1, #1
 8008126:	6838      	ldr	r0, [r7, #0]
 8008128:	f000 fa84 	bl	8008634 <prvAddCurrentTaskToDelayedList>
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000ba8 	.word	0x20000ba8

08008138 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	617b      	str	r3, [r7, #20]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008160:	4b0a      	ldr	r3, [pc, #40]	; (800818c <vTaskPlaceOnEventListRestricted+0x54>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3318      	adds	r3, #24
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7fe fdea 	bl	8006d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	68b8      	ldr	r0, [r7, #8]
 800817e:	f000 fa59 	bl	8008634 <prvAddCurrentTaskToDelayedList>
	}
 8008182:	bf00      	nop
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000ba8 	.word	0x20000ba8

08008190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60fb      	str	r3, [r7, #12]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3318      	adds	r3, #24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fe19 	bl	8006df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c6:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <xTaskRemoveFromEventList+0xb0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d11d      	bne.n	800820a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fe10 	bl	8006df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b19      	ldr	r3, [pc, #100]	; (8008244 <xTaskRemoveFromEventList+0xb4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <xTaskRemoveFromEventList+0x5c>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a16      	ldr	r2, [pc, #88]	; (8008244 <xTaskRemoveFromEventList+0xb4>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <xTaskRemoveFromEventList+0xb8>)
 80081fa:	441a      	add	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe fd9d 	bl	8006d42 <vListInsertEnd>
 8008208:	e005      	b.n	8008216 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3318      	adds	r3, #24
 800820e:	4619      	mov	r1, r3
 8008210:	480e      	ldr	r0, [pc, #56]	; (800824c <xTaskRemoveFromEventList+0xbc>)
 8008212:	f7fe fd96 	bl	8006d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <xTaskRemoveFromEventList+0xc0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	429a      	cmp	r2, r3
 8008222:	d905      	bls.n	8008230 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <xTaskRemoveFromEventList+0xc4>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e001      	b.n	8008234 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008234:	697b      	ldr	r3, [r7, #20]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200010a4 	.word	0x200010a4
 8008244:	20001084 	.word	0x20001084
 8008248:	20000bac 	.word	0x20000bac
 800824c:	2000103c 	.word	0x2000103c
 8008250:	20000ba8 	.word	0x20000ba8
 8008254:	20001090 	.word	0x20001090

08008258 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <vTaskInternalSetTimeOutState+0x24>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <vTaskInternalSetTimeOutState+0x28>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20001094 	.word	0x20001094
 8008280:	20001080 	.word	0x20001080

08008284 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	613b      	str	r3, [r7, #16]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082c6:	f000 fe09 	bl	8008edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ca:	4b1d      	ldr	r3, [pc, #116]	; (8008340 <xTaskCheckForTimeOut+0xbc>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d102      	bne.n	80082ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e023      	b.n	8008332 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <xTaskCheckForTimeOut+0xc0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d007      	beq.n	8008306 <xTaskCheckForTimeOut+0x82>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	61fb      	str	r3, [r7, #28]
 8008304:	e015      	b.n	8008332 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	429a      	cmp	r2, r3
 800830e:	d20b      	bcs.n	8008328 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ff9b 	bl	8008258 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e004      	b.n	8008332 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008332:	f000 fe03 	bl	8008f3c <vPortExitCritical>

	return xReturn;
 8008336:	69fb      	ldr	r3, [r7, #28]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20001080 	.word	0x20001080
 8008344:	20001094 	.word	0x20001094

08008348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800834c:	4b03      	ldr	r3, [pc, #12]	; (800835c <vTaskMissedYield+0x14>)
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]
}
 8008352:	bf00      	nop
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20001090 	.word	0x20001090

08008360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008368:	f000 f852 	bl	8008410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800836c:	4b06      	ldr	r3, [pc, #24]	; (8008388 <prvIdleTask+0x28>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d9f9      	bls.n	8008368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <prvIdleTask+0x2c>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008384:	e7f0      	b.n	8008368 <prvIdleTask+0x8>
 8008386:	bf00      	nop
 8008388:	20000bac 	.word	0x20000bac
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	e00c      	b.n	80083b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4a12      	ldr	r2, [pc, #72]	; (80083f0 <prvInitialiseTaskLists+0x60>)
 80083a8:	4413      	add	r3, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fc9e 	bl	8006cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3301      	adds	r3, #1
 80083b4:	607b      	str	r3, [r7, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b37      	cmp	r3, #55	; 0x37
 80083ba:	d9ef      	bls.n	800839c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083bc:	480d      	ldr	r0, [pc, #52]	; (80083f4 <prvInitialiseTaskLists+0x64>)
 80083be:	f7fe fc95 	bl	8006cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083c2:	480d      	ldr	r0, [pc, #52]	; (80083f8 <prvInitialiseTaskLists+0x68>)
 80083c4:	f7fe fc92 	bl	8006cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083c8:	480c      	ldr	r0, [pc, #48]	; (80083fc <prvInitialiseTaskLists+0x6c>)
 80083ca:	f7fe fc8f 	bl	8006cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083ce:	480c      	ldr	r0, [pc, #48]	; (8008400 <prvInitialiseTaskLists+0x70>)
 80083d0:	f7fe fc8c 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083d4:	480b      	ldr	r0, [pc, #44]	; (8008404 <prvInitialiseTaskLists+0x74>)
 80083d6:	f7fe fc89 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083da:	4b0b      	ldr	r3, [pc, #44]	; (8008408 <prvInitialiseTaskLists+0x78>)
 80083dc:	4a05      	ldr	r2, [pc, #20]	; (80083f4 <prvInitialiseTaskLists+0x64>)
 80083de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <prvInitialiseTaskLists+0x7c>)
 80083e2:	4a05      	ldr	r2, [pc, #20]	; (80083f8 <prvInitialiseTaskLists+0x68>)
 80083e4:	601a      	str	r2, [r3, #0]
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000bac 	.word	0x20000bac
 80083f4:	2000100c 	.word	0x2000100c
 80083f8:	20001020 	.word	0x20001020
 80083fc:	2000103c 	.word	0x2000103c
 8008400:	20001050 	.word	0x20001050
 8008404:	20001068 	.word	0x20001068
 8008408:	20001034 	.word	0x20001034
 800840c:	20001038 	.word	0x20001038

08008410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008416:	e019      	b.n	800844c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008418:	f000 fd60 	bl	8008edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800841c:	4b10      	ldr	r3, [pc, #64]	; (8008460 <prvCheckTasksWaitingTermination+0x50>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fce5 	bl	8006df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <prvCheckTasksWaitingTermination+0x54>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3b01      	subs	r3, #1
 8008434:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <prvCheckTasksWaitingTermination+0x54>)
 8008436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <prvCheckTasksWaitingTermination+0x58>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3b01      	subs	r3, #1
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <prvCheckTasksWaitingTermination+0x58>)
 8008440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008442:	f000 fd7b 	bl	8008f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f810 	bl	800846c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <prvCheckTasksWaitingTermination+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e1      	bne.n	8008418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20001050 	.word	0x20001050
 8008464:	2000107c 	.word	0x2000107c
 8008468:	20001064 	.word	0x20001064

0800846c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3354      	adds	r3, #84	; 0x54
 8008478:	4618      	mov	r0, r3
 800847a:	f001 fe43 	bl	800a104 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008484:	2b00      	cmp	r3, #0
 8008486:	d108      	bne.n	800849a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fee9 	bl	8009264 <vPortFree>
				vPortFree( pxTCB );
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fee6 	bl	8009264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008498:	e018      	b.n	80084cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d103      	bne.n	80084ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fedd 	bl	8009264 <vPortFree>
	}
 80084aa:	e00f      	b.n	80084cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d00a      	beq.n	80084cc <prvDeleteTCB+0x60>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <prvDeleteTCB+0x5e>
	}
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <prvResetNextTaskUnblockTime+0x40>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <prvResetNextTaskUnblockTime+0x14>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <prvResetNextTaskUnblockTime+0x16>
 80084e8:	2300      	movs	r3, #0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <prvResetNextTaskUnblockTime+0x44>)
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295
 80084f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f6:	e008      	b.n	800850a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084f8:	4b06      	ldr	r3, [pc, #24]	; (8008514 <prvResetNextTaskUnblockTime+0x40>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	4a04      	ldr	r2, [pc, #16]	; (8008518 <prvResetNextTaskUnblockTime+0x44>)
 8008508:	6013      	str	r3, [r2, #0]
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	20001034 	.word	0x20001034
 8008518:	2000109c 	.word	0x2000109c

0800851c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008522:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <xTaskGetSchedulerState+0x34>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800852a:	2301      	movs	r3, #1
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	e008      	b.n	8008542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008530:	4b08      	ldr	r3, [pc, #32]	; (8008554 <xTaskGetSchedulerState+0x38>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008538:	2302      	movs	r3, #2
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	e001      	b.n	8008542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008542:	687b      	ldr	r3, [r7, #4]
	}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20001088 	.word	0x20001088
 8008554:	200010a4 	.word	0x200010a4

08008558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d056      	beq.n	800861c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800856e:	4b2e      	ldr	r3, [pc, #184]	; (8008628 <xTaskPriorityDisinherit+0xd0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d00a      	beq.n	800858e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	60fb      	str	r3, [r7, #12]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60bb      	str	r3, [r7, #8]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b0:	1e5a      	subs	r2, r3, #1
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085be:	429a      	cmp	r2, r3
 80085c0:	d02c      	beq.n	800861c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d128      	bne.n	800861c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fc12 	bl	8006df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <xTaskPriorityDisinherit+0xd4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d903      	bls.n	80085fc <xTaskPriorityDisinherit+0xa4>
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	4a0c      	ldr	r2, [pc, #48]	; (800862c <xTaskPriorityDisinherit+0xd4>)
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4a09      	ldr	r2, [pc, #36]	; (8008630 <xTaskPriorityDisinherit+0xd8>)
 800860a:	441a      	add	r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe fb95 	bl	8006d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800861c:	697b      	ldr	r3, [r7, #20]
	}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000ba8 	.word	0x20000ba8
 800862c:	20001084 	.word	0x20001084
 8008630:	20000bac 	.word	0x20000bac

08008634 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800863e:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008644:	4b20      	ldr	r3, [pc, #128]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3304      	adds	r3, #4
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fbd4 	bl	8006df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d10a      	bne.n	800866e <prvAddCurrentTaskToDelayedList+0x3a>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800865e:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	4819      	ldr	r0, [pc, #100]	; (80086cc <prvAddCurrentTaskToDelayedList+0x98>)
 8008668:	f7fe fb6b 	bl	8006d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800866c:	e026      	b.n	80086bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	429a      	cmp	r2, r3
 8008684:	d209      	bcs.n	800869a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008686:	4b12      	ldr	r3, [pc, #72]	; (80086d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fe fb78 	bl	8006d88 <vListInsert>
}
 8008698:	e010      	b.n	80086bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7fe fb6e 	bl	8006d88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d202      	bcs.n	80086bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086b6:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6013      	str	r3, [r2, #0]
}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20001080 	.word	0x20001080
 80086c8:	20000ba8 	.word	0x20000ba8
 80086cc:	20001068 	.word	0x20001068
 80086d0:	20001038 	.word	0x20001038
 80086d4:	20001034 	.word	0x20001034
 80086d8:	2000109c 	.word	0x2000109c

080086dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086e6:	f000 facb 	bl	8008c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086ea:	4b1c      	ldr	r3, [pc, #112]	; (800875c <xTimerCreateTimerTask+0x80>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d021      	beq.n	8008736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086fa:	1d3a      	adds	r2, r7, #4
 80086fc:	f107 0108 	add.w	r1, r7, #8
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fad7 	bl	8006cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	9202      	str	r2, [sp, #8]
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	2302      	movs	r3, #2
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	460a      	mov	r2, r1
 800871c:	4910      	ldr	r1, [pc, #64]	; (8008760 <xTimerCreateTimerTask+0x84>)
 800871e:	4811      	ldr	r0, [pc, #68]	; (8008764 <xTimerCreateTimerTask+0x88>)
 8008720:	f7ff f8b6 	bl	8007890 <xTaskCreateStatic>
 8008724:	4603      	mov	r3, r0
 8008726:	4a10      	ldr	r2, [pc, #64]	; (8008768 <xTimerCreateTimerTask+0x8c>)
 8008728:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800872a:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <xTimerCreateTimerTask+0x8c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008732:	2301      	movs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	613b      	str	r3, [r7, #16]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008752:	697b      	ldr	r3, [r7, #20]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	200010d8 	.word	0x200010d8
 8008760:	0800c48c 	.word	0x0800c48c
 8008764:	08008889 	.word	0x08008889
 8008768:	200010dc 	.word	0x200010dc

0800876c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	; 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800877a:	2300      	movs	r3, #0
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	623b      	str	r3, [r7, #32]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800879a:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <xTimerGenericCommand+0x98>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02a      	beq.n	80087f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	dc18      	bgt.n	80087e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087b4:	f7ff feb2 	bl	800851c <xTaskGetSchedulerState>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d109      	bne.n	80087d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087be:	4b11      	ldr	r3, [pc, #68]	; (8008804 <xTimerGenericCommand+0x98>)
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f107 0110 	add.w	r1, r7, #16
 80087c6:	2300      	movs	r3, #0
 80087c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ca:	f7fe fc7f 	bl	80070cc <xQueueGenericSend>
 80087ce:	6278      	str	r0, [r7, #36]	; 0x24
 80087d0:	e012      	b.n	80087f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <xTimerGenericCommand+0x98>)
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f107 0110 	add.w	r1, r7, #16
 80087da:	2300      	movs	r3, #0
 80087dc:	2200      	movs	r2, #0
 80087de:	f7fe fc75 	bl	80070cc <xQueueGenericSend>
 80087e2:	6278      	str	r0, [r7, #36]	; 0x24
 80087e4:	e008      	b.n	80087f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <xTimerGenericCommand+0x98>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f107 0110 	add.w	r1, r7, #16
 80087ee:	2300      	movs	r3, #0
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	f7fe fd69 	bl	80072c8 <xQueueGenericSendFromISR>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3728      	adds	r7, #40	; 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200010d8 	.word	0x200010d8

08008808 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af02      	add	r7, sp, #8
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008812:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <prvProcessExpiredTimer+0x7c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	3304      	adds	r3, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fae9 	bl	8006df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d122      	bne.n	8008874 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	18d1      	adds	r1, r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f000 f8c8 	bl	80089d0 <prvInsertTimerInActiveList>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d016      	beq.n	8008874 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008846:	2300      	movs	r3, #0
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	2300      	movs	r3, #0
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	2100      	movs	r1, #0
 8008850:	6978      	ldr	r0, [r7, #20]
 8008852:	f7ff ff8b 	bl	800876c <xTimerGenericCommand>
 8008856:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	60fb      	str	r3, [r7, #12]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	6978      	ldr	r0, [r7, #20]
 800887a:	4798      	blx	r3
}
 800887c:	bf00      	nop
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200010d0 	.word	0x200010d0

08008888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008890:	f107 0308 	add.w	r3, r7, #8
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f857 	bl	8008948 <prvGetNextExpireTime>
 800889a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4619      	mov	r1, r3
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f803 	bl	80088ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088a6:	f000 f8d5 	bl	8008a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088aa:	e7f1      	b.n	8008890 <prvTimerTask+0x8>

080088ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088b6:	f7ff fa3f 	bl	8007d38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f866 	bl	8008990 <prvSampleTimeNow>
 80088c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d130      	bne.n	800892e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d806      	bhi.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088da:	f7ff fa3b 	bl	8007d54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff91 	bl	8008808 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088e6:	e024      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <prvProcessTimerOrBlockTask+0x90>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf0c      	ite	eq
 80088f8:	2301      	moveq	r3, #1
 80088fa:	2300      	movne	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <prvProcessTimerOrBlockTask+0x94>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	f7fe ff8b 	bl	8007828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f7ff fa1f 	bl	8007d54 <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <prvProcessTimerOrBlockTask+0x98>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
}
 800892c:	e001      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800892e:	f7ff fa11 	bl	8007d54 <xTaskResumeAll>
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200010d4 	.word	0x200010d4
 8008940:	200010d8 	.word	0x200010d8
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <prvGetNextExpireTime+0x44>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <prvGetNextExpireTime+0x44>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e001      	b.n	800897e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	200010d0 	.word	0x200010d0

08008990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008998:	f7ff fa7a 	bl	8007e90 <xTaskGetTickCount>
 800899c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <prvSampleTimeNow+0x3c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d205      	bcs.n	80089b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089a8:	f000 f908 	bl	8008bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e002      	b.n	80089ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089ba:	4a04      	ldr	r2, [pc, #16]	; (80089cc <prvSampleTimeNow+0x3c>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089c0:	68fb      	ldr	r3, [r7, #12]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200010e0 	.word	0x200010e0

080089d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d812      	bhi.n	8008a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d302      	bcc.n	8008a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e01b      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <prvInsertTimerInActiveList+0x7c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3304      	adds	r3, #4
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7fe f9b7 	bl	8006d88 <vListInsert>
 8008a1a:	e012      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d206      	bcs.n	8008a32 <prvInsertTimerInActiveList+0x62>
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e007      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <prvInsertTimerInActiveList+0x80>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fe f9a3 	bl	8006d88 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a42:	697b      	ldr	r3, [r7, #20]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200010d4 	.word	0x200010d4
 8008a50:	200010d0 	.word	0x200010d0

08008a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a5a:	e09d      	b.n	8008b98 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da18      	bge.n	8008a94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a62:	1d3b      	adds	r3, r7, #4
 8008a64:	3304      	adds	r3, #4
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	61fb      	str	r3, [r7, #28]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8a:	6850      	ldr	r0, [r2, #4]
 8008a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a8e:	6892      	ldr	r2, [r2, #8]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	db7d      	blt.n	8008b96 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe f9a4 	bl	8006df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff ff6c 	bl	8008990 <prvSampleTimeNow>
 8008ab8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d86b      	bhi.n	8008b98 <prvProcessReceivedCommands+0x144>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <prvProcessReceivedCommands+0x74>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af1 	.word	0x08008af1
 8008ad4:	08008b99 	.word	0x08008b99
 8008ad8:	08008b4d 	.word	0x08008b4d
 8008adc:	08008b85 	.word	0x08008b85
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008af1 	.word	0x08008af1
 8008ae8:	08008b99 	.word	0x08008b99
 8008aec:	08008b4d 	.word	0x08008b4d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	18d1      	adds	r1, r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afe:	f7ff ff67 	bl	80089d0 <prvInsertTimerInActiveList>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d047      	beq.n	8008b98 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b0e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d13f      	bne.n	8008b98 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	441a      	add	r2, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2a:	f7ff fe1f 	bl	800876c <xTimerGenericCommand>
 8008b2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d130      	bne.n	8008b98 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	61bb      	str	r3, [r7, #24]
}
 8008b48:	bf00      	nop
 8008b4a:	e7fe      	b.n	8008b4a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	617b      	str	r3, [r7, #20]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	18d1      	adds	r1, r2, r3
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7e:	f7ff ff27 	bl	80089d0 <prvInsertTimerInActiveList>
					break;
 8008b82:	e009      	b.n	8008b98 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b90:	f000 fb68 	bl	8009264 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b94:	e000      	b.n	8008b98 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b96:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <prvProcessReceivedCommands+0x164>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	1d39      	adds	r1, r7, #4
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fc29 	bl	80073f8 <xQueueReceive>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f47f af57 	bne.w	8008a5c <prvProcessReceivedCommands+0x8>
	}
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200010d8 	.word	0x200010d8

08008bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bc2:	e045      	b.n	8008c50 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bc4:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bce:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe f90b 	bl	8006df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d12e      	bne.n	8008c50 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d90e      	bls.n	8008c22 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c10:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7fe f8b4 	bl	8006d88 <vListInsert>
 8008c20:	e016      	b.n	8008c50 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c22:	2300      	movs	r3, #0
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	2300      	movs	r3, #0
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f7ff fd9d 	bl	800876c <xTimerGenericCommand>
 8008c32:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	603b      	str	r3, [r7, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c50:	4b09      	ldr	r3, [pc, #36]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1b4      	bne.n	8008bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c5a:	4b07      	ldr	r3, [pc, #28]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <prvSwitchTimerLists+0xc0>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <prvSwitchTimerLists+0xbc>)
 8008c66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c68:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <prvSwitchTimerLists+0xc0>)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200010d0 	.word	0x200010d0
 8008c7c:	200010d4 	.word	0x200010d4

08008c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c86:	f000 f929 	bl	8008edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c8a:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d120      	bne.n	8008cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c92:	4814      	ldr	r0, [pc, #80]	; (8008ce4 <prvCheckForValidListAndQueue+0x64>)
 8008c94:	f7fe f82a 	bl	8006cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c98:	4813      	ldr	r0, [pc, #76]	; (8008ce8 <prvCheckForValidListAndQueue+0x68>)
 8008c9a:	f7fe f827 	bl	8006cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c9e:	4b13      	ldr	r3, [pc, #76]	; (8008cec <prvCheckForValidListAndQueue+0x6c>)
 8008ca0:	4a10      	ldr	r2, [pc, #64]	; (8008ce4 <prvCheckForValidListAndQueue+0x64>)
 8008ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ca4:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <prvCheckForValidListAndQueue+0x70>)
 8008ca6:	4a10      	ldr	r2, [pc, #64]	; (8008ce8 <prvCheckForValidListAndQueue+0x68>)
 8008ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008caa:	2300      	movs	r3, #0
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <prvCheckForValidListAndQueue+0x74>)
 8008cb0:	4a11      	ldr	r2, [pc, #68]	; (8008cf8 <prvCheckForValidListAndQueue+0x78>)
 8008cb2:	2110      	movs	r1, #16
 8008cb4:	200a      	movs	r0, #10
 8008cb6:	f7fe f931 	bl	8006f1c <xQueueGenericCreateStatic>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <prvCheckForValidListAndQueue+0x60>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	490b      	ldr	r1, [pc, #44]	; (8008cfc <prvCheckForValidListAndQueue+0x7c>)
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fd82 	bl	80077d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cd4:	f000 f932 	bl	8008f3c <vPortExitCritical>
}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	200010d8 	.word	0x200010d8
 8008ce4:	200010a8 	.word	0x200010a8
 8008ce8:	200010bc 	.word	0x200010bc
 8008cec:	200010d0 	.word	0x200010d0
 8008cf0:	200010d4 	.word	0x200010d4
 8008cf4:	20001184 	.word	0x20001184
 8008cf8:	200010e4 	.word	0x200010e4
 8008cfc:	0800c494 	.word	0x0800c494

08008d00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3b04      	subs	r3, #4
 8008d10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f023 0201 	bic.w	r2, r3, #1
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d30:	4a08      	ldr	r2, [pc, #32]	; (8008d54 <pxPortInitialiseStack+0x54>)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3b14      	subs	r3, #20
 8008d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3b20      	subs	r3, #32
 8008d46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr
 8008d54:	08008d59 	.word	0x08008d59

08008d58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <prvTaskExitError+0x54>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d00a      	beq.n	8008d82 <prvTaskExitError+0x2a>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	60fb      	str	r3, [r7, #12]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <prvTaskExitError+0x28>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	60bb      	str	r3, [r7, #8]
}
 8008d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d96:	bf00      	nop
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0fc      	beq.n	8008d98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000014 	.word	0x20000014

08008db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <pxCurrentTCBConst2>)
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	6808      	ldr	r0, [r1, #0]
 8008db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dba:	f380 8809 	msr	PSP, r0
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8811 	msr	BASEPRI, r0
 8008dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8008dce:	4770      	bx	lr

08008dd0 <pxCurrentTCBConst2>:
 8008dd0:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop

08008dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008dd8:	4806      	ldr	r0, [pc, #24]	; (8008df4 <prvPortStartFirstTask+0x1c>)
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	6800      	ldr	r0, [r0, #0]
 8008dde:	f380 8808 	msr	MSP, r0
 8008de2:	b662      	cpsie	i
 8008de4:	b661      	cpsie	f
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	df00      	svc	0
 8008df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008df2:	bf00      	nop
 8008df4:	e000ed08 	.word	0xe000ed08

08008df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dfe:	4b32      	ldr	r3, [pc, #200]	; (8008ec8 <xPortStartScheduler+0xd0>)
 8008e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	22ff      	movs	r2, #255	; 0xff
 8008e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <xPortStartScheduler+0xd4>)
 8008e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e26:	4b2a      	ldr	r3, [pc, #168]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e28:	2207      	movs	r2, #7
 8008e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e2c:	e009      	b.n	8008e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e2e:	4b28      	ldr	r3, [pc, #160]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	4a26      	ldr	r2, [pc, #152]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d0ef      	beq.n	8008e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e4e:	4b20      	ldr	r3, [pc, #128]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f1c3 0307 	rsb	r3, r3, #7
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d00a      	beq.n	8008e70 <xPortStartScheduler+0x78>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	60bb      	str	r3, [r7, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	e7fe      	b.n	8008e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e82:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <xPortStartScheduler+0xd8>)
 8008e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e8e:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <xPortStartScheduler+0xdc>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a10      	ldr	r2, [pc, #64]	; (8008ed4 <xPortStartScheduler+0xdc>)
 8008e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <xPortStartScheduler+0xdc>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a0d      	ldr	r2, [pc, #52]	; (8008ed4 <xPortStartScheduler+0xdc>)
 8008ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ea6:	f000 f8b9 	bl	800901c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008eaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <xPortStartScheduler+0xe0>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eb0:	f7ff ff92 	bl	8008dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eb4:	f7ff f8b8 	bl	8008028 <vTaskSwitchContext>
	prvTaskExitError();
 8008eb8:	f7ff ff4e 	bl	8008d58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	e000e400 	.word	0xe000e400
 8008ecc:	200011d4 	.word	0x200011d4
 8008ed0:	200011d8 	.word	0x200011d8
 8008ed4:	e000ed20 	.word	0xe000ed20
 8008ed8:	20000014 	.word	0x20000014

08008edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	607b      	str	r3, [r7, #4]
}
 8008ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <vPortEnterCritical+0x58>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a0d      	ldr	r2, [pc, #52]	; (8008f34 <vPortEnterCritical+0x58>)
 8008efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f00:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <vPortEnterCritical+0x58>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d10f      	bne.n	8008f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f08:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <vPortEnterCritical+0x5c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00a      	beq.n	8008f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	603b      	str	r3, [r7, #0]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <vPortEnterCritical+0x4a>
	}
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000014 	.word	0x20000014
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f42:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <vPortExitCritical+0x4c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <vPortExitCritical+0x24>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	607b      	str	r3, [r7, #4]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <vPortExitCritical+0x4c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4a08      	ldr	r2, [pc, #32]	; (8008f88 <vPortExitCritical+0x4c>)
 8008f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <vPortExitCritical+0x4c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d105      	bne.n	8008f7e <vPortExitCritical+0x42>
 8008f72:	2300      	movs	r3, #0
 8008f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f383 8811 	msr	BASEPRI, r3
}
 8008f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr
 8008f88:	20000014 	.word	0x20000014
 8008f8c:	00000000 	.word	0x00000000

08008f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f90:	f3ef 8009 	mrs	r0, PSP
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <pxCurrentTCBConst>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fa0:	6010      	str	r0, [r2, #0]
 8008fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008faa:	f380 8811 	msr	BASEPRI, r0
 8008fae:	f7ff f83b 	bl	8008028 <vTaskSwitchContext>
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	6808      	ldr	r0, [r1, #0]
 8008fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fc6:	f380 8809 	msr	PSP, r0
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	4770      	bx	lr

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
}
 8008ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ff2:	f7fe ff5b 	bl	8007eac <xTaskIncrementTick>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <SysTick_Handler+0x40>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	2300      	movs	r3, #0
 8009006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f383 8811 	msr	BASEPRI, r3
}
 800900e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009020:	4b0a      	ldr	r3, [pc, #40]	; (800904c <vPortSetupTimerInterrupt+0x30>)
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <vPortSetupTimerInterrupt+0x34>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <vPortSetupTimerInterrupt+0x38>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a09      	ldr	r2, [pc, #36]	; (8009058 <vPortSetupTimerInterrupt+0x3c>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	08db      	lsrs	r3, r3, #3
 8009038:	4a08      	ldr	r2, [pc, #32]	; (800905c <vPortSetupTimerInterrupt+0x40>)
 800903a:	3b01      	subs	r3, #1
 800903c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800903e:	4b03      	ldr	r3, [pc, #12]	; (800904c <vPortSetupTimerInterrupt+0x30>)
 8009040:	2207      	movs	r2, #7
 8009042:	601a      	str	r2, [r3, #0]
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr
 800904c:	e000e010 	.word	0xe000e010
 8009050:	e000e018 	.word	0xe000e018
 8009054:	20000008 	.word	0x20000008
 8009058:	cccccccd 	.word	0xcccccccd
 800905c:	e000e014 	.word	0xe000e014

08009060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009066:	f3ef 8305 	mrs	r3, IPSR
 800906a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b0f      	cmp	r3, #15
 8009070:	d914      	bls.n	800909c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009072:	4a16      	ldr	r2, [pc, #88]	; (80090cc <vPortValidateInterruptPriority+0x6c>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800907c:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <vPortValidateInterruptPriority+0x70>)
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	7afa      	ldrb	r2, [r7, #11]
 8009082:	429a      	cmp	r2, r3
 8009084:	d20a      	bcs.n	800909c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	607b      	str	r3, [r7, #4]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800909c:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <vPortValidateInterruptPriority+0x74>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090a4:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <vPortValidateInterruptPriority+0x78>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d90a      	bls.n	80090c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	603b      	str	r3, [r7, #0]
}
 80090be:	bf00      	nop
 80090c0:	e7fe      	b.n	80090c0 <vPortValidateInterruptPriority+0x60>
	}
 80090c2:	bf00      	nop
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr
 80090cc:	e000e3f0 	.word	0xe000e3f0
 80090d0:	200011d4 	.word	0x200011d4
 80090d4:	e000ed0c 	.word	0xe000ed0c
 80090d8:	200011d8 	.word	0x200011d8

080090dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08a      	sub	sp, #40	; 0x28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090e8:	f7fe fe26 	bl	8007d38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090ec:	4b58      	ldr	r3, [pc, #352]	; (8009250 <pvPortMalloc+0x174>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090f4:	f000 f910 	bl	8009318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090f8:	4b56      	ldr	r3, [pc, #344]	; (8009254 <pvPortMalloc+0x178>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4013      	ands	r3, r2
 8009100:	2b00      	cmp	r3, #0
 8009102:	f040 808e 	bne.w	8009222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01d      	beq.n	8009148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800910c:	2208      	movs	r2, #8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b00      	cmp	r3, #0
 800911c:	d014      	beq.n	8009148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f023 0307 	bic.w	r3, r3, #7
 8009124:	3308      	adds	r3, #8
 8009126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f003 0307 	and.w	r3, r3, #7
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <pvPortMalloc+0x6c>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	617b      	str	r3, [r7, #20]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d069      	beq.n	8009222 <pvPortMalloc+0x146>
 800914e:	4b42      	ldr	r3, [pc, #264]	; (8009258 <pvPortMalloc+0x17c>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d864      	bhi.n	8009222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009158:	4b40      	ldr	r3, [pc, #256]	; (800925c <pvPortMalloc+0x180>)
 800915a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800915c:	4b3f      	ldr	r3, [pc, #252]	; (800925c <pvPortMalloc+0x180>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009162:	e004      	b.n	800916e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d903      	bls.n	8009180 <pvPortMalloc+0xa4>
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f1      	bne.n	8009164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009180:	4b33      	ldr	r3, [pc, #204]	; (8009250 <pvPortMalloc+0x174>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009186:	429a      	cmp	r2, r3
 8009188:	d04b      	beq.n	8009222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2208      	movs	r2, #8
 8009190:	4413      	add	r3, r2
 8009192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	2308      	movs	r3, #8
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d91f      	bls.n	80091ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <pvPortMalloc+0xf8>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	613b      	str	r3, [r7, #16]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	1ad2      	subs	r2, r2, r3
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091e6:	69b8      	ldr	r0, [r7, #24]
 80091e8:	f000 f8f8 	bl	80093dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <pvPortMalloc+0x17c>)
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	4a18      	ldr	r2, [pc, #96]	; (8009258 <pvPortMalloc+0x17c>)
 80091f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091fa:	4b17      	ldr	r3, [pc, #92]	; (8009258 <pvPortMalloc+0x17c>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4b18      	ldr	r3, [pc, #96]	; (8009260 <pvPortMalloc+0x184>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d203      	bcs.n	800920e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <pvPortMalloc+0x17c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a15      	ldr	r2, [pc, #84]	; (8009260 <pvPortMalloc+0x184>)
 800920c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	4b10      	ldr	r3, [pc, #64]	; (8009254 <pvPortMalloc+0x178>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	431a      	orrs	r2, r3
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009222:	f7fe fd97 	bl	8007d54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <pvPortMalloc+0x16a>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <pvPortMalloc+0x168>
	return pvReturn;
 8009246:	69fb      	ldr	r3, [r7, #28]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3728      	adds	r7, #40	; 0x28
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001de4 	.word	0x20001de4
 8009254:	20001df0 	.word	0x20001df0
 8009258:	20001de8 	.word	0x20001de8
 800925c:	20001ddc 	.word	0x20001ddc
 8009260:	20001dec 	.word	0x20001dec

08009264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d048      	beq.n	8009308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009276:	2308      	movs	r3, #8
 8009278:	425b      	negs	r3, r3
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4413      	add	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	4b21      	ldr	r3, [pc, #132]	; (8009310 <vPortFree+0xac>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <vPortFree+0x44>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	60fb      	str	r3, [r7, #12]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <vPortFree+0x62>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60bb      	str	r3, [r7, #8]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4b11      	ldr	r3, [pc, #68]	; (8009310 <vPortFree+0xac>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d019      	beq.n	8009308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d115      	bne.n	8009308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <vPortFree+0xac>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	43db      	mvns	r3, r3
 80092e6:	401a      	ands	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092ec:	f7fe fd24 	bl	8007d38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	4b07      	ldr	r3, [pc, #28]	; (8009314 <vPortFree+0xb0>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4413      	add	r3, r2
 80092fa:	4a06      	ldr	r2, [pc, #24]	; (8009314 <vPortFree+0xb0>)
 80092fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 f86c 	bl	80093dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009304:	f7fe fd26 	bl	8007d54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009308:	bf00      	nop
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20001df0 	.word	0x20001df0
 8009314:	20001de8 	.word	0x20001de8

08009318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800931e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009324:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <prvHeapInit+0xac>)
 8009326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00c      	beq.n	800934c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3307      	adds	r3, #7
 8009336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0307 	bic.w	r3, r3, #7
 800933e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <prvHeapInit+0xac>)
 8009348:	4413      	add	r3, r2
 800934a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009350:	4a1d      	ldr	r2, [pc, #116]	; (80093c8 <prvHeapInit+0xb0>)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009356:	4b1c      	ldr	r3, [pc, #112]	; (80093c8 <prvHeapInit+0xb0>)
 8009358:	2200      	movs	r2, #0
 800935a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009364:	2208      	movs	r2, #8
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0307 	bic.w	r3, r3, #7
 8009372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4a15      	ldr	r2, [pc, #84]	; (80093cc <prvHeapInit+0xb4>)
 8009378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <prvHeapInit+0xb4>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2200      	movs	r2, #0
 8009380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <prvHeapInit+0xb4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009398:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <prvHeapInit+0xb4>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4a0a      	ldr	r2, [pc, #40]	; (80093d0 <prvHeapInit+0xb8>)
 80093a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	4a09      	ldr	r2, [pc, #36]	; (80093d4 <prvHeapInit+0xbc>)
 80093ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <prvHeapInit+0xc0>)
 80093b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093b6:	601a      	str	r2, [r3, #0]
}
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	200011dc 	.word	0x200011dc
 80093c8:	20001ddc 	.word	0x20001ddc
 80093cc:	20001de4 	.word	0x20001de4
 80093d0:	20001dec 	.word	0x20001dec
 80093d4:	20001de8 	.word	0x20001de8
 80093d8:	20001df0 	.word	0x20001df0

080093dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093e4:	4b27      	ldr	r3, [pc, #156]	; (8009484 <prvInsertBlockIntoFreeList+0xa8>)
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e002      	b.n	80093f0 <prvInsertBlockIntoFreeList+0x14>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d8f7      	bhi.n	80093ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	4413      	add	r3, r2
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d108      	bne.n	800941e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	441a      	add	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	441a      	add	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d118      	bne.n	8009464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <prvInsertBlockIntoFreeList+0xac>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d00d      	beq.n	800945a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	441a      	add	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	e008      	b.n	800946c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800945a:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <prvInsertBlockIntoFreeList+0xac>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	e003      	b.n	800946c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d002      	beq.n	800947a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800947a:	bf00      	nop
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	bc80      	pop	{r7}
 8009482:	4770      	bx	lr
 8009484:	20001ddc 	.word	0x20001ddc
 8009488:	20001de4 	.word	0x20001de4

0800948c <__errno>:
 800948c:	4b01      	ldr	r3, [pc, #4]	; (8009494 <__errno+0x8>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000018 	.word	0x20000018

08009498 <std>:
 8009498:	2300      	movs	r3, #0
 800949a:	b510      	push	{r4, lr}
 800949c:	4604      	mov	r4, r0
 800949e:	e9c0 3300 	strd	r3, r3, [r0]
 80094a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094a6:	6083      	str	r3, [r0, #8]
 80094a8:	8181      	strh	r1, [r0, #12]
 80094aa:	6643      	str	r3, [r0, #100]	; 0x64
 80094ac:	81c2      	strh	r2, [r0, #14]
 80094ae:	6183      	str	r3, [r0, #24]
 80094b0:	4619      	mov	r1, r3
 80094b2:	2208      	movs	r2, #8
 80094b4:	305c      	adds	r0, #92	; 0x5c
 80094b6:	f000 f91a 	bl	80096ee <memset>
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x38>)
 80094bc:	6224      	str	r4, [r4, #32]
 80094be:	6263      	str	r3, [r4, #36]	; 0x24
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <std+0x3c>)
 80094c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80094c4:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <std+0x40>)
 80094c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <std+0x44>)
 80094ca:	6323      	str	r3, [r4, #48]	; 0x30
 80094cc:	bd10      	pop	{r4, pc}
 80094ce:	bf00      	nop
 80094d0:	0800a21d 	.word	0x0800a21d
 80094d4:	0800a23f 	.word	0x0800a23f
 80094d8:	0800a277 	.word	0x0800a277
 80094dc:	0800a29b 	.word	0x0800a29b

080094e0 <_cleanup_r>:
 80094e0:	4901      	ldr	r1, [pc, #4]	; (80094e8 <_cleanup_r+0x8>)
 80094e2:	f000 b8af 	b.w	8009644 <_fwalk_reent>
 80094e6:	bf00      	nop
 80094e8:	0800b0e1 	.word	0x0800b0e1

080094ec <__sfmoreglue>:
 80094ec:	2268      	movs	r2, #104	; 0x68
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	1e4d      	subs	r5, r1, #1
 80094f2:	4355      	muls	r5, r2
 80094f4:	460e      	mov	r6, r1
 80094f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094fa:	f000 f921 	bl	8009740 <_malloc_r>
 80094fe:	4604      	mov	r4, r0
 8009500:	b140      	cbz	r0, 8009514 <__sfmoreglue+0x28>
 8009502:	2100      	movs	r1, #0
 8009504:	e9c0 1600 	strd	r1, r6, [r0]
 8009508:	300c      	adds	r0, #12
 800950a:	60a0      	str	r0, [r4, #8]
 800950c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009510:	f000 f8ed 	bl	80096ee <memset>
 8009514:	4620      	mov	r0, r4
 8009516:	bd70      	pop	{r4, r5, r6, pc}

08009518 <__sfp_lock_acquire>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__sfp_lock_acquire+0x8>)
 800951a:	f000 b8d8 	b.w	80096ce <__retarget_lock_acquire_recursive>
 800951e:	bf00      	nop
 8009520:	20001df5 	.word	0x20001df5

08009524 <__sfp_lock_release>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__sfp_lock_release+0x8>)
 8009526:	f000 b8d3 	b.w	80096d0 <__retarget_lock_release_recursive>
 800952a:	bf00      	nop
 800952c:	20001df5 	.word	0x20001df5

08009530 <__sinit_lock_acquire>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__sinit_lock_acquire+0x8>)
 8009532:	f000 b8cc 	b.w	80096ce <__retarget_lock_acquire_recursive>
 8009536:	bf00      	nop
 8009538:	20001df6 	.word	0x20001df6

0800953c <__sinit_lock_release>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__sinit_lock_release+0x8>)
 800953e:	f000 b8c7 	b.w	80096d0 <__retarget_lock_release_recursive>
 8009542:	bf00      	nop
 8009544:	20001df6 	.word	0x20001df6

08009548 <__sinit>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	f7ff fff0 	bl	8009530 <__sinit_lock_acquire>
 8009550:	69a3      	ldr	r3, [r4, #24]
 8009552:	b11b      	cbz	r3, 800955c <__sinit+0x14>
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f7ff bff0 	b.w	800953c <__sinit_lock_release>
 800955c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009560:	6523      	str	r3, [r4, #80]	; 0x50
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <__sinit+0x68>)
 8009564:	4a13      	ldr	r2, [pc, #76]	; (80095b4 <__sinit+0x6c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	62a2      	str	r2, [r4, #40]	; 0x28
 800956a:	42a3      	cmp	r3, r4
 800956c:	bf08      	it	eq
 800956e:	2301      	moveq	r3, #1
 8009570:	4620      	mov	r0, r4
 8009572:	bf08      	it	eq
 8009574:	61a3      	streq	r3, [r4, #24]
 8009576:	f000 f81f 	bl	80095b8 <__sfp>
 800957a:	6060      	str	r0, [r4, #4]
 800957c:	4620      	mov	r0, r4
 800957e:	f000 f81b 	bl	80095b8 <__sfp>
 8009582:	60a0      	str	r0, [r4, #8]
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f817 	bl	80095b8 <__sfp>
 800958a:	2200      	movs	r2, #0
 800958c:	2104      	movs	r1, #4
 800958e:	60e0      	str	r0, [r4, #12]
 8009590:	6860      	ldr	r0, [r4, #4]
 8009592:	f7ff ff81 	bl	8009498 <std>
 8009596:	2201      	movs	r2, #1
 8009598:	2109      	movs	r1, #9
 800959a:	68a0      	ldr	r0, [r4, #8]
 800959c:	f7ff ff7c 	bl	8009498 <std>
 80095a0:	2202      	movs	r2, #2
 80095a2:	2112      	movs	r1, #18
 80095a4:	68e0      	ldr	r0, [r4, #12]
 80095a6:	f7ff ff77 	bl	8009498 <std>
 80095aa:	2301      	movs	r3, #1
 80095ac:	61a3      	str	r3, [r4, #24]
 80095ae:	e7d1      	b.n	8009554 <__sinit+0xc>
 80095b0:	0800ca44 	.word	0x0800ca44
 80095b4:	080094e1 	.word	0x080094e1

080095b8 <__sfp>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	4607      	mov	r7, r0
 80095bc:	f7ff ffac 	bl	8009518 <__sfp_lock_acquire>
 80095c0:	4b1e      	ldr	r3, [pc, #120]	; (800963c <__sfp+0x84>)
 80095c2:	681e      	ldr	r6, [r3, #0]
 80095c4:	69b3      	ldr	r3, [r6, #24]
 80095c6:	b913      	cbnz	r3, 80095ce <__sfp+0x16>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7ff ffbd 	bl	8009548 <__sinit>
 80095ce:	3648      	adds	r6, #72	; 0x48
 80095d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	d503      	bpl.n	80095e0 <__sfp+0x28>
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	b30b      	cbz	r3, 8009620 <__sfp+0x68>
 80095dc:	6836      	ldr	r6, [r6, #0]
 80095de:	e7f7      	b.n	80095d0 <__sfp+0x18>
 80095e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095e4:	b9d5      	cbnz	r5, 800961c <__sfp+0x64>
 80095e6:	4b16      	ldr	r3, [pc, #88]	; (8009640 <__sfp+0x88>)
 80095e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095ec:	60e3      	str	r3, [r4, #12]
 80095ee:	6665      	str	r5, [r4, #100]	; 0x64
 80095f0:	f000 f86c 	bl	80096cc <__retarget_lock_init_recursive>
 80095f4:	f7ff ff96 	bl	8009524 <__sfp_lock_release>
 80095f8:	2208      	movs	r2, #8
 80095fa:	4629      	mov	r1, r5
 80095fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009604:	6025      	str	r5, [r4, #0]
 8009606:	61a5      	str	r5, [r4, #24]
 8009608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800960c:	f000 f86f 	bl	80096ee <memset>
 8009610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009618:	4620      	mov	r0, r4
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961c:	3468      	adds	r4, #104	; 0x68
 800961e:	e7d9      	b.n	80095d4 <__sfp+0x1c>
 8009620:	2104      	movs	r1, #4
 8009622:	4638      	mov	r0, r7
 8009624:	f7ff ff62 	bl	80094ec <__sfmoreglue>
 8009628:	4604      	mov	r4, r0
 800962a:	6030      	str	r0, [r6, #0]
 800962c:	2800      	cmp	r0, #0
 800962e:	d1d5      	bne.n	80095dc <__sfp+0x24>
 8009630:	f7ff ff78 	bl	8009524 <__sfp_lock_release>
 8009634:	230c      	movs	r3, #12
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	e7ee      	b.n	8009618 <__sfp+0x60>
 800963a:	bf00      	nop
 800963c:	0800ca44 	.word	0x0800ca44
 8009640:	ffff0001 	.word	0xffff0001

08009644 <_fwalk_reent>:
 8009644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	4606      	mov	r6, r0
 800964a:	4688      	mov	r8, r1
 800964c:	2700      	movs	r7, #0
 800964e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009656:	f1b9 0901 	subs.w	r9, r9, #1
 800965a:	d505      	bpl.n	8009668 <_fwalk_reent+0x24>
 800965c:	6824      	ldr	r4, [r4, #0]
 800965e:	2c00      	cmp	r4, #0
 8009660:	d1f7      	bne.n	8009652 <_fwalk_reent+0xe>
 8009662:	4638      	mov	r0, r7
 8009664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009668:	89ab      	ldrh	r3, [r5, #12]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d907      	bls.n	800967e <_fwalk_reent+0x3a>
 800966e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009672:	3301      	adds	r3, #1
 8009674:	d003      	beq.n	800967e <_fwalk_reent+0x3a>
 8009676:	4629      	mov	r1, r5
 8009678:	4630      	mov	r0, r6
 800967a:	47c0      	blx	r8
 800967c:	4307      	orrs	r7, r0
 800967e:	3568      	adds	r5, #104	; 0x68
 8009680:	e7e9      	b.n	8009656 <_fwalk_reent+0x12>
	...

08009684 <__libc_init_array>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	2600      	movs	r6, #0
 8009688:	4d0c      	ldr	r5, [pc, #48]	; (80096bc <__libc_init_array+0x38>)
 800968a:	4c0d      	ldr	r4, [pc, #52]	; (80096c0 <__libc_init_array+0x3c>)
 800968c:	1b64      	subs	r4, r4, r5
 800968e:	10a4      	asrs	r4, r4, #2
 8009690:	42a6      	cmp	r6, r4
 8009692:	d109      	bne.n	80096a8 <__libc_init_array+0x24>
 8009694:	f002 fe6e 	bl	800c374 <_init>
 8009698:	2600      	movs	r6, #0
 800969a:	4d0a      	ldr	r5, [pc, #40]	; (80096c4 <__libc_init_array+0x40>)
 800969c:	4c0a      	ldr	r4, [pc, #40]	; (80096c8 <__libc_init_array+0x44>)
 800969e:	1b64      	subs	r4, r4, r5
 80096a0:	10a4      	asrs	r4, r4, #2
 80096a2:	42a6      	cmp	r6, r4
 80096a4:	d105      	bne.n	80096b2 <__libc_init_array+0x2e>
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ac:	4798      	blx	r3
 80096ae:	3601      	adds	r6, #1
 80096b0:	e7ee      	b.n	8009690 <__libc_init_array+0xc>
 80096b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b6:	4798      	blx	r3
 80096b8:	3601      	adds	r6, #1
 80096ba:	e7f2      	b.n	80096a2 <__libc_init_array+0x1e>
 80096bc:	0800cdc4 	.word	0x0800cdc4
 80096c0:	0800cdc4 	.word	0x0800cdc4
 80096c4:	0800cdc4 	.word	0x0800cdc4
 80096c8:	0800cdc8 	.word	0x0800cdc8

080096cc <__retarget_lock_init_recursive>:
 80096cc:	4770      	bx	lr

080096ce <__retarget_lock_acquire_recursive>:
 80096ce:	4770      	bx	lr

080096d0 <__retarget_lock_release_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <memcpy>:
 80096d2:	440a      	add	r2, r1
 80096d4:	4291      	cmp	r1, r2
 80096d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80096da:	d100      	bne.n	80096de <memcpy+0xc>
 80096dc:	4770      	bx	lr
 80096de:	b510      	push	{r4, lr}
 80096e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e4:	4291      	cmp	r1, r2
 80096e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ea:	d1f9      	bne.n	80096e0 <memcpy+0xe>
 80096ec:	bd10      	pop	{r4, pc}

080096ee <memset>:
 80096ee:	4603      	mov	r3, r0
 80096f0:	4402      	add	r2, r0
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d100      	bne.n	80096f8 <memset+0xa>
 80096f6:	4770      	bx	lr
 80096f8:	f803 1b01 	strb.w	r1, [r3], #1
 80096fc:	e7f9      	b.n	80096f2 <memset+0x4>
	...

08009700 <sbrk_aligned>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4e0e      	ldr	r6, [pc, #56]	; (800973c <sbrk_aligned+0x3c>)
 8009704:	460c      	mov	r4, r1
 8009706:	6831      	ldr	r1, [r6, #0]
 8009708:	4605      	mov	r5, r0
 800970a:	b911      	cbnz	r1, 8009712 <sbrk_aligned+0x12>
 800970c:	f000 fd56 	bl	800a1bc <_sbrk_r>
 8009710:	6030      	str	r0, [r6, #0]
 8009712:	4621      	mov	r1, r4
 8009714:	4628      	mov	r0, r5
 8009716:	f000 fd51 	bl	800a1bc <_sbrk_r>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	d00a      	beq.n	8009734 <sbrk_aligned+0x34>
 800971e:	1cc4      	adds	r4, r0, #3
 8009720:	f024 0403 	bic.w	r4, r4, #3
 8009724:	42a0      	cmp	r0, r4
 8009726:	d007      	beq.n	8009738 <sbrk_aligned+0x38>
 8009728:	1a21      	subs	r1, r4, r0
 800972a:	4628      	mov	r0, r5
 800972c:	f000 fd46 	bl	800a1bc <_sbrk_r>
 8009730:	3001      	adds	r0, #1
 8009732:	d101      	bne.n	8009738 <sbrk_aligned+0x38>
 8009734:	f04f 34ff 	mov.w	r4, #4294967295
 8009738:	4620      	mov	r0, r4
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	20001dfc 	.word	0x20001dfc

08009740 <_malloc_r>:
 8009740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	1ccd      	adds	r5, r1, #3
 8009746:	f025 0503 	bic.w	r5, r5, #3
 800974a:	3508      	adds	r5, #8
 800974c:	2d0c      	cmp	r5, #12
 800974e:	bf38      	it	cc
 8009750:	250c      	movcc	r5, #12
 8009752:	2d00      	cmp	r5, #0
 8009754:	4607      	mov	r7, r0
 8009756:	db01      	blt.n	800975c <_malloc_r+0x1c>
 8009758:	42a9      	cmp	r1, r5
 800975a:	d905      	bls.n	8009768 <_malloc_r+0x28>
 800975c:	230c      	movs	r3, #12
 800975e:	2600      	movs	r6, #0
 8009760:	603b      	str	r3, [r7, #0]
 8009762:	4630      	mov	r0, r6
 8009764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009768:	4e2e      	ldr	r6, [pc, #184]	; (8009824 <_malloc_r+0xe4>)
 800976a:	f001 fd21 	bl	800b1b0 <__malloc_lock>
 800976e:	6833      	ldr	r3, [r6, #0]
 8009770:	461c      	mov	r4, r3
 8009772:	bb34      	cbnz	r4, 80097c2 <_malloc_r+0x82>
 8009774:	4629      	mov	r1, r5
 8009776:	4638      	mov	r0, r7
 8009778:	f7ff ffc2 	bl	8009700 <sbrk_aligned>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	4604      	mov	r4, r0
 8009780:	d14d      	bne.n	800981e <_malloc_r+0xde>
 8009782:	6834      	ldr	r4, [r6, #0]
 8009784:	4626      	mov	r6, r4
 8009786:	2e00      	cmp	r6, #0
 8009788:	d140      	bne.n	800980c <_malloc_r+0xcc>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	4631      	mov	r1, r6
 800978e:	4638      	mov	r0, r7
 8009790:	eb04 0803 	add.w	r8, r4, r3
 8009794:	f000 fd12 	bl	800a1bc <_sbrk_r>
 8009798:	4580      	cmp	r8, r0
 800979a:	d13a      	bne.n	8009812 <_malloc_r+0xd2>
 800979c:	6821      	ldr	r1, [r4, #0]
 800979e:	3503      	adds	r5, #3
 80097a0:	1a6d      	subs	r5, r5, r1
 80097a2:	f025 0503 	bic.w	r5, r5, #3
 80097a6:	3508      	adds	r5, #8
 80097a8:	2d0c      	cmp	r5, #12
 80097aa:	bf38      	it	cc
 80097ac:	250c      	movcc	r5, #12
 80097ae:	4638      	mov	r0, r7
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7ff ffa5 	bl	8009700 <sbrk_aligned>
 80097b6:	3001      	adds	r0, #1
 80097b8:	d02b      	beq.n	8009812 <_malloc_r+0xd2>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	442b      	add	r3, r5
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	e00e      	b.n	80097e0 <_malloc_r+0xa0>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	1b52      	subs	r2, r2, r5
 80097c6:	d41e      	bmi.n	8009806 <_malloc_r+0xc6>
 80097c8:	2a0b      	cmp	r2, #11
 80097ca:	d916      	bls.n	80097fa <_malloc_r+0xba>
 80097cc:	1961      	adds	r1, r4, r5
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	6025      	str	r5, [r4, #0]
 80097d2:	bf18      	it	ne
 80097d4:	6059      	strne	r1, [r3, #4]
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	bf08      	it	eq
 80097da:	6031      	streq	r1, [r6, #0]
 80097dc:	5162      	str	r2, [r4, r5]
 80097de:	604b      	str	r3, [r1, #4]
 80097e0:	4638      	mov	r0, r7
 80097e2:	f104 060b 	add.w	r6, r4, #11
 80097e6:	f001 fce9 	bl	800b1bc <__malloc_unlock>
 80097ea:	f026 0607 	bic.w	r6, r6, #7
 80097ee:	1d23      	adds	r3, r4, #4
 80097f0:	1af2      	subs	r2, r6, r3
 80097f2:	d0b6      	beq.n	8009762 <_malloc_r+0x22>
 80097f4:	1b9b      	subs	r3, r3, r6
 80097f6:	50a3      	str	r3, [r4, r2]
 80097f8:	e7b3      	b.n	8009762 <_malloc_r+0x22>
 80097fa:	6862      	ldr	r2, [r4, #4]
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	bf0c      	ite	eq
 8009800:	6032      	streq	r2, [r6, #0]
 8009802:	605a      	strne	r2, [r3, #4]
 8009804:	e7ec      	b.n	80097e0 <_malloc_r+0xa0>
 8009806:	4623      	mov	r3, r4
 8009808:	6864      	ldr	r4, [r4, #4]
 800980a:	e7b2      	b.n	8009772 <_malloc_r+0x32>
 800980c:	4634      	mov	r4, r6
 800980e:	6876      	ldr	r6, [r6, #4]
 8009810:	e7b9      	b.n	8009786 <_malloc_r+0x46>
 8009812:	230c      	movs	r3, #12
 8009814:	4638      	mov	r0, r7
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	f001 fcd0 	bl	800b1bc <__malloc_unlock>
 800981c:	e7a1      	b.n	8009762 <_malloc_r+0x22>
 800981e:	6025      	str	r5, [r4, #0]
 8009820:	e7de      	b.n	80097e0 <_malloc_r+0xa0>
 8009822:	bf00      	nop
 8009824:	20001df8 	.word	0x20001df8

08009828 <__cvt>:
 8009828:	2b00      	cmp	r3, #0
 800982a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982e:	461f      	mov	r7, r3
 8009830:	bfbb      	ittet	lt
 8009832:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009836:	461f      	movlt	r7, r3
 8009838:	2300      	movge	r3, #0
 800983a:	232d      	movlt	r3, #45	; 0x2d
 800983c:	b088      	sub	sp, #32
 800983e:	4614      	mov	r4, r2
 8009840:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009842:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009844:	7013      	strb	r3, [r2, #0]
 8009846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009848:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800984c:	f023 0820 	bic.w	r8, r3, #32
 8009850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009854:	d005      	beq.n	8009862 <__cvt+0x3a>
 8009856:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800985a:	d100      	bne.n	800985e <__cvt+0x36>
 800985c:	3501      	adds	r5, #1
 800985e:	2302      	movs	r3, #2
 8009860:	e000      	b.n	8009864 <__cvt+0x3c>
 8009862:	2303      	movs	r3, #3
 8009864:	aa07      	add	r2, sp, #28
 8009866:	9204      	str	r2, [sp, #16]
 8009868:	aa06      	add	r2, sp, #24
 800986a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800986e:	e9cd 3500 	strd	r3, r5, [sp]
 8009872:	4622      	mov	r2, r4
 8009874:	463b      	mov	r3, r7
 8009876:	f000 fdc3 	bl	800a400 <_dtoa_r>
 800987a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800987e:	4606      	mov	r6, r0
 8009880:	d102      	bne.n	8009888 <__cvt+0x60>
 8009882:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009884:	07db      	lsls	r3, r3, #31
 8009886:	d522      	bpl.n	80098ce <__cvt+0xa6>
 8009888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800988c:	eb06 0905 	add.w	r9, r6, r5
 8009890:	d110      	bne.n	80098b4 <__cvt+0x8c>
 8009892:	7833      	ldrb	r3, [r6, #0]
 8009894:	2b30      	cmp	r3, #48	; 0x30
 8009896:	d10a      	bne.n	80098ae <__cvt+0x86>
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	4620      	mov	r0, r4
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f7 f89a 	bl	80009d8 <__aeabi_dcmpeq>
 80098a4:	b918      	cbnz	r0, 80098ae <__cvt+0x86>
 80098a6:	f1c5 0501 	rsb	r5, r5, #1
 80098aa:	f8ca 5000 	str.w	r5, [sl]
 80098ae:	f8da 3000 	ldr.w	r3, [sl]
 80098b2:	4499      	add	r9, r3
 80098b4:	2200      	movs	r2, #0
 80098b6:	2300      	movs	r3, #0
 80098b8:	4620      	mov	r0, r4
 80098ba:	4639      	mov	r1, r7
 80098bc:	f7f7 f88c 	bl	80009d8 <__aeabi_dcmpeq>
 80098c0:	b108      	cbz	r0, 80098c6 <__cvt+0x9e>
 80098c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80098c6:	2230      	movs	r2, #48	; 0x30
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	454b      	cmp	r3, r9
 80098cc:	d307      	bcc.n	80098de <__cvt+0xb6>
 80098ce:	4630      	mov	r0, r6
 80098d0:	9b07      	ldr	r3, [sp, #28]
 80098d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80098d4:	1b9b      	subs	r3, r3, r6
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	b008      	add	sp, #32
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	1c59      	adds	r1, r3, #1
 80098e0:	9107      	str	r1, [sp, #28]
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e7f0      	b.n	80098c8 <__cvt+0xa0>

080098e6 <__exponent>:
 80098e6:	4603      	mov	r3, r0
 80098e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ea:	2900      	cmp	r1, #0
 80098ec:	f803 2b02 	strb.w	r2, [r3], #2
 80098f0:	bfb6      	itet	lt
 80098f2:	222d      	movlt	r2, #45	; 0x2d
 80098f4:	222b      	movge	r2, #43	; 0x2b
 80098f6:	4249      	neglt	r1, r1
 80098f8:	2909      	cmp	r1, #9
 80098fa:	7042      	strb	r2, [r0, #1]
 80098fc:	dd2b      	ble.n	8009956 <__exponent+0x70>
 80098fe:	f10d 0407 	add.w	r4, sp, #7
 8009902:	46a4      	mov	ip, r4
 8009904:	270a      	movs	r7, #10
 8009906:	fb91 f6f7 	sdiv	r6, r1, r7
 800990a:	460a      	mov	r2, r1
 800990c:	46a6      	mov	lr, r4
 800990e:	fb07 1516 	mls	r5, r7, r6, r1
 8009912:	2a63      	cmp	r2, #99	; 0x63
 8009914:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009918:	4631      	mov	r1, r6
 800991a:	f104 34ff 	add.w	r4, r4, #4294967295
 800991e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009922:	dcf0      	bgt.n	8009906 <__exponent+0x20>
 8009924:	3130      	adds	r1, #48	; 0x30
 8009926:	f1ae 0502 	sub.w	r5, lr, #2
 800992a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800992e:	4629      	mov	r1, r5
 8009930:	1c44      	adds	r4, r0, #1
 8009932:	4561      	cmp	r1, ip
 8009934:	d30a      	bcc.n	800994c <__exponent+0x66>
 8009936:	f10d 0209 	add.w	r2, sp, #9
 800993a:	eba2 020e 	sub.w	r2, r2, lr
 800993e:	4565      	cmp	r5, ip
 8009940:	bf88      	it	hi
 8009942:	2200      	movhi	r2, #0
 8009944:	4413      	add	r3, r2
 8009946:	1a18      	subs	r0, r3, r0
 8009948:	b003      	add	sp, #12
 800994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009950:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009954:	e7ed      	b.n	8009932 <__exponent+0x4c>
 8009956:	2330      	movs	r3, #48	; 0x30
 8009958:	3130      	adds	r1, #48	; 0x30
 800995a:	7083      	strb	r3, [r0, #2]
 800995c:	70c1      	strb	r1, [r0, #3]
 800995e:	1d03      	adds	r3, r0, #4
 8009960:	e7f1      	b.n	8009946 <__exponent+0x60>
	...

08009964 <_printf_float>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	b091      	sub	sp, #68	; 0x44
 800996a:	460c      	mov	r4, r1
 800996c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009970:	4616      	mov	r6, r2
 8009972:	461f      	mov	r7, r3
 8009974:	4605      	mov	r5, r0
 8009976:	f001 fbef 	bl	800b158 <_localeconv_r>
 800997a:	6803      	ldr	r3, [r0, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	f7f6 fbfe 	bl	8000180 <strlen>
 8009984:	2300      	movs	r3, #0
 8009986:	930e      	str	r3, [sp, #56]	; 0x38
 8009988:	f8d8 3000 	ldr.w	r3, [r8]
 800998c:	900a      	str	r0, [sp, #40]	; 0x28
 800998e:	3307      	adds	r3, #7
 8009990:	f023 0307 	bic.w	r3, r3, #7
 8009994:	f103 0208 	add.w	r2, r3, #8
 8009998:	f894 9018 	ldrb.w	r9, [r4, #24]
 800999c:	f8d4 b000 	ldr.w	fp, [r4]
 80099a0:	f8c8 2000 	str.w	r2, [r8]
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80099b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80099b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	4640      	mov	r0, r8
 80099bc:	4b9c      	ldr	r3, [pc, #624]	; (8009c30 <_printf_float+0x2cc>)
 80099be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099c0:	f7f7 f83c 	bl	8000a3c <__aeabi_dcmpun>
 80099c4:	bb70      	cbnz	r0, 8009a24 <_printf_float+0xc0>
 80099c6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ca:	4640      	mov	r0, r8
 80099cc:	4b98      	ldr	r3, [pc, #608]	; (8009c30 <_printf_float+0x2cc>)
 80099ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099d0:	f7f7 f816 	bl	8000a00 <__aeabi_dcmple>
 80099d4:	bb30      	cbnz	r0, 8009a24 <_printf_float+0xc0>
 80099d6:	2200      	movs	r2, #0
 80099d8:	2300      	movs	r3, #0
 80099da:	4640      	mov	r0, r8
 80099dc:	4651      	mov	r1, sl
 80099de:	f7f7 f805 	bl	80009ec <__aeabi_dcmplt>
 80099e2:	b110      	cbz	r0, 80099ea <_printf_float+0x86>
 80099e4:	232d      	movs	r3, #45	; 0x2d
 80099e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ea:	4b92      	ldr	r3, [pc, #584]	; (8009c34 <_printf_float+0x2d0>)
 80099ec:	4892      	ldr	r0, [pc, #584]	; (8009c38 <_printf_float+0x2d4>)
 80099ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80099f2:	bf94      	ite	ls
 80099f4:	4698      	movls	r8, r3
 80099f6:	4680      	movhi	r8, r0
 80099f8:	2303      	movs	r3, #3
 80099fa:	f04f 0a00 	mov.w	sl, #0
 80099fe:	6123      	str	r3, [r4, #16]
 8009a00:	f02b 0304 	bic.w	r3, fp, #4
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	4633      	mov	r3, r6
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	9700      	str	r7, [sp, #0]
 8009a0e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009a10:	f000 f9d4 	bl	8009dbc <_printf_common>
 8009a14:	3001      	adds	r0, #1
 8009a16:	f040 8090 	bne.w	8009b3a <_printf_float+0x1d6>
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1e:	b011      	add	sp, #68	; 0x44
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a24:	4642      	mov	r2, r8
 8009a26:	4653      	mov	r3, sl
 8009a28:	4640      	mov	r0, r8
 8009a2a:	4651      	mov	r1, sl
 8009a2c:	f7f7 f806 	bl	8000a3c <__aeabi_dcmpun>
 8009a30:	b148      	cbz	r0, 8009a46 <_printf_float+0xe2>
 8009a32:	f1ba 0f00 	cmp.w	sl, #0
 8009a36:	bfb8      	it	lt
 8009a38:	232d      	movlt	r3, #45	; 0x2d
 8009a3a:	4880      	ldr	r0, [pc, #512]	; (8009c3c <_printf_float+0x2d8>)
 8009a3c:	bfb8      	it	lt
 8009a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a42:	4b7f      	ldr	r3, [pc, #508]	; (8009c40 <_printf_float+0x2dc>)
 8009a44:	e7d3      	b.n	80099ee <_printf_float+0x8a>
 8009a46:	6863      	ldr	r3, [r4, #4]
 8009a48:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	d142      	bne.n	8009ad6 <_printf_float+0x172>
 8009a50:	2306      	movs	r3, #6
 8009a52:	6063      	str	r3, [r4, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	9206      	str	r2, [sp, #24]
 8009a58:	aa0e      	add	r2, sp, #56	; 0x38
 8009a5a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009a5e:	aa0d      	add	r2, sp, #52	; 0x34
 8009a60:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009a64:	9203      	str	r2, [sp, #12]
 8009a66:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009a6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	6863      	ldr	r3, [r4, #4]
 8009a72:	4642      	mov	r2, r8
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4628      	mov	r0, r5
 8009a78:	4653      	mov	r3, sl
 8009a7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a7c:	f7ff fed4 	bl	8009828 <__cvt>
 8009a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a82:	4680      	mov	r8, r0
 8009a84:	2947      	cmp	r1, #71	; 0x47
 8009a86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a88:	d108      	bne.n	8009a9c <_printf_float+0x138>
 8009a8a:	1cc8      	adds	r0, r1, #3
 8009a8c:	db02      	blt.n	8009a94 <_printf_float+0x130>
 8009a8e:	6863      	ldr	r3, [r4, #4]
 8009a90:	4299      	cmp	r1, r3
 8009a92:	dd40      	ble.n	8009b16 <_printf_float+0x1b2>
 8009a94:	f1a9 0902 	sub.w	r9, r9, #2
 8009a98:	fa5f f989 	uxtb.w	r9, r9
 8009a9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009aa0:	d81f      	bhi.n	8009ae2 <_printf_float+0x17e>
 8009aa2:	464a      	mov	r2, r9
 8009aa4:	3901      	subs	r1, #1
 8009aa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009aaa:	910d      	str	r1, [sp, #52]	; 0x34
 8009aac:	f7ff ff1b 	bl	80098e6 <__exponent>
 8009ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ab2:	4682      	mov	sl, r0
 8009ab4:	1813      	adds	r3, r2, r0
 8009ab6:	2a01      	cmp	r2, #1
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	dc02      	bgt.n	8009ac2 <_printf_float+0x15e>
 8009abc:	6822      	ldr	r2, [r4, #0]
 8009abe:	07d2      	lsls	r2, r2, #31
 8009ac0:	d501      	bpl.n	8009ac6 <_printf_float+0x162>
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d09b      	beq.n	8009a06 <_printf_float+0xa2>
 8009ace:	232d      	movs	r3, #45	; 0x2d
 8009ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad4:	e797      	b.n	8009a06 <_printf_float+0xa2>
 8009ad6:	2947      	cmp	r1, #71	; 0x47
 8009ad8:	d1bc      	bne.n	8009a54 <_printf_float+0xf0>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1ba      	bne.n	8009a54 <_printf_float+0xf0>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e7b7      	b.n	8009a52 <_printf_float+0xee>
 8009ae2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009ae6:	d118      	bne.n	8009b1a <_printf_float+0x1b6>
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	6863      	ldr	r3, [r4, #4]
 8009aec:	dd0b      	ble.n	8009b06 <_printf_float+0x1a2>
 8009aee:	6121      	str	r1, [r4, #16]
 8009af0:	b913      	cbnz	r3, 8009af8 <_printf_float+0x194>
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	07d0      	lsls	r0, r2, #31
 8009af6:	d502      	bpl.n	8009afe <_printf_float+0x19a>
 8009af8:	3301      	adds	r3, #1
 8009afa:	440b      	add	r3, r1
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	f04f 0a00 	mov.w	sl, #0
 8009b02:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b04:	e7df      	b.n	8009ac6 <_printf_float+0x162>
 8009b06:	b913      	cbnz	r3, 8009b0e <_printf_float+0x1aa>
 8009b08:	6822      	ldr	r2, [r4, #0]
 8009b0a:	07d2      	lsls	r2, r2, #31
 8009b0c:	d501      	bpl.n	8009b12 <_printf_float+0x1ae>
 8009b0e:	3302      	adds	r3, #2
 8009b10:	e7f4      	b.n	8009afc <_printf_float+0x198>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7f2      	b.n	8009afc <_printf_float+0x198>
 8009b16:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b1c:	4299      	cmp	r1, r3
 8009b1e:	db05      	blt.n	8009b2c <_printf_float+0x1c8>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	6121      	str	r1, [r4, #16]
 8009b24:	07d8      	lsls	r0, r3, #31
 8009b26:	d5ea      	bpl.n	8009afe <_printf_float+0x19a>
 8009b28:	1c4b      	adds	r3, r1, #1
 8009b2a:	e7e7      	b.n	8009afc <_printf_float+0x198>
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	bfcc      	ite	gt
 8009b30:	2201      	movgt	r2, #1
 8009b32:	f1c1 0202 	rsble	r2, r1, #2
 8009b36:	4413      	add	r3, r2
 8009b38:	e7e0      	b.n	8009afc <_printf_float+0x198>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	055a      	lsls	r2, r3, #21
 8009b3e:	d407      	bmi.n	8009b50 <_printf_float+0x1ec>
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	4642      	mov	r2, r8
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d12b      	bne.n	8009ba6 <_printf_float+0x242>
 8009b4e:	e764      	b.n	8009a1a <_printf_float+0xb6>
 8009b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b54:	f240 80dd 	bls.w	8009d12 <_printf_float+0x3ae>
 8009b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f7f6 ff3a 	bl	80009d8 <__aeabi_dcmpeq>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d033      	beq.n	8009bd0 <_printf_float+0x26c>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	4a35      	ldr	r2, [pc, #212]	; (8009c44 <_printf_float+0x2e0>)
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	f43f af51 	beq.w	8009a1a <_printf_float+0xb6>
 8009b78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	db02      	blt.n	8009b86 <_printf_float+0x222>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	07d8      	lsls	r0, r3, #31
 8009b84:	d50f      	bpl.n	8009ba6 <_printf_float+0x242>
 8009b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f af42 	beq.w	8009a1a <_printf_float+0xb6>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	f104 091a 	add.w	r9, r4, #26
 8009b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4543      	cmp	r3, r8
 8009ba4:	dc09      	bgt.n	8009bba <_printf_float+0x256>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	079b      	lsls	r3, r3, #30
 8009baa:	f100 8102 	bmi.w	8009db2 <_printf_float+0x44e>
 8009bae:	68e0      	ldr	r0, [r4, #12]
 8009bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	bfb8      	it	lt
 8009bb6:	4618      	movlt	r0, r3
 8009bb8:	e731      	b.n	8009a1e <_printf_float+0xba>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	f43f af28 	beq.w	8009a1a <_printf_float+0xb6>
 8009bca:	f108 0801 	add.w	r8, r8, #1
 8009bce:	e7e6      	b.n	8009b9e <_printf_float+0x23a>
 8009bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dc38      	bgt.n	8009c48 <_printf_float+0x2e4>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <_printf_float+0x2e0>)
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f af1a 	beq.w	8009a1a <_printf_float+0xb6>
 8009be6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009bea:	4313      	orrs	r3, r2
 8009bec:	d102      	bne.n	8009bf4 <_printf_float+0x290>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	07d9      	lsls	r1, r3, #31
 8009bf2:	d5d8      	bpl.n	8009ba6 <_printf_float+0x242>
 8009bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f43f af0b 	beq.w	8009a1a <_printf_float+0xb6>
 8009c04:	f04f 0900 	mov.w	r9, #0
 8009c08:	f104 0a1a 	add.w	sl, r4, #26
 8009c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0e:	425b      	negs	r3, r3
 8009c10:	454b      	cmp	r3, r9
 8009c12:	dc01      	bgt.n	8009c18 <_printf_float+0x2b4>
 8009c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c16:	e794      	b.n	8009b42 <_printf_float+0x1de>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	3001      	adds	r0, #1
 8009c24:	f43f aef9 	beq.w	8009a1a <_printf_float+0xb6>
 8009c28:	f109 0901 	add.w	r9, r9, #1
 8009c2c:	e7ee      	b.n	8009c0c <_printf_float+0x2a8>
 8009c2e:	bf00      	nop
 8009c30:	7fefffff 	.word	0x7fefffff
 8009c34:	0800ca48 	.word	0x0800ca48
 8009c38:	0800ca4c 	.word	0x0800ca4c
 8009c3c:	0800ca54 	.word	0x0800ca54
 8009c40:	0800ca50 	.word	0x0800ca50
 8009c44:	0800ca58 	.word	0x0800ca58
 8009c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	bfa8      	it	ge
 8009c50:	461a      	movge	r2, r3
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	4691      	mov	r9, r2
 8009c56:	dc37      	bgt.n	8009cc8 <_printf_float+0x364>
 8009c58:	f04f 0b00 	mov.w	fp, #0
 8009c5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c60:	f104 021a 	add.w	r2, r4, #26
 8009c64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009c68:	ebaa 0309 	sub.w	r3, sl, r9
 8009c6c:	455b      	cmp	r3, fp
 8009c6e:	dc33      	bgt.n	8009cd8 <_printf_float+0x374>
 8009c70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c74:	429a      	cmp	r2, r3
 8009c76:	db3b      	blt.n	8009cf0 <_printf_float+0x38c>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	07da      	lsls	r2, r3, #31
 8009c7c:	d438      	bmi.n	8009cf0 <_printf_float+0x38c>
 8009c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c82:	eba3 020a 	sub.w	r2, r3, sl
 8009c86:	eba3 0901 	sub.w	r9, r3, r1
 8009c8a:	4591      	cmp	r9, r2
 8009c8c:	bfa8      	it	ge
 8009c8e:	4691      	movge	r9, r2
 8009c90:	f1b9 0f00 	cmp.w	r9, #0
 8009c94:	dc34      	bgt.n	8009d00 <_printf_float+0x39c>
 8009c96:	f04f 0800 	mov.w	r8, #0
 8009c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c9e:	f104 0a1a 	add.w	sl, r4, #26
 8009ca2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	eba3 0309 	sub.w	r3, r3, r9
 8009cac:	4543      	cmp	r3, r8
 8009cae:	f77f af7a 	ble.w	8009ba6 <_printf_float+0x242>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f43f aeac 	beq.w	8009a1a <_printf_float+0xb6>
 8009cc2:	f108 0801 	add.w	r8, r8, #1
 8009cc6:	e7ec      	b.n	8009ca2 <_printf_float+0x33e>
 8009cc8:	4613      	mov	r3, r2
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4642      	mov	r2, r8
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d1c0      	bne.n	8009c58 <_printf_float+0x2f4>
 8009cd6:	e6a0      	b.n	8009a1a <_printf_float+0xb6>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4628      	mov	r0, r5
 8009cde:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f ae99 	beq.w	8009a1a <_printf_float+0xb6>
 8009ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cea:	f10b 0b01 	add.w	fp, fp, #1
 8009cee:	e7b9      	b.n	8009c64 <_printf_float+0x300>
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	d1bf      	bne.n	8009c7e <_printf_float+0x31a>
 8009cfe:	e68c      	b.n	8009a1a <_printf_float+0xb6>
 8009d00:	464b      	mov	r3, r9
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	eb08 020a 	add.w	r2, r8, sl
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d1c2      	bne.n	8009c96 <_printf_float+0x332>
 8009d10:	e683      	b.n	8009a1a <_printf_float+0xb6>
 8009d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d14:	2a01      	cmp	r2, #1
 8009d16:	dc01      	bgt.n	8009d1c <_printf_float+0x3b8>
 8009d18:	07db      	lsls	r3, r3, #31
 8009d1a:	d537      	bpl.n	8009d8c <_printf_float+0x428>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4642      	mov	r2, r8
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f ae77 	beq.w	8009a1a <_printf_float+0xb6>
 8009d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f ae6f 	beq.w	8009a1a <_printf_float+0xb6>
 8009d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d40:	2200      	movs	r2, #0
 8009d42:	2300      	movs	r3, #0
 8009d44:	f7f6 fe48 	bl	80009d8 <__aeabi_dcmpeq>
 8009d48:	b9d8      	cbnz	r0, 8009d82 <_printf_float+0x41e>
 8009d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d4c:	f108 0201 	add.w	r2, r8, #1
 8009d50:	3b01      	subs	r3, #1
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d10e      	bne.n	8009d7a <_printf_float+0x416>
 8009d5c:	e65d      	b.n	8009a1a <_printf_float+0xb6>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	464a      	mov	r2, r9
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae56 	beq.w	8009a1a <_printf_float+0xb6>
 8009d6e:	f108 0801 	add.w	r8, r8, #1
 8009d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d74:	3b01      	subs	r3, #1
 8009d76:	4543      	cmp	r3, r8
 8009d78:	dcf1      	bgt.n	8009d5e <_printf_float+0x3fa>
 8009d7a:	4653      	mov	r3, sl
 8009d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d80:	e6e0      	b.n	8009b44 <_printf_float+0x1e0>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	f104 091a 	add.w	r9, r4, #26
 8009d8a:	e7f2      	b.n	8009d72 <_printf_float+0x40e>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4642      	mov	r2, r8
 8009d90:	e7df      	b.n	8009d52 <_printf_float+0x3ee>
 8009d92:	2301      	movs	r3, #1
 8009d94:	464a      	mov	r2, r9
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f ae3c 	beq.w	8009a1a <_printf_float+0xb6>
 8009da2:	f108 0801 	add.w	r8, r8, #1
 8009da6:	68e3      	ldr	r3, [r4, #12]
 8009da8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009daa:	1a5b      	subs	r3, r3, r1
 8009dac:	4543      	cmp	r3, r8
 8009dae:	dcf0      	bgt.n	8009d92 <_printf_float+0x42e>
 8009db0:	e6fd      	b.n	8009bae <_printf_float+0x24a>
 8009db2:	f04f 0800 	mov.w	r8, #0
 8009db6:	f104 0919 	add.w	r9, r4, #25
 8009dba:	e7f4      	b.n	8009da6 <_printf_float+0x442>

08009dbc <_printf_common>:
 8009dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	4699      	mov	r9, r3
 8009dc4:	688a      	ldr	r2, [r1, #8]
 8009dc6:	690b      	ldr	r3, [r1, #16]
 8009dc8:	4607      	mov	r7, r0
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	bfb8      	it	lt
 8009dce:	4613      	movlt	r3, r2
 8009dd0:	6033      	str	r3, [r6, #0]
 8009dd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ddc:	b10a      	cbz	r2, 8009de2 <_printf_common+0x26>
 8009dde:	3301      	adds	r3, #1
 8009de0:	6033      	str	r3, [r6, #0]
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	0699      	lsls	r1, r3, #26
 8009de6:	bf42      	ittt	mi
 8009de8:	6833      	ldrmi	r3, [r6, #0]
 8009dea:	3302      	addmi	r3, #2
 8009dec:	6033      	strmi	r3, [r6, #0]
 8009dee:	6825      	ldr	r5, [r4, #0]
 8009df0:	f015 0506 	ands.w	r5, r5, #6
 8009df4:	d106      	bne.n	8009e04 <_printf_common+0x48>
 8009df6:	f104 0a19 	add.w	sl, r4, #25
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	6832      	ldr	r2, [r6, #0]
 8009dfe:	1a9b      	subs	r3, r3, r2
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	dc28      	bgt.n	8009e56 <_printf_common+0x9a>
 8009e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e08:	1e13      	subs	r3, r2, #0
 8009e0a:	6822      	ldr	r2, [r4, #0]
 8009e0c:	bf18      	it	ne
 8009e0e:	2301      	movne	r3, #1
 8009e10:	0692      	lsls	r2, r2, #26
 8009e12:	d42d      	bmi.n	8009e70 <_printf_common+0xb4>
 8009e14:	4649      	mov	r1, r9
 8009e16:	4638      	mov	r0, r7
 8009e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e1c:	47c0      	blx	r8
 8009e1e:	3001      	adds	r0, #1
 8009e20:	d020      	beq.n	8009e64 <_printf_common+0xa8>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	68e5      	ldr	r5, [r4, #12]
 8009e26:	f003 0306 	and.w	r3, r3, #6
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	bf18      	it	ne
 8009e2e:	2500      	movne	r5, #0
 8009e30:	6832      	ldr	r2, [r6, #0]
 8009e32:	f04f 0600 	mov.w	r6, #0
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	bf08      	it	eq
 8009e3a:	1aad      	subeq	r5, r5, r2
 8009e3c:	6922      	ldr	r2, [r4, #16]
 8009e3e:	bf08      	it	eq
 8009e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e44:	4293      	cmp	r3, r2
 8009e46:	bfc4      	itt	gt
 8009e48:	1a9b      	subgt	r3, r3, r2
 8009e4a:	18ed      	addgt	r5, r5, r3
 8009e4c:	341a      	adds	r4, #26
 8009e4e:	42b5      	cmp	r5, r6
 8009e50:	d11a      	bne.n	8009e88 <_printf_common+0xcc>
 8009e52:	2000      	movs	r0, #0
 8009e54:	e008      	b.n	8009e68 <_printf_common+0xac>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4652      	mov	r2, sl
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	47c0      	blx	r8
 8009e60:	3001      	adds	r0, #1
 8009e62:	d103      	bne.n	8009e6c <_printf_common+0xb0>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	e7c4      	b.n	8009dfa <_printf_common+0x3e>
 8009e70:	2030      	movs	r0, #48	; 0x30
 8009e72:	18e1      	adds	r1, r4, r3
 8009e74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e7e:	4422      	add	r2, r4
 8009e80:	3302      	adds	r3, #2
 8009e82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e86:	e7c5      	b.n	8009e14 <_printf_common+0x58>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	4638      	mov	r0, r7
 8009e90:	47c0      	blx	r8
 8009e92:	3001      	adds	r0, #1
 8009e94:	d0e6      	beq.n	8009e64 <_printf_common+0xa8>
 8009e96:	3601      	adds	r6, #1
 8009e98:	e7d9      	b.n	8009e4e <_printf_common+0x92>
	...

08009e9c <_printf_i>:
 8009e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea0:	7e0f      	ldrb	r7, [r1, #24]
 8009ea2:	4691      	mov	r9, r2
 8009ea4:	2f78      	cmp	r7, #120	; 0x78
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	469a      	mov	sl, r3
 8009eac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009eae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eb2:	d807      	bhi.n	8009ec4 <_printf_i+0x28>
 8009eb4:	2f62      	cmp	r7, #98	; 0x62
 8009eb6:	d80a      	bhi.n	8009ece <_printf_i+0x32>
 8009eb8:	2f00      	cmp	r7, #0
 8009eba:	f000 80d9 	beq.w	800a070 <_printf_i+0x1d4>
 8009ebe:	2f58      	cmp	r7, #88	; 0x58
 8009ec0:	f000 80a4 	beq.w	800a00c <_printf_i+0x170>
 8009ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ecc:	e03a      	b.n	8009f44 <_printf_i+0xa8>
 8009ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ed2:	2b15      	cmp	r3, #21
 8009ed4:	d8f6      	bhi.n	8009ec4 <_printf_i+0x28>
 8009ed6:	a101      	add	r1, pc, #4	; (adr r1, 8009edc <_printf_i+0x40>)
 8009ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009edc:	08009f35 	.word	0x08009f35
 8009ee0:	08009f49 	.word	0x08009f49
 8009ee4:	08009ec5 	.word	0x08009ec5
 8009ee8:	08009ec5 	.word	0x08009ec5
 8009eec:	08009ec5 	.word	0x08009ec5
 8009ef0:	08009ec5 	.word	0x08009ec5
 8009ef4:	08009f49 	.word	0x08009f49
 8009ef8:	08009ec5 	.word	0x08009ec5
 8009efc:	08009ec5 	.word	0x08009ec5
 8009f00:	08009ec5 	.word	0x08009ec5
 8009f04:	08009ec5 	.word	0x08009ec5
 8009f08:	0800a057 	.word	0x0800a057
 8009f0c:	08009f79 	.word	0x08009f79
 8009f10:	0800a039 	.word	0x0800a039
 8009f14:	08009ec5 	.word	0x08009ec5
 8009f18:	08009ec5 	.word	0x08009ec5
 8009f1c:	0800a079 	.word	0x0800a079
 8009f20:	08009ec5 	.word	0x08009ec5
 8009f24:	08009f79 	.word	0x08009f79
 8009f28:	08009ec5 	.word	0x08009ec5
 8009f2c:	08009ec5 	.word	0x08009ec5
 8009f30:	0800a041 	.word	0x0800a041
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	1d1a      	adds	r2, r3, #4
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	602a      	str	r2, [r5, #0]
 8009f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0a4      	b.n	800a092 <_printf_i+0x1f6>
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	6829      	ldr	r1, [r5, #0]
 8009f4c:	0606      	lsls	r6, r0, #24
 8009f4e:	f101 0304 	add.w	r3, r1, #4
 8009f52:	d50a      	bpl.n	8009f6a <_printf_i+0xce>
 8009f54:	680e      	ldr	r6, [r1, #0]
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	da03      	bge.n	8009f64 <_printf_i+0xc8>
 8009f5c:	232d      	movs	r3, #45	; 0x2d
 8009f5e:	4276      	negs	r6, r6
 8009f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f64:	230a      	movs	r3, #10
 8009f66:	485e      	ldr	r0, [pc, #376]	; (800a0e0 <_printf_i+0x244>)
 8009f68:	e019      	b.n	8009f9e <_printf_i+0x102>
 8009f6a:	680e      	ldr	r6, [r1, #0]
 8009f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f70:	602b      	str	r3, [r5, #0]
 8009f72:	bf18      	it	ne
 8009f74:	b236      	sxthne	r6, r6
 8009f76:	e7ef      	b.n	8009f58 <_printf_i+0xbc>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	6820      	ldr	r0, [r4, #0]
 8009f7c:	1d19      	adds	r1, r3, #4
 8009f7e:	6029      	str	r1, [r5, #0]
 8009f80:	0601      	lsls	r1, r0, #24
 8009f82:	d501      	bpl.n	8009f88 <_printf_i+0xec>
 8009f84:	681e      	ldr	r6, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <_printf_i+0xf2>
 8009f88:	0646      	lsls	r6, r0, #25
 8009f8a:	d5fb      	bpl.n	8009f84 <_printf_i+0xe8>
 8009f8c:	881e      	ldrh	r6, [r3, #0]
 8009f8e:	2f6f      	cmp	r7, #111	; 0x6f
 8009f90:	bf0c      	ite	eq
 8009f92:	2308      	moveq	r3, #8
 8009f94:	230a      	movne	r3, #10
 8009f96:	4852      	ldr	r0, [pc, #328]	; (800a0e0 <_printf_i+0x244>)
 8009f98:	2100      	movs	r1, #0
 8009f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f9e:	6865      	ldr	r5, [r4, #4]
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	bfa8      	it	ge
 8009fa4:	6821      	ldrge	r1, [r4, #0]
 8009fa6:	60a5      	str	r5, [r4, #8]
 8009fa8:	bfa4      	itt	ge
 8009faa:	f021 0104 	bicge.w	r1, r1, #4
 8009fae:	6021      	strge	r1, [r4, #0]
 8009fb0:	b90e      	cbnz	r6, 8009fb6 <_printf_i+0x11a>
 8009fb2:	2d00      	cmp	r5, #0
 8009fb4:	d04d      	beq.n	800a052 <_printf_i+0x1b6>
 8009fb6:	4615      	mov	r5, r2
 8009fb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fbc:	fb03 6711 	mls	r7, r3, r1, r6
 8009fc0:	5dc7      	ldrb	r7, [r0, r7]
 8009fc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fc6:	4637      	mov	r7, r6
 8009fc8:	42bb      	cmp	r3, r7
 8009fca:	460e      	mov	r6, r1
 8009fcc:	d9f4      	bls.n	8009fb8 <_printf_i+0x11c>
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	d10b      	bne.n	8009fea <_printf_i+0x14e>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	07de      	lsls	r6, r3, #31
 8009fd6:	d508      	bpl.n	8009fea <_printf_i+0x14e>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	6861      	ldr	r1, [r4, #4]
 8009fdc:	4299      	cmp	r1, r3
 8009fde:	bfde      	ittt	le
 8009fe0:	2330      	movle	r3, #48	; 0x30
 8009fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fea:	1b52      	subs	r2, r2, r5
 8009fec:	6122      	str	r2, [r4, #16]
 8009fee:	464b      	mov	r3, r9
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f8cd a000 	str.w	sl, [sp]
 8009ff8:	aa03      	add	r2, sp, #12
 8009ffa:	f7ff fedf 	bl	8009dbc <_printf_common>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d14c      	bne.n	800a09c <_printf_i+0x200>
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	b004      	add	sp, #16
 800a008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00c:	4834      	ldr	r0, [pc, #208]	; (800a0e0 <_printf_i+0x244>)
 800a00e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a012:	6829      	ldr	r1, [r5, #0]
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	f851 6b04 	ldr.w	r6, [r1], #4
 800a01a:	6029      	str	r1, [r5, #0]
 800a01c:	061d      	lsls	r5, r3, #24
 800a01e:	d514      	bpl.n	800a04a <_printf_i+0x1ae>
 800a020:	07df      	lsls	r7, r3, #31
 800a022:	bf44      	itt	mi
 800a024:	f043 0320 	orrmi.w	r3, r3, #32
 800a028:	6023      	strmi	r3, [r4, #0]
 800a02a:	b91e      	cbnz	r6, 800a034 <_printf_i+0x198>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	f023 0320 	bic.w	r3, r3, #32
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	2310      	movs	r3, #16
 800a036:	e7af      	b.n	8009f98 <_printf_i+0xfc>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	f043 0320 	orr.w	r3, r3, #32
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	2378      	movs	r3, #120	; 0x78
 800a042:	4828      	ldr	r0, [pc, #160]	; (800a0e4 <_printf_i+0x248>)
 800a044:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a048:	e7e3      	b.n	800a012 <_printf_i+0x176>
 800a04a:	0659      	lsls	r1, r3, #25
 800a04c:	bf48      	it	mi
 800a04e:	b2b6      	uxthmi	r6, r6
 800a050:	e7e6      	b.n	800a020 <_printf_i+0x184>
 800a052:	4615      	mov	r5, r2
 800a054:	e7bb      	b.n	8009fce <_printf_i+0x132>
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	6826      	ldr	r6, [r4, #0]
 800a05a:	1d18      	adds	r0, r3, #4
 800a05c:	6961      	ldr	r1, [r4, #20]
 800a05e:	6028      	str	r0, [r5, #0]
 800a060:	0635      	lsls	r5, r6, #24
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	d501      	bpl.n	800a06a <_printf_i+0x1ce>
 800a066:	6019      	str	r1, [r3, #0]
 800a068:	e002      	b.n	800a070 <_printf_i+0x1d4>
 800a06a:	0670      	lsls	r0, r6, #25
 800a06c:	d5fb      	bpl.n	800a066 <_printf_i+0x1ca>
 800a06e:	8019      	strh	r1, [r3, #0]
 800a070:	2300      	movs	r3, #0
 800a072:	4615      	mov	r5, r2
 800a074:	6123      	str	r3, [r4, #16]
 800a076:	e7ba      	b.n	8009fee <_printf_i+0x152>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	2100      	movs	r1, #0
 800a07c:	1d1a      	adds	r2, r3, #4
 800a07e:	602a      	str	r2, [r5, #0]
 800a080:	681d      	ldr	r5, [r3, #0]
 800a082:	6862      	ldr	r2, [r4, #4]
 800a084:	4628      	mov	r0, r5
 800a086:	f001 f885 	bl	800b194 <memchr>
 800a08a:	b108      	cbz	r0, 800a090 <_printf_i+0x1f4>
 800a08c:	1b40      	subs	r0, r0, r5
 800a08e:	6060      	str	r0, [r4, #4]
 800a090:	6863      	ldr	r3, [r4, #4]
 800a092:	6123      	str	r3, [r4, #16]
 800a094:	2300      	movs	r3, #0
 800a096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a09a:	e7a8      	b.n	8009fee <_printf_i+0x152>
 800a09c:	462a      	mov	r2, r5
 800a09e:	4649      	mov	r1, r9
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	47d0      	blx	sl
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d0ab      	beq.n	800a002 <_printf_i+0x166>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	079b      	lsls	r3, r3, #30
 800a0ae:	d413      	bmi.n	800a0d8 <_printf_i+0x23c>
 800a0b0:	68e0      	ldr	r0, [r4, #12]
 800a0b2:	9b03      	ldr	r3, [sp, #12]
 800a0b4:	4298      	cmp	r0, r3
 800a0b6:	bfb8      	it	lt
 800a0b8:	4618      	movlt	r0, r3
 800a0ba:	e7a4      	b.n	800a006 <_printf_i+0x16a>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4632      	mov	r2, r6
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	47d0      	blx	sl
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d09b      	beq.n	800a002 <_printf_i+0x166>
 800a0ca:	3501      	adds	r5, #1
 800a0cc:	68e3      	ldr	r3, [r4, #12]
 800a0ce:	9903      	ldr	r1, [sp, #12]
 800a0d0:	1a5b      	subs	r3, r3, r1
 800a0d2:	42ab      	cmp	r3, r5
 800a0d4:	dcf2      	bgt.n	800a0bc <_printf_i+0x220>
 800a0d6:	e7eb      	b.n	800a0b0 <_printf_i+0x214>
 800a0d8:	2500      	movs	r5, #0
 800a0da:	f104 0619 	add.w	r6, r4, #25
 800a0de:	e7f5      	b.n	800a0cc <_printf_i+0x230>
 800a0e0:	0800ca5a 	.word	0x0800ca5a
 800a0e4:	0800ca6b 	.word	0x0800ca6b

0800a0e8 <cleanup_glue>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	6809      	ldr	r1, [r1, #0]
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	b109      	cbz	r1, 800a0f6 <cleanup_glue+0xe>
 800a0f2:	f7ff fff9 	bl	800a0e8 <cleanup_glue>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0fe:	f001 bbf9 	b.w	800b8f4 <_free_r>
	...

0800a104 <_reclaim_reent>:
 800a104:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <_reclaim_reent+0xb4>)
 800a106:	b570      	push	{r4, r5, r6, lr}
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4604      	mov	r4, r0
 800a10c:	4283      	cmp	r3, r0
 800a10e:	d051      	beq.n	800a1b4 <_reclaim_reent+0xb0>
 800a110:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a112:	b143      	cbz	r3, 800a126 <_reclaim_reent+0x22>
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d14a      	bne.n	800a1b0 <_reclaim_reent+0xac>
 800a11a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a11c:	6819      	ldr	r1, [r3, #0]
 800a11e:	b111      	cbz	r1, 800a126 <_reclaim_reent+0x22>
 800a120:	4620      	mov	r0, r4
 800a122:	f001 fbe7 	bl	800b8f4 <_free_r>
 800a126:	6961      	ldr	r1, [r4, #20]
 800a128:	b111      	cbz	r1, 800a130 <_reclaim_reent+0x2c>
 800a12a:	4620      	mov	r0, r4
 800a12c:	f001 fbe2 	bl	800b8f4 <_free_r>
 800a130:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a132:	b111      	cbz	r1, 800a13a <_reclaim_reent+0x36>
 800a134:	4620      	mov	r0, r4
 800a136:	f001 fbdd 	bl	800b8f4 <_free_r>
 800a13a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a13c:	b111      	cbz	r1, 800a144 <_reclaim_reent+0x40>
 800a13e:	4620      	mov	r0, r4
 800a140:	f001 fbd8 	bl	800b8f4 <_free_r>
 800a144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a146:	b111      	cbz	r1, 800a14e <_reclaim_reent+0x4a>
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 fbd3 	bl	800b8f4 <_free_r>
 800a14e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a150:	b111      	cbz	r1, 800a158 <_reclaim_reent+0x54>
 800a152:	4620      	mov	r0, r4
 800a154:	f001 fbce 	bl	800b8f4 <_free_r>
 800a158:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a15a:	b111      	cbz	r1, 800a162 <_reclaim_reent+0x5e>
 800a15c:	4620      	mov	r0, r4
 800a15e:	f001 fbc9 	bl	800b8f4 <_free_r>
 800a162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a164:	b111      	cbz	r1, 800a16c <_reclaim_reent+0x68>
 800a166:	4620      	mov	r0, r4
 800a168:	f001 fbc4 	bl	800b8f4 <_free_r>
 800a16c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a16e:	b111      	cbz	r1, 800a176 <_reclaim_reent+0x72>
 800a170:	4620      	mov	r0, r4
 800a172:	f001 fbbf 	bl	800b8f4 <_free_r>
 800a176:	69a3      	ldr	r3, [r4, #24]
 800a178:	b1e3      	cbz	r3, 800a1b4 <_reclaim_reent+0xb0>
 800a17a:	4620      	mov	r0, r4
 800a17c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a17e:	4798      	blx	r3
 800a180:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a182:	b1b9      	cbz	r1, 800a1b4 <_reclaim_reent+0xb0>
 800a184:	4620      	mov	r0, r4
 800a186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a18a:	f7ff bfad 	b.w	800a0e8 <cleanup_glue>
 800a18e:	5949      	ldr	r1, [r1, r5]
 800a190:	b941      	cbnz	r1, 800a1a4 <_reclaim_reent+0xa0>
 800a192:	3504      	adds	r5, #4
 800a194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a196:	2d80      	cmp	r5, #128	; 0x80
 800a198:	68d9      	ldr	r1, [r3, #12]
 800a19a:	d1f8      	bne.n	800a18e <_reclaim_reent+0x8a>
 800a19c:	4620      	mov	r0, r4
 800a19e:	f001 fba9 	bl	800b8f4 <_free_r>
 800a1a2:	e7ba      	b.n	800a11a <_reclaim_reent+0x16>
 800a1a4:	680e      	ldr	r6, [r1, #0]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f001 fba4 	bl	800b8f4 <_free_r>
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	e7ef      	b.n	800a190 <_reclaim_reent+0x8c>
 800a1b0:	2500      	movs	r5, #0
 800a1b2:	e7ef      	b.n	800a194 <_reclaim_reent+0x90>
 800a1b4:	bd70      	pop	{r4, r5, r6, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000018 	.word	0x20000018

0800a1bc <_sbrk_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	2300      	movs	r3, #0
 800a1c0:	4d05      	ldr	r5, [pc, #20]	; (800a1d8 <_sbrk_r+0x1c>)
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	f7f8 ff38 	bl	800303c <_sbrk>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d102      	bne.n	800a1d6 <_sbrk_r+0x1a>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	b103      	cbz	r3, 800a1d6 <_sbrk_r+0x1a>
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	20001e00 	.word	0x20001e00

0800a1dc <siprintf>:
 800a1dc:	b40e      	push	{r1, r2, r3}
 800a1de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1e2:	b500      	push	{lr}
 800a1e4:	b09c      	sub	sp, #112	; 0x70
 800a1e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1e8:	9002      	str	r0, [sp, #8]
 800a1ea:	9006      	str	r0, [sp, #24]
 800a1ec:	9107      	str	r1, [sp, #28]
 800a1ee:	9104      	str	r1, [sp, #16]
 800a1f0:	4808      	ldr	r0, [pc, #32]	; (800a214 <siprintf+0x38>)
 800a1f2:	4909      	ldr	r1, [pc, #36]	; (800a218 <siprintf+0x3c>)
 800a1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f8:	9105      	str	r1, [sp, #20]
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	a902      	add	r1, sp, #8
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	f001 fc1c 	bl	800ba3c <_svfiprintf_r>
 800a204:	2200      	movs	r2, #0
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	b01c      	add	sp, #112	; 0x70
 800a20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a210:	b003      	add	sp, #12
 800a212:	4770      	bx	lr
 800a214:	20000018 	.word	0x20000018
 800a218:	ffff0208 	.word	0xffff0208

0800a21c <__sread>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	460c      	mov	r4, r1
 800a220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a224:	f001 fd0a 	bl	800bc3c <_read_r>
 800a228:	2800      	cmp	r0, #0
 800a22a:	bfab      	itete	ge
 800a22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a22e:	89a3      	ldrhlt	r3, [r4, #12]
 800a230:	181b      	addge	r3, r3, r0
 800a232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a236:	bfac      	ite	ge
 800a238:	6563      	strge	r3, [r4, #84]	; 0x54
 800a23a:	81a3      	strhlt	r3, [r4, #12]
 800a23c:	bd10      	pop	{r4, pc}

0800a23e <__swrite>:
 800a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	461f      	mov	r7, r3
 800a244:	898b      	ldrh	r3, [r1, #12]
 800a246:	4605      	mov	r5, r0
 800a248:	05db      	lsls	r3, r3, #23
 800a24a:	460c      	mov	r4, r1
 800a24c:	4616      	mov	r6, r2
 800a24e:	d505      	bpl.n	800a25c <__swrite+0x1e>
 800a250:	2302      	movs	r3, #2
 800a252:	2200      	movs	r2, #0
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	f000 ff82 	bl	800b160 <_lseek_r>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	4632      	mov	r2, r6
 800a260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	4628      	mov	r0, r5
 800a268:	463b      	mov	r3, r7
 800a26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	f000 b817 	b.w	800a2a4 <_write_r>

0800a276 <__sseek>:
 800a276:	b510      	push	{r4, lr}
 800a278:	460c      	mov	r4, r1
 800a27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a27e:	f000 ff6f 	bl	800b160 <_lseek_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	bf15      	itete	ne
 800a288:	6560      	strne	r0, [r4, #84]	; 0x54
 800a28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a292:	81a3      	strheq	r3, [r4, #12]
 800a294:	bf18      	it	ne
 800a296:	81a3      	strhne	r3, [r4, #12]
 800a298:	bd10      	pop	{r4, pc}

0800a29a <__sclose>:
 800a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29e:	f000 b813 	b.w	800a2c8 <_close_r>
	...

0800a2a4 <_write_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4d05      	ldr	r5, [pc, #20]	; (800a2c4 <_write_r+0x20>)
 800a2b0:	602a      	str	r2, [r5, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7f8 fe76 	bl	8002fa4 <_write>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_write_r+0x1e>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_write_r+0x1e>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20001e00 	.word	0x20001e00

0800a2c8 <_close_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4d05      	ldr	r5, [pc, #20]	; (800a2e4 <_close_r+0x1c>)
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	f7f8 fe82 	bl	8002fdc <_close>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_close_r+0x1a>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_close_r+0x1a>
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	20001e00 	.word	0x20001e00

0800a2e8 <quorem>:
 800a2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	6903      	ldr	r3, [r0, #16]
 800a2ee:	690c      	ldr	r4, [r1, #16]
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	f2c0 8082 	blt.w	800a3fc <quorem+0x114>
 800a2f8:	3c01      	subs	r4, #1
 800a2fa:	f100 0514 	add.w	r5, r0, #20
 800a2fe:	f101 0814 	add.w	r8, r1, #20
 800a302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a30c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a310:	3301      	adds	r3, #1
 800a312:	429a      	cmp	r2, r3
 800a314:	fbb2 f6f3 	udiv	r6, r2, r3
 800a318:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a31c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a320:	d331      	bcc.n	800a386 <quorem+0x9e>
 800a322:	f04f 0e00 	mov.w	lr, #0
 800a326:	4640      	mov	r0, r8
 800a328:	46ac      	mov	ip, r5
 800a32a:	46f2      	mov	sl, lr
 800a32c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a330:	b293      	uxth	r3, r2
 800a332:	fb06 e303 	mla	r3, r6, r3, lr
 800a336:	0c12      	lsrs	r2, r2, #16
 800a338:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	fb06 e202 	mla	r2, r6, r2, lr
 800a342:	ebaa 0303 	sub.w	r3, sl, r3
 800a346:	f8dc a000 	ldr.w	sl, [ip]
 800a34a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a34e:	fa1f fa8a 	uxth.w	sl, sl
 800a352:	4453      	add	r3, sl
 800a354:	f8dc a000 	ldr.w	sl, [ip]
 800a358:	b292      	uxth	r2, r2
 800a35a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a35e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a368:	4581      	cmp	r9, r0
 800a36a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a36e:	f84c 3b04 	str.w	r3, [ip], #4
 800a372:	d2db      	bcs.n	800a32c <quorem+0x44>
 800a374:	f855 300b 	ldr.w	r3, [r5, fp]
 800a378:	b92b      	cbnz	r3, 800a386 <quorem+0x9e>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	3b04      	subs	r3, #4
 800a37e:	429d      	cmp	r5, r3
 800a380:	461a      	mov	r2, r3
 800a382:	d32f      	bcc.n	800a3e4 <quorem+0xfc>
 800a384:	613c      	str	r4, [r7, #16]
 800a386:	4638      	mov	r0, r7
 800a388:	f001 f99c 	bl	800b6c4 <__mcmp>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	db25      	blt.n	800a3dc <quorem+0xf4>
 800a390:	4628      	mov	r0, r5
 800a392:	f04f 0c00 	mov.w	ip, #0
 800a396:	3601      	adds	r6, #1
 800a398:	f858 1b04 	ldr.w	r1, [r8], #4
 800a39c:	f8d0 e000 	ldr.w	lr, [r0]
 800a3a0:	b28b      	uxth	r3, r1
 800a3a2:	ebac 0303 	sub.w	r3, ip, r3
 800a3a6:	fa1f f28e 	uxth.w	r2, lr
 800a3aa:	4413      	add	r3, r2
 800a3ac:	0c0a      	lsrs	r2, r1, #16
 800a3ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3bc:	45c1      	cmp	r9, r8
 800a3be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3c2:	f840 3b04 	str.w	r3, [r0], #4
 800a3c6:	d2e7      	bcs.n	800a398 <quorem+0xb0>
 800a3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3d0:	b922      	cbnz	r2, 800a3dc <quorem+0xf4>
 800a3d2:	3b04      	subs	r3, #4
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	d30a      	bcc.n	800a3f0 <quorem+0x108>
 800a3da:	613c      	str	r4, [r7, #16]
 800a3dc:	4630      	mov	r0, r6
 800a3de:	b003      	add	sp, #12
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	3b04      	subs	r3, #4
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1cb      	bne.n	800a384 <quorem+0x9c>
 800a3ec:	3c01      	subs	r4, #1
 800a3ee:	e7c6      	b.n	800a37e <quorem+0x96>
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d1f0      	bne.n	800a3da <quorem+0xf2>
 800a3f8:	3c01      	subs	r4, #1
 800a3fa:	e7eb      	b.n	800a3d4 <quorem+0xec>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e7ee      	b.n	800a3de <quorem+0xf6>

0800a400 <_dtoa_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	4616      	mov	r6, r2
 800a406:	461f      	mov	r7, r3
 800a408:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a40a:	b099      	sub	sp, #100	; 0x64
 800a40c:	4605      	mov	r5, r0
 800a40e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a412:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a416:	b974      	cbnz	r4, 800a436 <_dtoa_r+0x36>
 800a418:	2010      	movs	r0, #16
 800a41a:	f000 feb3 	bl	800b184 <malloc>
 800a41e:	4602      	mov	r2, r0
 800a420:	6268      	str	r0, [r5, #36]	; 0x24
 800a422:	b920      	cbnz	r0, 800a42e <_dtoa_r+0x2e>
 800a424:	21ea      	movs	r1, #234	; 0xea
 800a426:	4ba8      	ldr	r3, [pc, #672]	; (800a6c8 <_dtoa_r+0x2c8>)
 800a428:	48a8      	ldr	r0, [pc, #672]	; (800a6cc <_dtoa_r+0x2cc>)
 800a42a:	f001 fc19 	bl	800bc60 <__assert_func>
 800a42e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a432:	6004      	str	r4, [r0, #0]
 800a434:	60c4      	str	r4, [r0, #12]
 800a436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	b151      	cbz	r1, 800a452 <_dtoa_r+0x52>
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	2301      	movs	r3, #1
 800a440:	4093      	lsls	r3, r2
 800a442:	604a      	str	r2, [r1, #4]
 800a444:	608b      	str	r3, [r1, #8]
 800a446:	4628      	mov	r0, r5
 800a448:	f000 fefe 	bl	800b248 <_Bfree>
 800a44c:	2200      	movs	r2, #0
 800a44e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	1e3b      	subs	r3, r7, #0
 800a454:	bfaf      	iteee	ge
 800a456:	2300      	movge	r3, #0
 800a458:	2201      	movlt	r2, #1
 800a45a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a45e:	9305      	strlt	r3, [sp, #20]
 800a460:	bfa8      	it	ge
 800a462:	f8c8 3000 	strge.w	r3, [r8]
 800a466:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a46a:	4b99      	ldr	r3, [pc, #612]	; (800a6d0 <_dtoa_r+0x2d0>)
 800a46c:	bfb8      	it	lt
 800a46e:	f8c8 2000 	strlt.w	r2, [r8]
 800a472:	ea33 0309 	bics.w	r3, r3, r9
 800a476:	d119      	bne.n	800a4ac <_dtoa_r+0xac>
 800a478:	f242 730f 	movw	r3, #9999	; 0x270f
 800a47c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a484:	4333      	orrs	r3, r6
 800a486:	f000 857f 	beq.w	800af88 <_dtoa_r+0xb88>
 800a48a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a48c:	b953      	cbnz	r3, 800a4a4 <_dtoa_r+0xa4>
 800a48e:	4b91      	ldr	r3, [pc, #580]	; (800a6d4 <_dtoa_r+0x2d4>)
 800a490:	e022      	b.n	800a4d8 <_dtoa_r+0xd8>
 800a492:	4b91      	ldr	r3, [pc, #580]	; (800a6d8 <_dtoa_r+0x2d8>)
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	3308      	adds	r3, #8
 800a498:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	9803      	ldr	r0, [sp, #12]
 800a49e:	b019      	add	sp, #100	; 0x64
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	4b8b      	ldr	r3, [pc, #556]	; (800a6d4 <_dtoa_r+0x2d4>)
 800a4a6:	9303      	str	r3, [sp, #12]
 800a4a8:	3303      	adds	r3, #3
 800a4aa:	e7f5      	b.n	800a498 <_dtoa_r+0x98>
 800a4ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a4b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f7f6 fa8c 	bl	80009d8 <__aeabi_dcmpeq>
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	b158      	cbz	r0, 800a4dc <_dtoa_r+0xdc>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 8558 	beq.w	800af82 <_dtoa_r+0xb82>
 800a4d2:	4882      	ldr	r0, [pc, #520]	; (800a6dc <_dtoa_r+0x2dc>)
 800a4d4:	6018      	str	r0, [r3, #0]
 800a4d6:	1e43      	subs	r3, r0, #1
 800a4d8:	9303      	str	r3, [sp, #12]
 800a4da:	e7df      	b.n	800a49c <_dtoa_r+0x9c>
 800a4dc:	ab16      	add	r3, sp, #88	; 0x58
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4ea:	f001 f993 	bl	800b814 <__d2b>
 800a4ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a4f2:	4683      	mov	fp, r0
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	d07f      	beq.n	800a5f8 <_dtoa_r+0x1f8>
 800a4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a506:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a50a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a50e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a512:	2200      	movs	r2, #0
 800a514:	4b72      	ldr	r3, [pc, #456]	; (800a6e0 <_dtoa_r+0x2e0>)
 800a516:	f7f5 fe3f 	bl	8000198 <__aeabi_dsub>
 800a51a:	a365      	add	r3, pc, #404	; (adr r3, 800a6b0 <_dtoa_r+0x2b0>)
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	f7f5 fff2 	bl	8000508 <__aeabi_dmul>
 800a524:	a364      	add	r3, pc, #400	; (adr r3, 800a6b8 <_dtoa_r+0x2b8>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	f7f5 fe37 	bl	800019c <__adddf3>
 800a52e:	4606      	mov	r6, r0
 800a530:	4620      	mov	r0, r4
 800a532:	460f      	mov	r7, r1
 800a534:	f7f5 ff7e 	bl	8000434 <__aeabi_i2d>
 800a538:	a361      	add	r3, pc, #388	; (adr r3, 800a6c0 <_dtoa_r+0x2c0>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 ffe3 	bl	8000508 <__aeabi_dmul>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	4630      	mov	r0, r6
 800a548:	4639      	mov	r1, r7
 800a54a:	f7f5 fe27 	bl	800019c <__adddf3>
 800a54e:	4606      	mov	r6, r0
 800a550:	460f      	mov	r7, r1
 800a552:	f7f6 fa89 	bl	8000a68 <__aeabi_d2iz>
 800a556:	2200      	movs	r2, #0
 800a558:	4682      	mov	sl, r0
 800a55a:	2300      	movs	r3, #0
 800a55c:	4630      	mov	r0, r6
 800a55e:	4639      	mov	r1, r7
 800a560:	f7f6 fa44 	bl	80009ec <__aeabi_dcmplt>
 800a564:	b148      	cbz	r0, 800a57a <_dtoa_r+0x17a>
 800a566:	4650      	mov	r0, sl
 800a568:	f7f5 ff64 	bl	8000434 <__aeabi_i2d>
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	f7f6 fa32 	bl	80009d8 <__aeabi_dcmpeq>
 800a574:	b908      	cbnz	r0, 800a57a <_dtoa_r+0x17a>
 800a576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a57a:	f1ba 0f16 	cmp.w	sl, #22
 800a57e:	d858      	bhi.n	800a632 <_dtoa_r+0x232>
 800a580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a584:	4b57      	ldr	r3, [pc, #348]	; (800a6e4 <_dtoa_r+0x2e4>)
 800a586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	f7f6 fa2d 	bl	80009ec <__aeabi_dcmplt>
 800a592:	2800      	cmp	r0, #0
 800a594:	d04f      	beq.n	800a636 <_dtoa_r+0x236>
 800a596:	2300      	movs	r3, #0
 800a598:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a59c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a59e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5a0:	1b1c      	subs	r4, r3, r4
 800a5a2:	1e63      	subs	r3, r4, #1
 800a5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a6:	bf49      	itett	mi
 800a5a8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a5ac:	2300      	movpl	r3, #0
 800a5ae:	9306      	strmi	r3, [sp, #24]
 800a5b0:	2300      	movmi	r3, #0
 800a5b2:	bf54      	ite	pl
 800a5b4:	9306      	strpl	r3, [sp, #24]
 800a5b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5b8:	f1ba 0f00 	cmp.w	sl, #0
 800a5bc:	db3d      	blt.n	800a63a <_dtoa_r+0x23a>
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a5c4:	4453      	add	r3, sl
 800a5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a5cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5ce:	2b09      	cmp	r3, #9
 800a5d0:	f200 808c 	bhi.w	800a6ec <_dtoa_r+0x2ec>
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	bfc4      	itt	gt
 800a5d8:	3b04      	subgt	r3, #4
 800a5da:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a5dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5de:	bfc8      	it	gt
 800a5e0:	2400      	movgt	r4, #0
 800a5e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a5e6:	bfd8      	it	le
 800a5e8:	2401      	movle	r4, #1
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	f200 808a 	bhi.w	800a704 <_dtoa_r+0x304>
 800a5f0:	e8df f003 	tbb	[pc, r3]
 800a5f4:	5b4d4f2d 	.word	0x5b4d4f2d
 800a5f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a5fc:	441c      	add	r4, r3
 800a5fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a602:	2b20      	cmp	r3, #32
 800a604:	bfc3      	ittte	gt
 800a606:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a60a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a60e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a612:	f1c3 0320 	rsble	r3, r3, #32
 800a616:	bfc6      	itte	gt
 800a618:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a61c:	4318      	orrgt	r0, r3
 800a61e:	fa06 f003 	lslle.w	r0, r6, r3
 800a622:	f7f5 fef7 	bl	8000414 <__aeabi_ui2d>
 800a626:	2301      	movs	r3, #1
 800a628:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a62c:	3c01      	subs	r4, #1
 800a62e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a630:	e76f      	b.n	800a512 <_dtoa_r+0x112>
 800a632:	2301      	movs	r3, #1
 800a634:	e7b2      	b.n	800a59c <_dtoa_r+0x19c>
 800a636:	900f      	str	r0, [sp, #60]	; 0x3c
 800a638:	e7b1      	b.n	800a59e <_dtoa_r+0x19e>
 800a63a:	9b06      	ldr	r3, [sp, #24]
 800a63c:	eba3 030a 	sub.w	r3, r3, sl
 800a640:	9306      	str	r3, [sp, #24]
 800a642:	f1ca 0300 	rsb	r3, sl, #0
 800a646:	930a      	str	r3, [sp, #40]	; 0x28
 800a648:	2300      	movs	r3, #0
 800a64a:	930e      	str	r3, [sp, #56]	; 0x38
 800a64c:	e7be      	b.n	800a5cc <_dtoa_r+0x1cc>
 800a64e:	2300      	movs	r3, #0
 800a650:	930b      	str	r3, [sp, #44]	; 0x2c
 800a652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a654:	2b00      	cmp	r3, #0
 800a656:	dc58      	bgt.n	800a70a <_dtoa_r+0x30a>
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	464b      	mov	r3, r9
 800a65e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a662:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a666:	2200      	movs	r2, #0
 800a668:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a66a:	6042      	str	r2, [r0, #4]
 800a66c:	2204      	movs	r2, #4
 800a66e:	f102 0614 	add.w	r6, r2, #20
 800a672:	429e      	cmp	r6, r3
 800a674:	6841      	ldr	r1, [r0, #4]
 800a676:	d94e      	bls.n	800a716 <_dtoa_r+0x316>
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 fda5 	bl	800b1c8 <_Balloc>
 800a67e:	9003      	str	r0, [sp, #12]
 800a680:	2800      	cmp	r0, #0
 800a682:	d14c      	bne.n	800a71e <_dtoa_r+0x31e>
 800a684:	4602      	mov	r2, r0
 800a686:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a68a:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <_dtoa_r+0x2e8>)
 800a68c:	e6cc      	b.n	800a428 <_dtoa_r+0x28>
 800a68e:	2301      	movs	r3, #1
 800a690:	e7de      	b.n	800a650 <_dtoa_r+0x250>
 800a692:	2300      	movs	r3, #0
 800a694:	930b      	str	r3, [sp, #44]	; 0x2c
 800a696:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a698:	eb0a 0903 	add.w	r9, sl, r3
 800a69c:	f109 0301 	add.w	r3, r9, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	9308      	str	r3, [sp, #32]
 800a6a4:	bfb8      	it	lt
 800a6a6:	2301      	movlt	r3, #1
 800a6a8:	e7dd      	b.n	800a666 <_dtoa_r+0x266>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e7f2      	b.n	800a694 <_dtoa_r+0x294>
 800a6ae:	bf00      	nop
 800a6b0:	636f4361 	.word	0x636f4361
 800a6b4:	3fd287a7 	.word	0x3fd287a7
 800a6b8:	8b60c8b3 	.word	0x8b60c8b3
 800a6bc:	3fc68a28 	.word	0x3fc68a28
 800a6c0:	509f79fb 	.word	0x509f79fb
 800a6c4:	3fd34413 	.word	0x3fd34413
 800a6c8:	0800ca89 	.word	0x0800ca89
 800a6cc:	0800caa0 	.word	0x0800caa0
 800a6d0:	7ff00000 	.word	0x7ff00000
 800a6d4:	0800ca85 	.word	0x0800ca85
 800a6d8:	0800ca7c 	.word	0x0800ca7c
 800a6dc:	0800ca59 	.word	0x0800ca59
 800a6e0:	3ff80000 	.word	0x3ff80000
 800a6e4:	0800cb90 	.word	0x0800cb90
 800a6e8:	0800cafb 	.word	0x0800cafb
 800a6ec:	2401      	movs	r4, #1
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6f2:	9322      	str	r3, [sp, #136]	; 0x88
 800a6f4:	f04f 39ff 	mov.w	r9, #4294967295
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2312      	movs	r3, #18
 800a6fc:	f8cd 9020 	str.w	r9, [sp, #32]
 800a700:	9223      	str	r2, [sp, #140]	; 0x8c
 800a702:	e7b0      	b.n	800a666 <_dtoa_r+0x266>
 800a704:	2301      	movs	r3, #1
 800a706:	930b      	str	r3, [sp, #44]	; 0x2c
 800a708:	e7f4      	b.n	800a6f4 <_dtoa_r+0x2f4>
 800a70a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a70e:	464b      	mov	r3, r9
 800a710:	f8cd 9020 	str.w	r9, [sp, #32]
 800a714:	e7a7      	b.n	800a666 <_dtoa_r+0x266>
 800a716:	3101      	adds	r1, #1
 800a718:	6041      	str	r1, [r0, #4]
 800a71a:	0052      	lsls	r2, r2, #1
 800a71c:	e7a7      	b.n	800a66e <_dtoa_r+0x26e>
 800a71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a720:	9a03      	ldr	r2, [sp, #12]
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	9b08      	ldr	r3, [sp, #32]
 800a726:	2b0e      	cmp	r3, #14
 800a728:	f200 80a8 	bhi.w	800a87c <_dtoa_r+0x47c>
 800a72c:	2c00      	cmp	r4, #0
 800a72e:	f000 80a5 	beq.w	800a87c <_dtoa_r+0x47c>
 800a732:	f1ba 0f00 	cmp.w	sl, #0
 800a736:	dd34      	ble.n	800a7a2 <_dtoa_r+0x3a2>
 800a738:	4a9a      	ldr	r2, [pc, #616]	; (800a9a4 <_dtoa_r+0x5a4>)
 800a73a:	f00a 030f 	and.w	r3, sl, #15
 800a73e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a742:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a74a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a74e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a752:	d016      	beq.n	800a782 <_dtoa_r+0x382>
 800a754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a758:	4b93      	ldr	r3, [pc, #588]	; (800a9a8 <_dtoa_r+0x5a8>)
 800a75a:	2703      	movs	r7, #3
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f5 fffc 	bl	800075c <__aeabi_ddiv>
 800a764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a768:	f004 040f 	and.w	r4, r4, #15
 800a76c:	4e8e      	ldr	r6, [pc, #568]	; (800a9a8 <_dtoa_r+0x5a8>)
 800a76e:	b954      	cbnz	r4, 800a786 <_dtoa_r+0x386>
 800a770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a778:	f7f5 fff0 	bl	800075c <__aeabi_ddiv>
 800a77c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a780:	e029      	b.n	800a7d6 <_dtoa_r+0x3d6>
 800a782:	2702      	movs	r7, #2
 800a784:	e7f2      	b.n	800a76c <_dtoa_r+0x36c>
 800a786:	07e1      	lsls	r1, r4, #31
 800a788:	d508      	bpl.n	800a79c <_dtoa_r+0x39c>
 800a78a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a78e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a792:	f7f5 feb9 	bl	8000508 <__aeabi_dmul>
 800a796:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a79a:	3701      	adds	r7, #1
 800a79c:	1064      	asrs	r4, r4, #1
 800a79e:	3608      	adds	r6, #8
 800a7a0:	e7e5      	b.n	800a76e <_dtoa_r+0x36e>
 800a7a2:	f000 80a5 	beq.w	800a8f0 <_dtoa_r+0x4f0>
 800a7a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7aa:	f1ca 0400 	rsb	r4, sl, #0
 800a7ae:	4b7d      	ldr	r3, [pc, #500]	; (800a9a4 <_dtoa_r+0x5a4>)
 800a7b0:	f004 020f 	and.w	r2, r4, #15
 800a7b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fea4 	bl	8000508 <__aeabi_dmul>
 800a7c0:	2702      	movs	r7, #2
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7c8:	4e77      	ldr	r6, [pc, #476]	; (800a9a8 <_dtoa_r+0x5a8>)
 800a7ca:	1124      	asrs	r4, r4, #4
 800a7cc:	2c00      	cmp	r4, #0
 800a7ce:	f040 8084 	bne.w	800a8da <_dtoa_r+0x4da>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1d2      	bne.n	800a77c <_dtoa_r+0x37c>
 800a7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 808b 	beq.w	800a8f4 <_dtoa_r+0x4f4>
 800a7de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4b6f      	ldr	r3, [pc, #444]	; (800a9ac <_dtoa_r+0x5ac>)
 800a7ee:	f7f6 f8fd 	bl	80009ec <__aeabi_dcmplt>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d07e      	beq.n	800a8f4 <_dtoa_r+0x4f4>
 800a7f6:	9b08      	ldr	r3, [sp, #32]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d07b      	beq.n	800a8f4 <_dtoa_r+0x4f4>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dd38      	ble.n	800a874 <_dtoa_r+0x474>
 800a802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a806:	2200      	movs	r2, #0
 800a808:	4b69      	ldr	r3, [pc, #420]	; (800a9b0 <_dtoa_r+0x5b0>)
 800a80a:	f7f5 fe7d 	bl	8000508 <__aeabi_dmul>
 800a80e:	464c      	mov	r4, r9
 800a810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a814:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a818:	3701      	adds	r7, #1
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7f5 fe0a 	bl	8000434 <__aeabi_i2d>
 800a820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a824:	f7f5 fe70 	bl	8000508 <__aeabi_dmul>
 800a828:	2200      	movs	r2, #0
 800a82a:	4b62      	ldr	r3, [pc, #392]	; (800a9b4 <_dtoa_r+0x5b4>)
 800a82c:	f7f5 fcb6 	bl	800019c <__adddf3>
 800a830:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a834:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a838:	9611      	str	r6, [sp, #68]	; 0x44
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	d15d      	bne.n	800a8fa <_dtoa_r+0x4fa>
 800a83e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a842:	2200      	movs	r2, #0
 800a844:	4b5c      	ldr	r3, [pc, #368]	; (800a9b8 <_dtoa_r+0x5b8>)
 800a846:	f7f5 fca7 	bl	8000198 <__aeabi_dsub>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a852:	4633      	mov	r3, r6
 800a854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a856:	f7f6 f8e7 	bl	8000a28 <__aeabi_dcmpgt>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f040 829c 	bne.w	800ad98 <_dtoa_r+0x998>
 800a860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a866:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a86a:	f7f6 f8bf 	bl	80009ec <__aeabi_dcmplt>
 800a86e:	2800      	cmp	r0, #0
 800a870:	f040 8290 	bne.w	800ad94 <_dtoa_r+0x994>
 800a874:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a878:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a87c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f2c0 8152 	blt.w	800ab28 <_dtoa_r+0x728>
 800a884:	f1ba 0f0e 	cmp.w	sl, #14
 800a888:	f300 814e 	bgt.w	800ab28 <_dtoa_r+0x728>
 800a88c:	4b45      	ldr	r3, [pc, #276]	; (800a9a4 <_dtoa_r+0x5a4>)
 800a88e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a892:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a896:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a89a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f280 80db 	bge.w	800aa58 <_dtoa_r+0x658>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f300 80d7 	bgt.w	800aa58 <_dtoa_r+0x658>
 800a8aa:	f040 8272 	bne.w	800ad92 <_dtoa_r+0x992>
 800a8ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4b40      	ldr	r3, [pc, #256]	; (800a9b8 <_dtoa_r+0x5b8>)
 800a8b6:	f7f5 fe27 	bl	8000508 <__aeabi_dmul>
 800a8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8be:	f7f6 f8a9 	bl	8000a14 <__aeabi_dcmpge>
 800a8c2:	9c08      	ldr	r4, [sp, #32]
 800a8c4:	4626      	mov	r6, r4
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f040 8248 	bne.w	800ad5c <_dtoa_r+0x95c>
 800a8cc:	2331      	movs	r3, #49	; 0x31
 800a8ce:	9f03      	ldr	r7, [sp, #12]
 800a8d0:	f10a 0a01 	add.w	sl, sl, #1
 800a8d4:	f807 3b01 	strb.w	r3, [r7], #1
 800a8d8:	e244      	b.n	800ad64 <_dtoa_r+0x964>
 800a8da:	07e2      	lsls	r2, r4, #31
 800a8dc:	d505      	bpl.n	800a8ea <_dtoa_r+0x4ea>
 800a8de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8e2:	f7f5 fe11 	bl	8000508 <__aeabi_dmul>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	3701      	adds	r7, #1
 800a8ea:	1064      	asrs	r4, r4, #1
 800a8ec:	3608      	adds	r6, #8
 800a8ee:	e76d      	b.n	800a7cc <_dtoa_r+0x3cc>
 800a8f0:	2702      	movs	r7, #2
 800a8f2:	e770      	b.n	800a7d6 <_dtoa_r+0x3d6>
 800a8f4:	46d0      	mov	r8, sl
 800a8f6:	9c08      	ldr	r4, [sp, #32]
 800a8f8:	e78f      	b.n	800a81a <_dtoa_r+0x41a>
 800a8fa:	9903      	ldr	r1, [sp, #12]
 800a8fc:	4b29      	ldr	r3, [pc, #164]	; (800a9a4 <_dtoa_r+0x5a4>)
 800a8fe:	4421      	add	r1, r4
 800a900:	9112      	str	r1, [sp, #72]	; 0x48
 800a902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a908:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a90c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a910:	2900      	cmp	r1, #0
 800a912:	d055      	beq.n	800a9c0 <_dtoa_r+0x5c0>
 800a914:	2000      	movs	r0, #0
 800a916:	4929      	ldr	r1, [pc, #164]	; (800a9bc <_dtoa_r+0x5bc>)
 800a918:	f7f5 ff20 	bl	800075c <__aeabi_ddiv>
 800a91c:	463b      	mov	r3, r7
 800a91e:	4632      	mov	r2, r6
 800a920:	f7f5 fc3a 	bl	8000198 <__aeabi_dsub>
 800a924:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a928:	9f03      	ldr	r7, [sp, #12]
 800a92a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a92e:	f7f6 f89b 	bl	8000a68 <__aeabi_d2iz>
 800a932:	4604      	mov	r4, r0
 800a934:	f7f5 fd7e 	bl	8000434 <__aeabi_i2d>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a940:	f7f5 fc2a 	bl	8000198 <__aeabi_dsub>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	3430      	adds	r4, #48	; 0x30
 800a94a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a94e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a952:	f807 4b01 	strb.w	r4, [r7], #1
 800a956:	f7f6 f849 	bl	80009ec <__aeabi_dcmplt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d174      	bne.n	800aa48 <_dtoa_r+0x648>
 800a95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a962:	2000      	movs	r0, #0
 800a964:	4911      	ldr	r1, [pc, #68]	; (800a9ac <_dtoa_r+0x5ac>)
 800a966:	f7f5 fc17 	bl	8000198 <__aeabi_dsub>
 800a96a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a96e:	f7f6 f83d 	bl	80009ec <__aeabi_dcmplt>
 800a972:	2800      	cmp	r0, #0
 800a974:	f040 80b7 	bne.w	800aae6 <_dtoa_r+0x6e6>
 800a978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a97a:	429f      	cmp	r7, r3
 800a97c:	f43f af7a 	beq.w	800a874 <_dtoa_r+0x474>
 800a980:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a984:	2200      	movs	r2, #0
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <_dtoa_r+0x5b0>)
 800a988:	f7f5 fdbe 	bl	8000508 <__aeabi_dmul>
 800a98c:	2200      	movs	r2, #0
 800a98e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a996:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <_dtoa_r+0x5b0>)
 800a998:	f7f5 fdb6 	bl	8000508 <__aeabi_dmul>
 800a99c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9a0:	e7c3      	b.n	800a92a <_dtoa_r+0x52a>
 800a9a2:	bf00      	nop
 800a9a4:	0800cb90 	.word	0x0800cb90
 800a9a8:	0800cb68 	.word	0x0800cb68
 800a9ac:	3ff00000 	.word	0x3ff00000
 800a9b0:	40240000 	.word	0x40240000
 800a9b4:	401c0000 	.word	0x401c0000
 800a9b8:	40140000 	.word	0x40140000
 800a9bc:	3fe00000 	.word	0x3fe00000
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f5 fda0 	bl	8000508 <__aeabi_dmul>
 800a9c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ce:	9c03      	ldr	r4, [sp, #12]
 800a9d0:	9314      	str	r3, [sp, #80]	; 0x50
 800a9d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9d6:	f7f6 f847 	bl	8000a68 <__aeabi_d2iz>
 800a9da:	9015      	str	r0, [sp, #84]	; 0x54
 800a9dc:	f7f5 fd2a 	bl	8000434 <__aeabi_i2d>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e8:	f7f5 fbd6 	bl	8000198 <__aeabi_dsub>
 800a9ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	3330      	adds	r3, #48	; 0x30
 800a9f2:	f804 3b01 	strb.w	r3, [r4], #1
 800a9f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9f8:	460f      	mov	r7, r1
 800a9fa:	429c      	cmp	r4, r3
 800a9fc:	f04f 0200 	mov.w	r2, #0
 800aa00:	d124      	bne.n	800aa4c <_dtoa_r+0x64c>
 800aa02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa06:	4bb0      	ldr	r3, [pc, #704]	; (800acc8 <_dtoa_r+0x8c8>)
 800aa08:	f7f5 fbc8 	bl	800019c <__adddf3>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f6 f808 	bl	8000a28 <__aeabi_dcmpgt>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d163      	bne.n	800aae4 <_dtoa_r+0x6e4>
 800aa1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa20:	2000      	movs	r0, #0
 800aa22:	49a9      	ldr	r1, [pc, #676]	; (800acc8 <_dtoa_r+0x8c8>)
 800aa24:	f7f5 fbb8 	bl	8000198 <__aeabi_dsub>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f5 ffdc 	bl	80009ec <__aeabi_dcmplt>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	f43f af1d 	beq.w	800a874 <_dtoa_r+0x474>
 800aa3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa3c:	1e7b      	subs	r3, r7, #1
 800aa3e:	9314      	str	r3, [sp, #80]	; 0x50
 800aa40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa44:	2b30      	cmp	r3, #48	; 0x30
 800aa46:	d0f8      	beq.n	800aa3a <_dtoa_r+0x63a>
 800aa48:	46c2      	mov	sl, r8
 800aa4a:	e03b      	b.n	800aac4 <_dtoa_r+0x6c4>
 800aa4c:	4b9f      	ldr	r3, [pc, #636]	; (800accc <_dtoa_r+0x8cc>)
 800aa4e:	f7f5 fd5b 	bl	8000508 <__aeabi_dmul>
 800aa52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa56:	e7bc      	b.n	800a9d2 <_dtoa_r+0x5d2>
 800aa58:	9f03      	ldr	r7, [sp, #12]
 800aa5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa62:	4640      	mov	r0, r8
 800aa64:	4649      	mov	r1, r9
 800aa66:	f7f5 fe79 	bl	800075c <__aeabi_ddiv>
 800aa6a:	f7f5 fffd 	bl	8000a68 <__aeabi_d2iz>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	f7f5 fce0 	bl	8000434 <__aeabi_i2d>
 800aa74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa78:	f7f5 fd46 	bl	8000508 <__aeabi_dmul>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f5 fb88 	bl	8000198 <__aeabi_dsub>
 800aa88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aa8c:	f807 6b01 	strb.w	r6, [r7], #1
 800aa90:	9e03      	ldr	r6, [sp, #12]
 800aa92:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aa96:	1bbe      	subs	r6, r7, r6
 800aa98:	45b4      	cmp	ip, r6
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	d136      	bne.n	800ab0e <_dtoa_r+0x70e>
 800aaa0:	f7f5 fb7c 	bl	800019c <__adddf3>
 800aaa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	4689      	mov	r9, r1
 800aaac:	f7f5 ffbc 	bl	8000a28 <__aeabi_dcmpgt>
 800aab0:	bb58      	cbnz	r0, 800ab0a <_dtoa_r+0x70a>
 800aab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f5 ff8d 	bl	80009d8 <__aeabi_dcmpeq>
 800aabe:	b108      	cbz	r0, 800aac4 <_dtoa_r+0x6c4>
 800aac0:	07e1      	lsls	r1, r4, #31
 800aac2:	d422      	bmi.n	800ab0a <_dtoa_r+0x70a>
 800aac4:	4628      	mov	r0, r5
 800aac6:	4659      	mov	r1, fp
 800aac8:	f000 fbbe 	bl	800b248 <_Bfree>
 800aacc:	2300      	movs	r3, #0
 800aace:	703b      	strb	r3, [r7, #0]
 800aad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aad2:	f10a 0001 	add.w	r0, sl, #1
 800aad6:	6018      	str	r0, [r3, #0]
 800aad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f43f acde 	beq.w	800a49c <_dtoa_r+0x9c>
 800aae0:	601f      	str	r7, [r3, #0]
 800aae2:	e4db      	b.n	800a49c <_dtoa_r+0x9c>
 800aae4:	4627      	mov	r7, r4
 800aae6:	463b      	mov	r3, r7
 800aae8:	461f      	mov	r7, r3
 800aaea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaee:	2a39      	cmp	r2, #57	; 0x39
 800aaf0:	d107      	bne.n	800ab02 <_dtoa_r+0x702>
 800aaf2:	9a03      	ldr	r2, [sp, #12]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d1f7      	bne.n	800aae8 <_dtoa_r+0x6e8>
 800aaf8:	2230      	movs	r2, #48	; 0x30
 800aafa:	9903      	ldr	r1, [sp, #12]
 800aafc:	f108 0801 	add.w	r8, r8, #1
 800ab00:	700a      	strb	r2, [r1, #0]
 800ab02:	781a      	ldrb	r2, [r3, #0]
 800ab04:	3201      	adds	r2, #1
 800ab06:	701a      	strb	r2, [r3, #0]
 800ab08:	e79e      	b.n	800aa48 <_dtoa_r+0x648>
 800ab0a:	46d0      	mov	r8, sl
 800ab0c:	e7eb      	b.n	800aae6 <_dtoa_r+0x6e6>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4b6e      	ldr	r3, [pc, #440]	; (800accc <_dtoa_r+0x8cc>)
 800ab12:	f7f5 fcf9 	bl	8000508 <__aeabi_dmul>
 800ab16:	2200      	movs	r2, #0
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	4689      	mov	r9, r1
 800ab1e:	f7f5 ff5b 	bl	80009d8 <__aeabi_dcmpeq>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d09b      	beq.n	800aa5e <_dtoa_r+0x65e>
 800ab26:	e7cd      	b.n	800aac4 <_dtoa_r+0x6c4>
 800ab28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab2a:	2a00      	cmp	r2, #0
 800ab2c:	f000 80d0 	beq.w	800acd0 <_dtoa_r+0x8d0>
 800ab30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab32:	2a01      	cmp	r2, #1
 800ab34:	f300 80ae 	bgt.w	800ac94 <_dtoa_r+0x894>
 800ab38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	f000 80a6 	beq.w	800ac8c <_dtoa_r+0x88c>
 800ab40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab46:	9f06      	ldr	r7, [sp, #24]
 800ab48:	9a06      	ldr	r2, [sp, #24]
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	441a      	add	r2, r3
 800ab4e:	9206      	str	r2, [sp, #24]
 800ab50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab52:	4628      	mov	r0, r5
 800ab54:	441a      	add	r2, r3
 800ab56:	9209      	str	r2, [sp, #36]	; 0x24
 800ab58:	f000 fc2c 	bl	800b3b4 <__i2b>
 800ab5c:	4606      	mov	r6, r0
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	dd0c      	ble.n	800ab7c <_dtoa_r+0x77c>
 800ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	dd09      	ble.n	800ab7c <_dtoa_r+0x77c>
 800ab68:	42bb      	cmp	r3, r7
 800ab6a:	bfa8      	it	ge
 800ab6c:	463b      	movge	r3, r7
 800ab6e:	9a06      	ldr	r2, [sp, #24]
 800ab70:	1aff      	subs	r7, r7, r3
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	9206      	str	r2, [sp, #24]
 800ab76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7e:	b1f3      	cbz	r3, 800abbe <_dtoa_r+0x7be>
 800ab80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80a8 	beq.w	800acd8 <_dtoa_r+0x8d8>
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	dd10      	ble.n	800abae <_dtoa_r+0x7ae>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	f000 fccd 	bl	800b530 <__pow5mult>
 800ab96:	465a      	mov	r2, fp
 800ab98:	4601      	mov	r1, r0
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 fc1f 	bl	800b3e0 <__multiply>
 800aba2:	4680      	mov	r8, r0
 800aba4:	4659      	mov	r1, fp
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 fb4e 	bl	800b248 <_Bfree>
 800abac:	46c3      	mov	fp, r8
 800abae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb0:	1b1a      	subs	r2, r3, r4
 800abb2:	d004      	beq.n	800abbe <_dtoa_r+0x7be>
 800abb4:	4659      	mov	r1, fp
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 fcba 	bl	800b530 <__pow5mult>
 800abbc:	4683      	mov	fp, r0
 800abbe:	2101      	movs	r1, #1
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 fbf7 	bl	800b3b4 <__i2b>
 800abc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abc8:	4604      	mov	r4, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f340 8086 	ble.w	800acdc <_dtoa_r+0x8dc>
 800abd0:	461a      	mov	r2, r3
 800abd2:	4601      	mov	r1, r0
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 fcab 	bl	800b530 <__pow5mult>
 800abda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abdc:	4604      	mov	r4, r0
 800abde:	2b01      	cmp	r3, #1
 800abe0:	dd7f      	ble.n	800ace2 <_dtoa_r+0x8e2>
 800abe2:	f04f 0800 	mov.w	r8, #0
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abec:	6918      	ldr	r0, [r3, #16]
 800abee:	f000 fb93 	bl	800b318 <__hi0bits>
 800abf2:	f1c0 0020 	rsb	r0, r0, #32
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	4418      	add	r0, r3
 800abfa:	f010 001f 	ands.w	r0, r0, #31
 800abfe:	f000 8092 	beq.w	800ad26 <_dtoa_r+0x926>
 800ac02:	f1c0 0320 	rsb	r3, r0, #32
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	f340 808a 	ble.w	800ad20 <_dtoa_r+0x920>
 800ac0c:	f1c0 001c 	rsb	r0, r0, #28
 800ac10:	9b06      	ldr	r3, [sp, #24]
 800ac12:	4407      	add	r7, r0
 800ac14:	4403      	add	r3, r0
 800ac16:	9306      	str	r3, [sp, #24]
 800ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1a:	4403      	add	r3, r0
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dd05      	ble.n	800ac30 <_dtoa_r+0x830>
 800ac24:	4659      	mov	r1, fp
 800ac26:	461a      	mov	r2, r3
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f000 fcdb 	bl	800b5e4 <__lshift>
 800ac2e:	4683      	mov	fp, r0
 800ac30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	dd05      	ble.n	800ac42 <_dtoa_r+0x842>
 800ac36:	4621      	mov	r1, r4
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f000 fcd2 	bl	800b5e4 <__lshift>
 800ac40:	4604      	mov	r4, r0
 800ac42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d070      	beq.n	800ad2a <_dtoa_r+0x92a>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4658      	mov	r0, fp
 800ac4c:	f000 fd3a 	bl	800b6c4 <__mcmp>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	da6a      	bge.n	800ad2a <_dtoa_r+0x92a>
 800ac54:	2300      	movs	r3, #0
 800ac56:	4659      	mov	r1, fp
 800ac58:	220a      	movs	r2, #10
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 fb16 	bl	800b28c <__multadd>
 800ac60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac62:	4683      	mov	fp, r0
 800ac64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 8194 	beq.w	800af96 <_dtoa_r+0xb96>
 800ac6e:	4631      	mov	r1, r6
 800ac70:	2300      	movs	r3, #0
 800ac72:	220a      	movs	r2, #10
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 fb09 	bl	800b28c <__multadd>
 800ac7a:	f1b9 0f00 	cmp.w	r9, #0
 800ac7e:	4606      	mov	r6, r0
 800ac80:	f300 8093 	bgt.w	800adaa <_dtoa_r+0x9aa>
 800ac84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	dc57      	bgt.n	800ad3a <_dtoa_r+0x93a>
 800ac8a:	e08e      	b.n	800adaa <_dtoa_r+0x9aa>
 800ac8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac92:	e757      	b.n	800ab44 <_dtoa_r+0x744>
 800ac94:	9b08      	ldr	r3, [sp, #32]
 800ac96:	1e5c      	subs	r4, r3, #1
 800ac98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	bfb7      	itett	lt
 800ac9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aca0:	1b1c      	subge	r4, r3, r4
 800aca2:	1ae2      	sublt	r2, r4, r3
 800aca4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aca6:	bfbe      	ittt	lt
 800aca8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800acaa:	189b      	addlt	r3, r3, r2
 800acac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	bfb8      	it	lt
 800acb2:	2400      	movlt	r4, #0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bfbb      	ittet	lt
 800acb8:	9b06      	ldrlt	r3, [sp, #24]
 800acba:	9a08      	ldrlt	r2, [sp, #32]
 800acbc:	9f06      	ldrge	r7, [sp, #24]
 800acbe:	1a9f      	sublt	r7, r3, r2
 800acc0:	bfac      	ite	ge
 800acc2:	9b08      	ldrge	r3, [sp, #32]
 800acc4:	2300      	movlt	r3, #0
 800acc6:	e73f      	b.n	800ab48 <_dtoa_r+0x748>
 800acc8:	3fe00000 	.word	0x3fe00000
 800accc:	40240000 	.word	0x40240000
 800acd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acd2:	9f06      	ldr	r7, [sp, #24]
 800acd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acd6:	e742      	b.n	800ab5e <_dtoa_r+0x75e>
 800acd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acda:	e76b      	b.n	800abb4 <_dtoa_r+0x7b4>
 800acdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acde:	2b01      	cmp	r3, #1
 800ace0:	dc19      	bgt.n	800ad16 <_dtoa_r+0x916>
 800ace2:	9b04      	ldr	r3, [sp, #16]
 800ace4:	b9bb      	cbnz	r3, 800ad16 <_dtoa_r+0x916>
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acec:	b99b      	cbnz	r3, 800ad16 <_dtoa_r+0x916>
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acf4:	0d1b      	lsrs	r3, r3, #20
 800acf6:	051b      	lsls	r3, r3, #20
 800acf8:	b183      	cbz	r3, 800ad1c <_dtoa_r+0x91c>
 800acfa:	f04f 0801 	mov.w	r8, #1
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	3301      	adds	r3, #1
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad06:	3301      	adds	r3, #1
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f47f af6a 	bne.w	800abe6 <_dtoa_r+0x7e6>
 800ad12:	2001      	movs	r0, #1
 800ad14:	e76f      	b.n	800abf6 <_dtoa_r+0x7f6>
 800ad16:	f04f 0800 	mov.w	r8, #0
 800ad1a:	e7f6      	b.n	800ad0a <_dtoa_r+0x90a>
 800ad1c:	4698      	mov	r8, r3
 800ad1e:	e7f4      	b.n	800ad0a <_dtoa_r+0x90a>
 800ad20:	f43f af7d 	beq.w	800ac1e <_dtoa_r+0x81e>
 800ad24:	4618      	mov	r0, r3
 800ad26:	301c      	adds	r0, #28
 800ad28:	e772      	b.n	800ac10 <_dtoa_r+0x810>
 800ad2a:	9b08      	ldr	r3, [sp, #32]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dc36      	bgt.n	800ad9e <_dtoa_r+0x99e>
 800ad30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	dd33      	ble.n	800ad9e <_dtoa_r+0x99e>
 800ad36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad3a:	f1b9 0f00 	cmp.w	r9, #0
 800ad3e:	d10d      	bne.n	800ad5c <_dtoa_r+0x95c>
 800ad40:	4621      	mov	r1, r4
 800ad42:	464b      	mov	r3, r9
 800ad44:	2205      	movs	r2, #5
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 faa0 	bl	800b28c <__multadd>
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4658      	mov	r0, fp
 800ad52:	f000 fcb7 	bl	800b6c4 <__mcmp>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f73f adb8 	bgt.w	800a8cc <_dtoa_r+0x4cc>
 800ad5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad5e:	9f03      	ldr	r7, [sp, #12]
 800ad60:	ea6f 0a03 	mvn.w	sl, r3
 800ad64:	f04f 0800 	mov.w	r8, #0
 800ad68:	4621      	mov	r1, r4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f000 fa6c 	bl	800b248 <_Bfree>
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	f43f aea7 	beq.w	800aac4 <_dtoa_r+0x6c4>
 800ad76:	f1b8 0f00 	cmp.w	r8, #0
 800ad7a:	d005      	beq.n	800ad88 <_dtoa_r+0x988>
 800ad7c:	45b0      	cmp	r8, r6
 800ad7e:	d003      	beq.n	800ad88 <_dtoa_r+0x988>
 800ad80:	4641      	mov	r1, r8
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 fa60 	bl	800b248 <_Bfree>
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 fa5c 	bl	800b248 <_Bfree>
 800ad90:	e698      	b.n	800aac4 <_dtoa_r+0x6c4>
 800ad92:	2400      	movs	r4, #0
 800ad94:	4626      	mov	r6, r4
 800ad96:	e7e1      	b.n	800ad5c <_dtoa_r+0x95c>
 800ad98:	46c2      	mov	sl, r8
 800ad9a:	4626      	mov	r6, r4
 800ad9c:	e596      	b.n	800a8cc <_dtoa_r+0x4cc>
 800ad9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 80fd 	beq.w	800afa4 <_dtoa_r+0xba4>
 800adaa:	2f00      	cmp	r7, #0
 800adac:	dd05      	ble.n	800adba <_dtoa_r+0x9ba>
 800adae:	4631      	mov	r1, r6
 800adb0:	463a      	mov	r2, r7
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 fc16 	bl	800b5e4 <__lshift>
 800adb8:	4606      	mov	r6, r0
 800adba:	f1b8 0f00 	cmp.w	r8, #0
 800adbe:	d05c      	beq.n	800ae7a <_dtoa_r+0xa7a>
 800adc0:	4628      	mov	r0, r5
 800adc2:	6871      	ldr	r1, [r6, #4]
 800adc4:	f000 fa00 	bl	800b1c8 <_Balloc>
 800adc8:	4607      	mov	r7, r0
 800adca:	b928      	cbnz	r0, 800add8 <_dtoa_r+0x9d8>
 800adcc:	4602      	mov	r2, r0
 800adce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800add2:	4b7f      	ldr	r3, [pc, #508]	; (800afd0 <_dtoa_r+0xbd0>)
 800add4:	f7ff bb28 	b.w	800a428 <_dtoa_r+0x28>
 800add8:	6932      	ldr	r2, [r6, #16]
 800adda:	f106 010c 	add.w	r1, r6, #12
 800adde:	3202      	adds	r2, #2
 800ade0:	0092      	lsls	r2, r2, #2
 800ade2:	300c      	adds	r0, #12
 800ade4:	f7fe fc75 	bl	80096d2 <memcpy>
 800ade8:	2201      	movs	r2, #1
 800adea:	4639      	mov	r1, r7
 800adec:	4628      	mov	r0, r5
 800adee:	f000 fbf9 	bl	800b5e4 <__lshift>
 800adf2:	46b0      	mov	r8, r6
 800adf4:	4606      	mov	r6, r0
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	9308      	str	r3, [sp, #32]
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	444b      	add	r3, r9
 800ae00:	930a      	str	r3, [sp, #40]	; 0x28
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	4658      	mov	r0, fp
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	f7ff fa68 	bl	800a2e8 <quorem>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	3330      	adds	r3, #48	; 0x30
 800ae1e:	9006      	str	r0, [sp, #24]
 800ae20:	4658      	mov	r0, fp
 800ae22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae24:	f000 fc4e 	bl	800b6c4 <__mcmp>
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4681      	mov	r9, r0
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fc64 	bl	800b6fc <__mdiff>
 800ae34:	68c2      	ldr	r2, [r0, #12]
 800ae36:	4607      	mov	r7, r0
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	bb02      	cbnz	r2, 800ae7e <_dtoa_r+0xa7e>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4658      	mov	r0, fp
 800ae40:	f000 fc40 	bl	800b6c4 <__mcmp>
 800ae44:	4602      	mov	r2, r0
 800ae46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae48:	4639      	mov	r1, r7
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae50:	f000 f9fa 	bl	800b248 <_Bfree>
 800ae54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae58:	9f08      	ldr	r7, [sp, #32]
 800ae5a:	ea43 0102 	orr.w	r1, r3, r2
 800ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae60:	430b      	orrs	r3, r1
 800ae62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae64:	d10d      	bne.n	800ae82 <_dtoa_r+0xa82>
 800ae66:	2b39      	cmp	r3, #57	; 0x39
 800ae68:	d029      	beq.n	800aebe <_dtoa_r+0xabe>
 800ae6a:	f1b9 0f00 	cmp.w	r9, #0
 800ae6e:	dd01      	ble.n	800ae74 <_dtoa_r+0xa74>
 800ae70:	9b06      	ldr	r3, [sp, #24]
 800ae72:	3331      	adds	r3, #49	; 0x31
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	7013      	strb	r3, [r2, #0]
 800ae78:	e776      	b.n	800ad68 <_dtoa_r+0x968>
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	e7b9      	b.n	800adf2 <_dtoa_r+0x9f2>
 800ae7e:	2201      	movs	r2, #1
 800ae80:	e7e2      	b.n	800ae48 <_dtoa_r+0xa48>
 800ae82:	f1b9 0f00 	cmp.w	r9, #0
 800ae86:	db06      	blt.n	800ae96 <_dtoa_r+0xa96>
 800ae88:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae8a:	ea41 0909 	orr.w	r9, r1, r9
 800ae8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae90:	ea59 0101 	orrs.w	r1, r9, r1
 800ae94:	d120      	bne.n	800aed8 <_dtoa_r+0xad8>
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	ddec      	ble.n	800ae74 <_dtoa_r+0xa74>
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	4628      	mov	r0, r5
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	f000 fb9f 	bl	800b5e4 <__lshift>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4683      	mov	fp, r0
 800aeaa:	f000 fc0b 	bl	800b6c4 <__mcmp>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	9b08      	ldr	r3, [sp, #32]
 800aeb2:	dc02      	bgt.n	800aeba <_dtoa_r+0xaba>
 800aeb4:	d1de      	bne.n	800ae74 <_dtoa_r+0xa74>
 800aeb6:	07da      	lsls	r2, r3, #31
 800aeb8:	d5dc      	bpl.n	800ae74 <_dtoa_r+0xa74>
 800aeba:	2b39      	cmp	r3, #57	; 0x39
 800aebc:	d1d8      	bne.n	800ae70 <_dtoa_r+0xa70>
 800aebe:	2339      	movs	r3, #57	; 0x39
 800aec0:	9a04      	ldr	r2, [sp, #16]
 800aec2:	7013      	strb	r3, [r2, #0]
 800aec4:	463b      	mov	r3, r7
 800aec6:	461f      	mov	r7, r3
 800aec8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aecc:	3b01      	subs	r3, #1
 800aece:	2a39      	cmp	r2, #57	; 0x39
 800aed0:	d050      	beq.n	800af74 <_dtoa_r+0xb74>
 800aed2:	3201      	adds	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e747      	b.n	800ad68 <_dtoa_r+0x968>
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	dd03      	ble.n	800aee4 <_dtoa_r+0xae4>
 800aedc:	2b39      	cmp	r3, #57	; 0x39
 800aede:	d0ee      	beq.n	800aebe <_dtoa_r+0xabe>
 800aee0:	3301      	adds	r3, #1
 800aee2:	e7c7      	b.n	800ae74 <_dtoa_r+0xa74>
 800aee4:	9a08      	ldr	r2, [sp, #32]
 800aee6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aee8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aeec:	428a      	cmp	r2, r1
 800aeee:	d02a      	beq.n	800af46 <_dtoa_r+0xb46>
 800aef0:	4659      	mov	r1, fp
 800aef2:	2300      	movs	r3, #0
 800aef4:	220a      	movs	r2, #10
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 f9c8 	bl	800b28c <__multadd>
 800aefc:	45b0      	cmp	r8, r6
 800aefe:	4683      	mov	fp, r0
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	f04f 020a 	mov.w	r2, #10
 800af08:	4641      	mov	r1, r8
 800af0a:	4628      	mov	r0, r5
 800af0c:	d107      	bne.n	800af1e <_dtoa_r+0xb1e>
 800af0e:	f000 f9bd 	bl	800b28c <__multadd>
 800af12:	4680      	mov	r8, r0
 800af14:	4606      	mov	r6, r0
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	3301      	adds	r3, #1
 800af1a:	9308      	str	r3, [sp, #32]
 800af1c:	e775      	b.n	800ae0a <_dtoa_r+0xa0a>
 800af1e:	f000 f9b5 	bl	800b28c <__multadd>
 800af22:	4631      	mov	r1, r6
 800af24:	4680      	mov	r8, r0
 800af26:	2300      	movs	r3, #0
 800af28:	220a      	movs	r2, #10
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f9ae 	bl	800b28c <__multadd>
 800af30:	4606      	mov	r6, r0
 800af32:	e7f0      	b.n	800af16 <_dtoa_r+0xb16>
 800af34:	f1b9 0f00 	cmp.w	r9, #0
 800af38:	bfcc      	ite	gt
 800af3a:	464f      	movgt	r7, r9
 800af3c:	2701      	movle	r7, #1
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	9a03      	ldr	r2, [sp, #12]
 800af44:	4417      	add	r7, r2
 800af46:	4659      	mov	r1, fp
 800af48:	2201      	movs	r2, #1
 800af4a:	4628      	mov	r0, r5
 800af4c:	9308      	str	r3, [sp, #32]
 800af4e:	f000 fb49 	bl	800b5e4 <__lshift>
 800af52:	4621      	mov	r1, r4
 800af54:	4683      	mov	fp, r0
 800af56:	f000 fbb5 	bl	800b6c4 <__mcmp>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	dcb2      	bgt.n	800aec4 <_dtoa_r+0xac4>
 800af5e:	d102      	bne.n	800af66 <_dtoa_r+0xb66>
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	07db      	lsls	r3, r3, #31
 800af64:	d4ae      	bmi.n	800aec4 <_dtoa_r+0xac4>
 800af66:	463b      	mov	r3, r7
 800af68:	461f      	mov	r7, r3
 800af6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af6e:	2a30      	cmp	r2, #48	; 0x30
 800af70:	d0fa      	beq.n	800af68 <_dtoa_r+0xb68>
 800af72:	e6f9      	b.n	800ad68 <_dtoa_r+0x968>
 800af74:	9a03      	ldr	r2, [sp, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d1a5      	bne.n	800aec6 <_dtoa_r+0xac6>
 800af7a:	2331      	movs	r3, #49	; 0x31
 800af7c:	f10a 0a01 	add.w	sl, sl, #1
 800af80:	e779      	b.n	800ae76 <_dtoa_r+0xa76>
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <_dtoa_r+0xbd4>)
 800af84:	f7ff baa8 	b.w	800a4d8 <_dtoa_r+0xd8>
 800af88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f47f aa81 	bne.w	800a492 <_dtoa_r+0x92>
 800af90:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <_dtoa_r+0xbd8>)
 800af92:	f7ff baa1 	b.w	800a4d8 <_dtoa_r+0xd8>
 800af96:	f1b9 0f00 	cmp.w	r9, #0
 800af9a:	dc03      	bgt.n	800afa4 <_dtoa_r+0xba4>
 800af9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	f73f aecb 	bgt.w	800ad3a <_dtoa_r+0x93a>
 800afa4:	9f03      	ldr	r7, [sp, #12]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4658      	mov	r0, fp
 800afaa:	f7ff f99d 	bl	800a2e8 <quorem>
 800afae:	9a03      	ldr	r2, [sp, #12]
 800afb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afb4:	f807 3b01 	strb.w	r3, [r7], #1
 800afb8:	1aba      	subs	r2, r7, r2
 800afba:	4591      	cmp	r9, r2
 800afbc:	ddba      	ble.n	800af34 <_dtoa_r+0xb34>
 800afbe:	4659      	mov	r1, fp
 800afc0:	2300      	movs	r3, #0
 800afc2:	220a      	movs	r2, #10
 800afc4:	4628      	mov	r0, r5
 800afc6:	f000 f961 	bl	800b28c <__multadd>
 800afca:	4683      	mov	fp, r0
 800afcc:	e7eb      	b.n	800afa6 <_dtoa_r+0xba6>
 800afce:	bf00      	nop
 800afd0:	0800cafb 	.word	0x0800cafb
 800afd4:	0800ca58 	.word	0x0800ca58
 800afd8:	0800ca7c 	.word	0x0800ca7c

0800afdc <__sflush_r>:
 800afdc:	898a      	ldrh	r2, [r1, #12]
 800afde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe0:	4605      	mov	r5, r0
 800afe2:	0710      	lsls	r0, r2, #28
 800afe4:	460c      	mov	r4, r1
 800afe6:	d457      	bmi.n	800b098 <__sflush_r+0xbc>
 800afe8:	684b      	ldr	r3, [r1, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc04      	bgt.n	800aff8 <__sflush_r+0x1c>
 800afee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dc01      	bgt.n	800aff8 <__sflush_r+0x1c>
 800aff4:	2000      	movs	r0, #0
 800aff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affa:	2e00      	cmp	r6, #0
 800affc:	d0fa      	beq.n	800aff4 <__sflush_r+0x18>
 800affe:	2300      	movs	r3, #0
 800b000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b004:	682f      	ldr	r7, [r5, #0]
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	d032      	beq.n	800b070 <__sflush_r+0x94>
 800b00a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	075a      	lsls	r2, r3, #29
 800b010:	d505      	bpl.n	800b01e <__sflush_r+0x42>
 800b012:	6863      	ldr	r3, [r4, #4]
 800b014:	1ac0      	subs	r0, r0, r3
 800b016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b018:	b10b      	cbz	r3, 800b01e <__sflush_r+0x42>
 800b01a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b01c:	1ac0      	subs	r0, r0, r3
 800b01e:	2300      	movs	r3, #0
 800b020:	4602      	mov	r2, r0
 800b022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b024:	4628      	mov	r0, r5
 800b026:	6a21      	ldr	r1, [r4, #32]
 800b028:	47b0      	blx	r6
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	d106      	bne.n	800b03e <__sflush_r+0x62>
 800b030:	6829      	ldr	r1, [r5, #0]
 800b032:	291d      	cmp	r1, #29
 800b034:	d82c      	bhi.n	800b090 <__sflush_r+0xb4>
 800b036:	4a29      	ldr	r2, [pc, #164]	; (800b0dc <__sflush_r+0x100>)
 800b038:	40ca      	lsrs	r2, r1
 800b03a:	07d6      	lsls	r6, r2, #31
 800b03c:	d528      	bpl.n	800b090 <__sflush_r+0xb4>
 800b03e:	2200      	movs	r2, #0
 800b040:	6062      	str	r2, [r4, #4]
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	04d9      	lsls	r1, r3, #19
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	d504      	bpl.n	800b054 <__sflush_r+0x78>
 800b04a:	1c42      	adds	r2, r0, #1
 800b04c:	d101      	bne.n	800b052 <__sflush_r+0x76>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b903      	cbnz	r3, 800b054 <__sflush_r+0x78>
 800b052:	6560      	str	r0, [r4, #84]	; 0x54
 800b054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	2900      	cmp	r1, #0
 800b05a:	d0cb      	beq.n	800aff4 <__sflush_r+0x18>
 800b05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b060:	4299      	cmp	r1, r3
 800b062:	d002      	beq.n	800b06a <__sflush_r+0x8e>
 800b064:	4628      	mov	r0, r5
 800b066:	f000 fc45 	bl	800b8f4 <_free_r>
 800b06a:	2000      	movs	r0, #0
 800b06c:	6360      	str	r0, [r4, #52]	; 0x34
 800b06e:	e7c2      	b.n	800aff6 <__sflush_r+0x1a>
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	2301      	movs	r3, #1
 800b074:	4628      	mov	r0, r5
 800b076:	47b0      	blx	r6
 800b078:	1c41      	adds	r1, r0, #1
 800b07a:	d1c7      	bne.n	800b00c <__sflush_r+0x30>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0c4      	beq.n	800b00c <__sflush_r+0x30>
 800b082:	2b1d      	cmp	r3, #29
 800b084:	d001      	beq.n	800b08a <__sflush_r+0xae>
 800b086:	2b16      	cmp	r3, #22
 800b088:	d101      	bne.n	800b08e <__sflush_r+0xb2>
 800b08a:	602f      	str	r7, [r5, #0]
 800b08c:	e7b2      	b.n	800aff4 <__sflush_r+0x18>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7ae      	b.n	800aff6 <__sflush_r+0x1a>
 800b098:	690f      	ldr	r7, [r1, #16]
 800b09a:	2f00      	cmp	r7, #0
 800b09c:	d0aa      	beq.n	800aff4 <__sflush_r+0x18>
 800b09e:	0793      	lsls	r3, r2, #30
 800b0a0:	bf18      	it	ne
 800b0a2:	2300      	movne	r3, #0
 800b0a4:	680e      	ldr	r6, [r1, #0]
 800b0a6:	bf08      	it	eq
 800b0a8:	694b      	ldreq	r3, [r1, #20]
 800b0aa:	1bf6      	subs	r6, r6, r7
 800b0ac:	600f      	str	r7, [r1, #0]
 800b0ae:	608b      	str	r3, [r1, #8]
 800b0b0:	2e00      	cmp	r6, #0
 800b0b2:	dd9f      	ble.n	800aff4 <__sflush_r+0x18>
 800b0b4:	4633      	mov	r3, r6
 800b0b6:	463a      	mov	r2, r7
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	6a21      	ldr	r1, [r4, #32]
 800b0bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b0c0:	47e0      	blx	ip
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	dc06      	bgt.n	800b0d4 <__sflush_r+0xf8>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e790      	b.n	800aff6 <__sflush_r+0x1a>
 800b0d4:	4407      	add	r7, r0
 800b0d6:	1a36      	subs	r6, r6, r0
 800b0d8:	e7ea      	b.n	800b0b0 <__sflush_r+0xd4>
 800b0da:	bf00      	nop
 800b0dc:	20400001 	.word	0x20400001

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f7fe fa27 	bl	8009548 <__sinit>
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <_fflush_r+0x6c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d11b      	bne.n	800b138 <_fflush_r+0x58>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0ef      	beq.n	800b0ea <_fflush_r+0xa>
 800b10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b10c:	07d0      	lsls	r0, r2, #31
 800b10e:	d404      	bmi.n	800b11a <_fflush_r+0x3a>
 800b110:	0599      	lsls	r1, r3, #22
 800b112:	d402      	bmi.n	800b11a <_fflush_r+0x3a>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f7fe fada 	bl	80096ce <__retarget_lock_acquire_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7ff ff5d 	bl	800afdc <__sflush_r>
 800b122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b124:	4605      	mov	r5, r0
 800b126:	07da      	lsls	r2, r3, #31
 800b128:	d4e0      	bmi.n	800b0ec <_fflush_r+0xc>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	059b      	lsls	r3, r3, #22
 800b12e:	d4dd      	bmi.n	800b0ec <_fflush_r+0xc>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f7fe facd 	bl	80096d0 <__retarget_lock_release_recursive>
 800b136:	e7d9      	b.n	800b0ec <_fflush_r+0xc>
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <_fflush_r+0x70>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_fflush_r+0x62>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7df      	b.n	800b102 <_fflush_r+0x22>
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <_fflush_r+0x74>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7da      	b.n	800b102 <_fflush_r+0x22>
 800b14c:	0800ca04 	.word	0x0800ca04
 800b150:	0800ca24 	.word	0x0800ca24
 800b154:	0800c9e4 	.word	0x0800c9e4

0800b158 <_localeconv_r>:
 800b158:	4800      	ldr	r0, [pc, #0]	; (800b15c <_localeconv_r+0x4>)
 800b15a:	4770      	bx	lr
 800b15c:	2000016c 	.word	0x2000016c

0800b160 <_lseek_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	4611      	mov	r1, r2
 800b168:	2200      	movs	r2, #0
 800b16a:	4d05      	ldr	r5, [pc, #20]	; (800b180 <_lseek_r+0x20>)
 800b16c:	602a      	str	r2, [r5, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	f7f7 ff58 	bl	8003024 <_lseek>
 800b174:	1c43      	adds	r3, r0, #1
 800b176:	d102      	bne.n	800b17e <_lseek_r+0x1e>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	b103      	cbz	r3, 800b17e <_lseek_r+0x1e>
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	bd38      	pop	{r3, r4, r5, pc}
 800b180:	20001e00 	.word	0x20001e00

0800b184 <malloc>:
 800b184:	4b02      	ldr	r3, [pc, #8]	; (800b190 <malloc+0xc>)
 800b186:	4601      	mov	r1, r0
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	f7fe bad9 	b.w	8009740 <_malloc_r>
 800b18e:	bf00      	nop
 800b190:	20000018 	.word	0x20000018

0800b194 <memchr>:
 800b194:	4603      	mov	r3, r0
 800b196:	b510      	push	{r4, lr}
 800b198:	b2c9      	uxtb	r1, r1
 800b19a:	4402      	add	r2, r0
 800b19c:	4293      	cmp	r3, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	d101      	bne.n	800b1a6 <memchr+0x12>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e003      	b.n	800b1ae <memchr+0x1a>
 800b1a6:	7804      	ldrb	r4, [r0, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	428c      	cmp	r4, r1
 800b1ac:	d1f6      	bne.n	800b19c <memchr+0x8>
 800b1ae:	bd10      	pop	{r4, pc}

0800b1b0 <__malloc_lock>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__malloc_lock+0x8>)
 800b1b2:	f7fe ba8c 	b.w	80096ce <__retarget_lock_acquire_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	20001df4 	.word	0x20001df4

0800b1bc <__malloc_unlock>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__malloc_unlock+0x8>)
 800b1be:	f7fe ba87 	b.w	80096d0 <__retarget_lock_release_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20001df4 	.word	0x20001df4

0800b1c8 <_Balloc>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	b976      	cbnz	r6, 800b1f0 <_Balloc+0x28>
 800b1d2:	2010      	movs	r0, #16
 800b1d4:	f7ff ffd6 	bl	800b184 <malloc>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	6260      	str	r0, [r4, #36]	; 0x24
 800b1dc:	b920      	cbnz	r0, 800b1e8 <_Balloc+0x20>
 800b1de:	2166      	movs	r1, #102	; 0x66
 800b1e0:	4b17      	ldr	r3, [pc, #92]	; (800b240 <_Balloc+0x78>)
 800b1e2:	4818      	ldr	r0, [pc, #96]	; (800b244 <_Balloc+0x7c>)
 800b1e4:	f000 fd3c 	bl	800bc60 <__assert_func>
 800b1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ec:	6006      	str	r6, [r0, #0]
 800b1ee:	60c6      	str	r6, [r0, #12]
 800b1f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1f2:	68f3      	ldr	r3, [r6, #12]
 800b1f4:	b183      	cbz	r3, 800b218 <_Balloc+0x50>
 800b1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1fe:	b9b8      	cbnz	r0, 800b230 <_Balloc+0x68>
 800b200:	2101      	movs	r1, #1
 800b202:	fa01 f605 	lsl.w	r6, r1, r5
 800b206:	1d72      	adds	r2, r6, #5
 800b208:	4620      	mov	r0, r4
 800b20a:	0092      	lsls	r2, r2, #2
 800b20c:	f000 fb5e 	bl	800b8cc <_calloc_r>
 800b210:	b160      	cbz	r0, 800b22c <_Balloc+0x64>
 800b212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b216:	e00e      	b.n	800b236 <_Balloc+0x6e>
 800b218:	2221      	movs	r2, #33	; 0x21
 800b21a:	2104      	movs	r1, #4
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fb55 	bl	800b8cc <_calloc_r>
 800b222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b224:	60f0      	str	r0, [r6, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1e4      	bne.n	800b1f6 <_Balloc+0x2e>
 800b22c:	2000      	movs	r0, #0
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	6802      	ldr	r2, [r0, #0]
 800b232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b236:	2300      	movs	r3, #0
 800b238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b23c:	e7f7      	b.n	800b22e <_Balloc+0x66>
 800b23e:	bf00      	nop
 800b240:	0800ca89 	.word	0x0800ca89
 800b244:	0800cb0c 	.word	0x0800cb0c

0800b248 <_Bfree>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b24c:	4605      	mov	r5, r0
 800b24e:	460c      	mov	r4, r1
 800b250:	b976      	cbnz	r6, 800b270 <_Bfree+0x28>
 800b252:	2010      	movs	r0, #16
 800b254:	f7ff ff96 	bl	800b184 <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	6268      	str	r0, [r5, #36]	; 0x24
 800b25c:	b920      	cbnz	r0, 800b268 <_Bfree+0x20>
 800b25e:	218a      	movs	r1, #138	; 0x8a
 800b260:	4b08      	ldr	r3, [pc, #32]	; (800b284 <_Bfree+0x3c>)
 800b262:	4809      	ldr	r0, [pc, #36]	; (800b288 <_Bfree+0x40>)
 800b264:	f000 fcfc 	bl	800bc60 <__assert_func>
 800b268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b26c:	6006      	str	r6, [r0, #0]
 800b26e:	60c6      	str	r6, [r0, #12]
 800b270:	b13c      	cbz	r4, 800b282 <_Bfree+0x3a>
 800b272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b274:	6862      	ldr	r2, [r4, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b27c:	6021      	str	r1, [r4, #0]
 800b27e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	0800ca89 	.word	0x0800ca89
 800b288:	0800cb0c 	.word	0x0800cb0c

0800b28c <__multadd>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4607      	mov	r7, r0
 800b292:	460c      	mov	r4, r1
 800b294:	461e      	mov	r6, r3
 800b296:	2000      	movs	r0, #0
 800b298:	690d      	ldr	r5, [r1, #16]
 800b29a:	f101 0c14 	add.w	ip, r1, #20
 800b29e:	f8dc 3000 	ldr.w	r3, [ip]
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	b299      	uxth	r1, r3
 800b2a6:	fb02 6101 	mla	r1, r2, r1, r6
 800b2aa:	0c1e      	lsrs	r6, r3, #16
 800b2ac:	0c0b      	lsrs	r3, r1, #16
 800b2ae:	fb02 3306 	mla	r3, r2, r6, r3
 800b2b2:	b289      	uxth	r1, r1
 800b2b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2b8:	4285      	cmp	r5, r0
 800b2ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2be:	f84c 1b04 	str.w	r1, [ip], #4
 800b2c2:	dcec      	bgt.n	800b29e <__multadd+0x12>
 800b2c4:	b30e      	cbz	r6, 800b30a <__multadd+0x7e>
 800b2c6:	68a3      	ldr	r3, [r4, #8]
 800b2c8:	42ab      	cmp	r3, r5
 800b2ca:	dc19      	bgt.n	800b300 <__multadd+0x74>
 800b2cc:	6861      	ldr	r1, [r4, #4]
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	3101      	adds	r1, #1
 800b2d2:	f7ff ff79 	bl	800b1c8 <_Balloc>
 800b2d6:	4680      	mov	r8, r0
 800b2d8:	b928      	cbnz	r0, 800b2e6 <__multadd+0x5a>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	21b5      	movs	r1, #181	; 0xb5
 800b2de:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <__multadd+0x84>)
 800b2e0:	480c      	ldr	r0, [pc, #48]	; (800b314 <__multadd+0x88>)
 800b2e2:	f000 fcbd 	bl	800bc60 <__assert_func>
 800b2e6:	6922      	ldr	r2, [r4, #16]
 800b2e8:	f104 010c 	add.w	r1, r4, #12
 800b2ec:	3202      	adds	r2, #2
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	300c      	adds	r0, #12
 800b2f2:	f7fe f9ee 	bl	80096d2 <memcpy>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff ffa5 	bl	800b248 <_Bfree>
 800b2fe:	4644      	mov	r4, r8
 800b300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b304:	3501      	adds	r5, #1
 800b306:	615e      	str	r6, [r3, #20]
 800b308:	6125      	str	r5, [r4, #16]
 800b30a:	4620      	mov	r0, r4
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	0800cafb 	.word	0x0800cafb
 800b314:	0800cb0c 	.word	0x0800cb0c

0800b318 <__hi0bits>:
 800b318:	0c02      	lsrs	r2, r0, #16
 800b31a:	0412      	lsls	r2, r2, #16
 800b31c:	4603      	mov	r3, r0
 800b31e:	b9ca      	cbnz	r2, 800b354 <__hi0bits+0x3c>
 800b320:	0403      	lsls	r3, r0, #16
 800b322:	2010      	movs	r0, #16
 800b324:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b328:	bf04      	itt	eq
 800b32a:	021b      	lsleq	r3, r3, #8
 800b32c:	3008      	addeq	r0, #8
 800b32e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b332:	bf04      	itt	eq
 800b334:	011b      	lsleq	r3, r3, #4
 800b336:	3004      	addeq	r0, #4
 800b338:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b33c:	bf04      	itt	eq
 800b33e:	009b      	lsleq	r3, r3, #2
 800b340:	3002      	addeq	r0, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	db05      	blt.n	800b352 <__hi0bits+0x3a>
 800b346:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b34a:	f100 0001 	add.w	r0, r0, #1
 800b34e:	bf08      	it	eq
 800b350:	2020      	moveq	r0, #32
 800b352:	4770      	bx	lr
 800b354:	2000      	movs	r0, #0
 800b356:	e7e5      	b.n	800b324 <__hi0bits+0xc>

0800b358 <__lo0bits>:
 800b358:	6803      	ldr	r3, [r0, #0]
 800b35a:	4602      	mov	r2, r0
 800b35c:	f013 0007 	ands.w	r0, r3, #7
 800b360:	d00b      	beq.n	800b37a <__lo0bits+0x22>
 800b362:	07d9      	lsls	r1, r3, #31
 800b364:	d421      	bmi.n	800b3aa <__lo0bits+0x52>
 800b366:	0798      	lsls	r0, r3, #30
 800b368:	bf49      	itett	mi
 800b36a:	085b      	lsrmi	r3, r3, #1
 800b36c:	089b      	lsrpl	r3, r3, #2
 800b36e:	2001      	movmi	r0, #1
 800b370:	6013      	strmi	r3, [r2, #0]
 800b372:	bf5c      	itt	pl
 800b374:	2002      	movpl	r0, #2
 800b376:	6013      	strpl	r3, [r2, #0]
 800b378:	4770      	bx	lr
 800b37a:	b299      	uxth	r1, r3
 800b37c:	b909      	cbnz	r1, 800b382 <__lo0bits+0x2a>
 800b37e:	2010      	movs	r0, #16
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	b2d9      	uxtb	r1, r3
 800b384:	b909      	cbnz	r1, 800b38a <__lo0bits+0x32>
 800b386:	3008      	adds	r0, #8
 800b388:	0a1b      	lsrs	r3, r3, #8
 800b38a:	0719      	lsls	r1, r3, #28
 800b38c:	bf04      	itt	eq
 800b38e:	091b      	lsreq	r3, r3, #4
 800b390:	3004      	addeq	r0, #4
 800b392:	0799      	lsls	r1, r3, #30
 800b394:	bf04      	itt	eq
 800b396:	089b      	lsreq	r3, r3, #2
 800b398:	3002      	addeq	r0, #2
 800b39a:	07d9      	lsls	r1, r3, #31
 800b39c:	d403      	bmi.n	800b3a6 <__lo0bits+0x4e>
 800b39e:	085b      	lsrs	r3, r3, #1
 800b3a0:	f100 0001 	add.w	r0, r0, #1
 800b3a4:	d003      	beq.n	800b3ae <__lo0bits+0x56>
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	4770      	bx	lr
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	4770      	bx	lr
 800b3ae:	2020      	movs	r0, #32
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <__i2b>:
 800b3b4:	b510      	push	{r4, lr}
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	f7ff ff05 	bl	800b1c8 <_Balloc>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	b928      	cbnz	r0, 800b3ce <__i2b+0x1a>
 800b3c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <__i2b+0x24>)
 800b3c8:	4804      	ldr	r0, [pc, #16]	; (800b3dc <__i2b+0x28>)
 800b3ca:	f000 fc49 	bl	800bc60 <__assert_func>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	6144      	str	r4, [r0, #20]
 800b3d2:	6103      	str	r3, [r0, #16]
 800b3d4:	bd10      	pop	{r4, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0800cafb 	.word	0x0800cafb
 800b3dc:	0800cb0c 	.word	0x0800cb0c

0800b3e0 <__multiply>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	4691      	mov	r9, r2
 800b3e6:	690a      	ldr	r2, [r1, #16]
 800b3e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	bfbe      	ittt	lt
 800b3f2:	460b      	movlt	r3, r1
 800b3f4:	464c      	movlt	r4, r9
 800b3f6:	4699      	movlt	r9, r3
 800b3f8:	6927      	ldr	r7, [r4, #16]
 800b3fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	6861      	ldr	r1, [r4, #4]
 800b402:	eb07 060a 	add.w	r6, r7, sl
 800b406:	42b3      	cmp	r3, r6
 800b408:	b085      	sub	sp, #20
 800b40a:	bfb8      	it	lt
 800b40c:	3101      	addlt	r1, #1
 800b40e:	f7ff fedb 	bl	800b1c8 <_Balloc>
 800b412:	b930      	cbnz	r0, 800b422 <__multiply+0x42>
 800b414:	4602      	mov	r2, r0
 800b416:	f240 115d 	movw	r1, #349	; 0x15d
 800b41a:	4b43      	ldr	r3, [pc, #268]	; (800b528 <__multiply+0x148>)
 800b41c:	4843      	ldr	r0, [pc, #268]	; (800b52c <__multiply+0x14c>)
 800b41e:	f000 fc1f 	bl	800bc60 <__assert_func>
 800b422:	f100 0514 	add.w	r5, r0, #20
 800b426:	462b      	mov	r3, r5
 800b428:	2200      	movs	r2, #0
 800b42a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b42e:	4543      	cmp	r3, r8
 800b430:	d321      	bcc.n	800b476 <__multiply+0x96>
 800b432:	f104 0314 	add.w	r3, r4, #20
 800b436:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b43a:	f109 0314 	add.w	r3, r9, #20
 800b43e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b442:	9202      	str	r2, [sp, #8]
 800b444:	1b3a      	subs	r2, r7, r4
 800b446:	3a15      	subs	r2, #21
 800b448:	f022 0203 	bic.w	r2, r2, #3
 800b44c:	3204      	adds	r2, #4
 800b44e:	f104 0115 	add.w	r1, r4, #21
 800b452:	428f      	cmp	r7, r1
 800b454:	bf38      	it	cc
 800b456:	2204      	movcc	r2, #4
 800b458:	9201      	str	r2, [sp, #4]
 800b45a:	9a02      	ldr	r2, [sp, #8]
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d80c      	bhi.n	800b47c <__multiply+0x9c>
 800b462:	2e00      	cmp	r6, #0
 800b464:	dd03      	ble.n	800b46e <__multiply+0x8e>
 800b466:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d059      	beq.n	800b522 <__multiply+0x142>
 800b46e:	6106      	str	r6, [r0, #16]
 800b470:	b005      	add	sp, #20
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	f843 2b04 	str.w	r2, [r3], #4
 800b47a:	e7d8      	b.n	800b42e <__multiply+0x4e>
 800b47c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b480:	f1ba 0f00 	cmp.w	sl, #0
 800b484:	d023      	beq.n	800b4ce <__multiply+0xee>
 800b486:	46a9      	mov	r9, r5
 800b488:	f04f 0c00 	mov.w	ip, #0
 800b48c:	f104 0e14 	add.w	lr, r4, #20
 800b490:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b494:	f8d9 1000 	ldr.w	r1, [r9]
 800b498:	fa1f fb82 	uxth.w	fp, r2
 800b49c:	b289      	uxth	r1, r1
 800b49e:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4a2:	4461      	add	r1, ip
 800b4a4:	f8d9 c000 	ldr.w	ip, [r9]
 800b4a8:	0c12      	lsrs	r2, r2, #16
 800b4aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b4ae:	fb0a c202 	mla	r2, sl, r2, ip
 800b4b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4b6:	b289      	uxth	r1, r1
 800b4b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4bc:	4577      	cmp	r7, lr
 800b4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4c2:	f849 1b04 	str.w	r1, [r9], #4
 800b4c6:	d8e3      	bhi.n	800b490 <__multiply+0xb0>
 800b4c8:	9a01      	ldr	r2, [sp, #4]
 800b4ca:	f845 c002 	str.w	ip, [r5, r2]
 800b4ce:	9a03      	ldr	r2, [sp, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4d6:	f1b9 0f00 	cmp.w	r9, #0
 800b4da:	d020      	beq.n	800b51e <__multiply+0x13e>
 800b4dc:	46ae      	mov	lr, r5
 800b4de:	f04f 0a00 	mov.w	sl, #0
 800b4e2:	6829      	ldr	r1, [r5, #0]
 800b4e4:	f104 0c14 	add.w	ip, r4, #20
 800b4e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b4ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4f0:	b289      	uxth	r1, r1
 800b4f2:	fb09 220b 	mla	r2, r9, fp, r2
 800b4f6:	4492      	add	sl, r2
 800b4f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4fc:	f84e 1b04 	str.w	r1, [lr], #4
 800b500:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b504:	f8be 1000 	ldrh.w	r1, [lr]
 800b508:	0c12      	lsrs	r2, r2, #16
 800b50a:	fb09 1102 	mla	r1, r9, r2, r1
 800b50e:	4567      	cmp	r7, ip
 800b510:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b518:	d8e6      	bhi.n	800b4e8 <__multiply+0x108>
 800b51a:	9a01      	ldr	r2, [sp, #4]
 800b51c:	50a9      	str	r1, [r5, r2]
 800b51e:	3504      	adds	r5, #4
 800b520:	e79b      	b.n	800b45a <__multiply+0x7a>
 800b522:	3e01      	subs	r6, #1
 800b524:	e79d      	b.n	800b462 <__multiply+0x82>
 800b526:	bf00      	nop
 800b528:	0800cafb 	.word	0x0800cafb
 800b52c:	0800cb0c 	.word	0x0800cb0c

0800b530 <__pow5mult>:
 800b530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b534:	4615      	mov	r5, r2
 800b536:	f012 0203 	ands.w	r2, r2, #3
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	d007      	beq.n	800b550 <__pow5mult+0x20>
 800b540:	4c25      	ldr	r4, [pc, #148]	; (800b5d8 <__pow5mult+0xa8>)
 800b542:	3a01      	subs	r2, #1
 800b544:	2300      	movs	r3, #0
 800b546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b54a:	f7ff fe9f 	bl	800b28c <__multadd>
 800b54e:	4607      	mov	r7, r0
 800b550:	10ad      	asrs	r5, r5, #2
 800b552:	d03d      	beq.n	800b5d0 <__pow5mult+0xa0>
 800b554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b556:	b97c      	cbnz	r4, 800b578 <__pow5mult+0x48>
 800b558:	2010      	movs	r0, #16
 800b55a:	f7ff fe13 	bl	800b184 <malloc>
 800b55e:	4602      	mov	r2, r0
 800b560:	6270      	str	r0, [r6, #36]	; 0x24
 800b562:	b928      	cbnz	r0, 800b570 <__pow5mult+0x40>
 800b564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b568:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <__pow5mult+0xac>)
 800b56a:	481d      	ldr	r0, [pc, #116]	; (800b5e0 <__pow5mult+0xb0>)
 800b56c:	f000 fb78 	bl	800bc60 <__assert_func>
 800b570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b574:	6004      	str	r4, [r0, #0]
 800b576:	60c4      	str	r4, [r0, #12]
 800b578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b580:	b94c      	cbnz	r4, 800b596 <__pow5mult+0x66>
 800b582:	f240 2171 	movw	r1, #625	; 0x271
 800b586:	4630      	mov	r0, r6
 800b588:	f7ff ff14 	bl	800b3b4 <__i2b>
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	f8c8 0008 	str.w	r0, [r8, #8]
 800b594:	6003      	str	r3, [r0, #0]
 800b596:	f04f 0900 	mov.w	r9, #0
 800b59a:	07eb      	lsls	r3, r5, #31
 800b59c:	d50a      	bpl.n	800b5b4 <__pow5mult+0x84>
 800b59e:	4639      	mov	r1, r7
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ff1c 	bl	800b3e0 <__multiply>
 800b5a8:	4680      	mov	r8, r0
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff fe4b 	bl	800b248 <_Bfree>
 800b5b2:	4647      	mov	r7, r8
 800b5b4:	106d      	asrs	r5, r5, #1
 800b5b6:	d00b      	beq.n	800b5d0 <__pow5mult+0xa0>
 800b5b8:	6820      	ldr	r0, [r4, #0]
 800b5ba:	b938      	cbnz	r0, 800b5cc <__pow5mult+0x9c>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7ff ff0d 	bl	800b3e0 <__multiply>
 800b5c6:	6020      	str	r0, [r4, #0]
 800b5c8:	f8c0 9000 	str.w	r9, [r0]
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	e7e4      	b.n	800b59a <__pow5mult+0x6a>
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d6:	bf00      	nop
 800b5d8:	0800cc58 	.word	0x0800cc58
 800b5dc:	0800ca89 	.word	0x0800ca89
 800b5e0:	0800cb0c 	.word	0x0800cb0c

0800b5e4 <__lshift>:
 800b5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	4607      	mov	r7, r0
 800b5ec:	4691      	mov	r9, r2
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	6849      	ldr	r1, [r1, #4]
 800b5f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5f6:	68a3      	ldr	r3, [r4, #8]
 800b5f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5fc:	f108 0601 	add.w	r6, r8, #1
 800b600:	42b3      	cmp	r3, r6
 800b602:	db0b      	blt.n	800b61c <__lshift+0x38>
 800b604:	4638      	mov	r0, r7
 800b606:	f7ff fddf 	bl	800b1c8 <_Balloc>
 800b60a:	4605      	mov	r5, r0
 800b60c:	b948      	cbnz	r0, 800b622 <__lshift+0x3e>
 800b60e:	4602      	mov	r2, r0
 800b610:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b614:	4b29      	ldr	r3, [pc, #164]	; (800b6bc <__lshift+0xd8>)
 800b616:	482a      	ldr	r0, [pc, #168]	; (800b6c0 <__lshift+0xdc>)
 800b618:	f000 fb22 	bl	800bc60 <__assert_func>
 800b61c:	3101      	adds	r1, #1
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	e7ee      	b.n	800b600 <__lshift+0x1c>
 800b622:	2300      	movs	r3, #0
 800b624:	f100 0114 	add.w	r1, r0, #20
 800b628:	f100 0210 	add.w	r2, r0, #16
 800b62c:	4618      	mov	r0, r3
 800b62e:	4553      	cmp	r3, sl
 800b630:	db37      	blt.n	800b6a2 <__lshift+0xbe>
 800b632:	6920      	ldr	r0, [r4, #16]
 800b634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b638:	f104 0314 	add.w	r3, r4, #20
 800b63c:	f019 091f 	ands.w	r9, r9, #31
 800b640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b644:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b648:	d02f      	beq.n	800b6aa <__lshift+0xc6>
 800b64a:	468a      	mov	sl, r1
 800b64c:	f04f 0c00 	mov.w	ip, #0
 800b650:	f1c9 0e20 	rsb	lr, r9, #32
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	fa02 f209 	lsl.w	r2, r2, r9
 800b65a:	ea42 020c 	orr.w	r2, r2, ip
 800b65e:	f84a 2b04 	str.w	r2, [sl], #4
 800b662:	f853 2b04 	ldr.w	r2, [r3], #4
 800b666:	4298      	cmp	r0, r3
 800b668:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b66c:	d8f2      	bhi.n	800b654 <__lshift+0x70>
 800b66e:	1b03      	subs	r3, r0, r4
 800b670:	3b15      	subs	r3, #21
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	3304      	adds	r3, #4
 800b678:	f104 0215 	add.w	r2, r4, #21
 800b67c:	4290      	cmp	r0, r2
 800b67e:	bf38      	it	cc
 800b680:	2304      	movcc	r3, #4
 800b682:	f841 c003 	str.w	ip, [r1, r3]
 800b686:	f1bc 0f00 	cmp.w	ip, #0
 800b68a:	d001      	beq.n	800b690 <__lshift+0xac>
 800b68c:	f108 0602 	add.w	r6, r8, #2
 800b690:	3e01      	subs	r6, #1
 800b692:	4638      	mov	r0, r7
 800b694:	4621      	mov	r1, r4
 800b696:	612e      	str	r6, [r5, #16]
 800b698:	f7ff fdd6 	bl	800b248 <_Bfree>
 800b69c:	4628      	mov	r0, r5
 800b69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	e7c1      	b.n	800b62e <__lshift+0x4a>
 800b6aa:	3904      	subs	r1, #4
 800b6ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6b0:	4298      	cmp	r0, r3
 800b6b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6b6:	d8f9      	bhi.n	800b6ac <__lshift+0xc8>
 800b6b8:	e7ea      	b.n	800b690 <__lshift+0xac>
 800b6ba:	bf00      	nop
 800b6bc:	0800cafb 	.word	0x0800cafb
 800b6c0:	0800cb0c 	.word	0x0800cb0c

0800b6c4 <__mcmp>:
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	690a      	ldr	r2, [r1, #16]
 800b6c8:	6900      	ldr	r0, [r0, #16]
 800b6ca:	b530      	push	{r4, r5, lr}
 800b6cc:	1a80      	subs	r0, r0, r2
 800b6ce:	d10d      	bne.n	800b6ec <__mcmp+0x28>
 800b6d0:	3314      	adds	r3, #20
 800b6d2:	3114      	adds	r1, #20
 800b6d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6e4:	4295      	cmp	r5, r2
 800b6e6:	d002      	beq.n	800b6ee <__mcmp+0x2a>
 800b6e8:	d304      	bcc.n	800b6f4 <__mcmp+0x30>
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	bd30      	pop	{r4, r5, pc}
 800b6ee:	42a3      	cmp	r3, r4
 800b6f0:	d3f4      	bcc.n	800b6dc <__mcmp+0x18>
 800b6f2:	e7fb      	b.n	800b6ec <__mcmp+0x28>
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	e7f8      	b.n	800b6ec <__mcmp+0x28>
	...

0800b6fc <__mdiff>:
 800b6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	460d      	mov	r5, r1
 800b702:	4607      	mov	r7, r0
 800b704:	4611      	mov	r1, r2
 800b706:	4628      	mov	r0, r5
 800b708:	4614      	mov	r4, r2
 800b70a:	f7ff ffdb 	bl	800b6c4 <__mcmp>
 800b70e:	1e06      	subs	r6, r0, #0
 800b710:	d111      	bne.n	800b736 <__mdiff+0x3a>
 800b712:	4631      	mov	r1, r6
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff fd57 	bl	800b1c8 <_Balloc>
 800b71a:	4602      	mov	r2, r0
 800b71c:	b928      	cbnz	r0, 800b72a <__mdiff+0x2e>
 800b71e:	f240 2132 	movw	r1, #562	; 0x232
 800b722:	4b3a      	ldr	r3, [pc, #232]	; (800b80c <__mdiff+0x110>)
 800b724:	483a      	ldr	r0, [pc, #232]	; (800b810 <__mdiff+0x114>)
 800b726:	f000 fa9b 	bl	800bc60 <__assert_func>
 800b72a:	2301      	movs	r3, #1
 800b72c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b730:	4610      	mov	r0, r2
 800b732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b736:	bfa4      	itt	ge
 800b738:	4623      	movge	r3, r4
 800b73a:	462c      	movge	r4, r5
 800b73c:	4638      	mov	r0, r7
 800b73e:	6861      	ldr	r1, [r4, #4]
 800b740:	bfa6      	itte	ge
 800b742:	461d      	movge	r5, r3
 800b744:	2600      	movge	r6, #0
 800b746:	2601      	movlt	r6, #1
 800b748:	f7ff fd3e 	bl	800b1c8 <_Balloc>
 800b74c:	4602      	mov	r2, r0
 800b74e:	b918      	cbnz	r0, 800b758 <__mdiff+0x5c>
 800b750:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b754:	4b2d      	ldr	r3, [pc, #180]	; (800b80c <__mdiff+0x110>)
 800b756:	e7e5      	b.n	800b724 <__mdiff+0x28>
 800b758:	f102 0814 	add.w	r8, r2, #20
 800b75c:	46c2      	mov	sl, r8
 800b75e:	f04f 0c00 	mov.w	ip, #0
 800b762:	6927      	ldr	r7, [r4, #16]
 800b764:	60c6      	str	r6, [r0, #12]
 800b766:	692e      	ldr	r6, [r5, #16]
 800b768:	f104 0014 	add.w	r0, r4, #20
 800b76c:	f105 0914 	add.w	r9, r5, #20
 800b770:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b774:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b778:	3410      	adds	r4, #16
 800b77a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b77e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b782:	fa1f f18b 	uxth.w	r1, fp
 800b786:	448c      	add	ip, r1
 800b788:	b299      	uxth	r1, r3
 800b78a:	0c1b      	lsrs	r3, r3, #16
 800b78c:	ebac 0101 	sub.w	r1, ip, r1
 800b790:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b794:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b798:	b289      	uxth	r1, r1
 800b79a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b79e:	454e      	cmp	r6, r9
 800b7a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b7a4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7a8:	d8e7      	bhi.n	800b77a <__mdiff+0x7e>
 800b7aa:	1b73      	subs	r3, r6, r5
 800b7ac:	3b15      	subs	r3, #21
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	3515      	adds	r5, #21
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	42ae      	cmp	r6, r5
 800b7b8:	bf38      	it	cc
 800b7ba:	2304      	movcc	r3, #4
 800b7bc:	4418      	add	r0, r3
 800b7be:	4443      	add	r3, r8
 800b7c0:	461e      	mov	r6, r3
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	4575      	cmp	r5, lr
 800b7c6:	d30e      	bcc.n	800b7e6 <__mdiff+0xea>
 800b7c8:	f10e 0103 	add.w	r1, lr, #3
 800b7cc:	1a09      	subs	r1, r1, r0
 800b7ce:	f021 0103 	bic.w	r1, r1, #3
 800b7d2:	3803      	subs	r0, #3
 800b7d4:	4586      	cmp	lr, r0
 800b7d6:	bf38      	it	cc
 800b7d8:	2100      	movcc	r1, #0
 800b7da:	4419      	add	r1, r3
 800b7dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7e0:	b18b      	cbz	r3, 800b806 <__mdiff+0x10a>
 800b7e2:	6117      	str	r7, [r2, #16]
 800b7e4:	e7a4      	b.n	800b730 <__mdiff+0x34>
 800b7e6:	f855 8b04 	ldr.w	r8, [r5], #4
 800b7ea:	fa1f f188 	uxth.w	r1, r8
 800b7ee:	4461      	add	r1, ip
 800b7f0:	140c      	asrs	r4, r1, #16
 800b7f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7f6:	b289      	uxth	r1, r1
 800b7f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b7fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b800:	f846 1b04 	str.w	r1, [r6], #4
 800b804:	e7de      	b.n	800b7c4 <__mdiff+0xc8>
 800b806:	3f01      	subs	r7, #1
 800b808:	e7e8      	b.n	800b7dc <__mdiff+0xe0>
 800b80a:	bf00      	nop
 800b80c:	0800cafb 	.word	0x0800cafb
 800b810:	0800cb0c 	.word	0x0800cb0c

0800b814 <__d2b>:
 800b814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b818:	2101      	movs	r1, #1
 800b81a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b81e:	4690      	mov	r8, r2
 800b820:	461d      	mov	r5, r3
 800b822:	f7ff fcd1 	bl	800b1c8 <_Balloc>
 800b826:	4604      	mov	r4, r0
 800b828:	b930      	cbnz	r0, 800b838 <__d2b+0x24>
 800b82a:	4602      	mov	r2, r0
 800b82c:	f240 310a 	movw	r1, #778	; 0x30a
 800b830:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <__d2b+0xb0>)
 800b832:	4825      	ldr	r0, [pc, #148]	; (800b8c8 <__d2b+0xb4>)
 800b834:	f000 fa14 	bl	800bc60 <__assert_func>
 800b838:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b83c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b840:	bb2d      	cbnz	r5, 800b88e <__d2b+0x7a>
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	f1b8 0300 	subs.w	r3, r8, #0
 800b848:	d026      	beq.n	800b898 <__d2b+0x84>
 800b84a:	4668      	mov	r0, sp
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	f7ff fd83 	bl	800b358 <__lo0bits>
 800b852:	9900      	ldr	r1, [sp, #0]
 800b854:	b1f0      	cbz	r0, 800b894 <__d2b+0x80>
 800b856:	9a01      	ldr	r2, [sp, #4]
 800b858:	f1c0 0320 	rsb	r3, r0, #32
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	430b      	orrs	r3, r1
 800b862:	40c2      	lsrs	r2, r0
 800b864:	6163      	str	r3, [r4, #20]
 800b866:	9201      	str	r2, [sp, #4]
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bf14      	ite	ne
 800b86e:	2102      	movne	r1, #2
 800b870:	2101      	moveq	r1, #1
 800b872:	61a3      	str	r3, [r4, #24]
 800b874:	6121      	str	r1, [r4, #16]
 800b876:	b1c5      	cbz	r5, 800b8aa <__d2b+0x96>
 800b878:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b87c:	4405      	add	r5, r0
 800b87e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b882:	603d      	str	r5, [r7, #0]
 800b884:	6030      	str	r0, [r6, #0]
 800b886:	4620      	mov	r0, r4
 800b888:	b002      	add	sp, #8
 800b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b892:	e7d6      	b.n	800b842 <__d2b+0x2e>
 800b894:	6161      	str	r1, [r4, #20]
 800b896:	e7e7      	b.n	800b868 <__d2b+0x54>
 800b898:	a801      	add	r0, sp, #4
 800b89a:	f7ff fd5d 	bl	800b358 <__lo0bits>
 800b89e:	2101      	movs	r1, #1
 800b8a0:	9b01      	ldr	r3, [sp, #4]
 800b8a2:	6121      	str	r1, [r4, #16]
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	3020      	adds	r0, #32
 800b8a8:	e7e5      	b.n	800b876 <__d2b+0x62>
 800b8aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b8ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8b2:	6038      	str	r0, [r7, #0]
 800b8b4:	6918      	ldr	r0, [r3, #16]
 800b8b6:	f7ff fd2f 	bl	800b318 <__hi0bits>
 800b8ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b8be:	6031      	str	r1, [r6, #0]
 800b8c0:	e7e1      	b.n	800b886 <__d2b+0x72>
 800b8c2:	bf00      	nop
 800b8c4:	0800cafb 	.word	0x0800cafb
 800b8c8:	0800cb0c 	.word	0x0800cb0c

0800b8cc <_calloc_r>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	fba1 5402 	umull	r5, r4, r1, r2
 800b8d2:	b934      	cbnz	r4, 800b8e2 <_calloc_r+0x16>
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7fd ff33 	bl	8009740 <_malloc_r>
 800b8da:	4606      	mov	r6, r0
 800b8dc:	b928      	cbnz	r0, 800b8ea <_calloc_r+0x1e>
 800b8de:	4630      	mov	r0, r6
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	220c      	movs	r2, #12
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	6002      	str	r2, [r0, #0]
 800b8e8:	e7f9      	b.n	800b8de <_calloc_r+0x12>
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	f7fd fefe 	bl	80096ee <memset>
 800b8f2:	e7f4      	b.n	800b8de <_calloc_r+0x12>

0800b8f4 <_free_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	d040      	beq.n	800b97e <_free_r+0x8a>
 800b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b900:	1f0c      	subs	r4, r1, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfb8      	it	lt
 800b906:	18e4      	addlt	r4, r4, r3
 800b908:	f7ff fc52 	bl	800b1b0 <__malloc_lock>
 800b90c:	4a1c      	ldr	r2, [pc, #112]	; (800b980 <_free_r+0x8c>)
 800b90e:	6813      	ldr	r3, [r2, #0]
 800b910:	b933      	cbnz	r3, 800b920 <_free_r+0x2c>
 800b912:	6063      	str	r3, [r4, #4]
 800b914:	6014      	str	r4, [r2, #0]
 800b916:	4628      	mov	r0, r5
 800b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91c:	f7ff bc4e 	b.w	800b1bc <__malloc_unlock>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d908      	bls.n	800b936 <_free_r+0x42>
 800b924:	6820      	ldr	r0, [r4, #0]
 800b926:	1821      	adds	r1, r4, r0
 800b928:	428b      	cmp	r3, r1
 800b92a:	bf01      	itttt	eq
 800b92c:	6819      	ldreq	r1, [r3, #0]
 800b92e:	685b      	ldreq	r3, [r3, #4]
 800b930:	1809      	addeq	r1, r1, r0
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	e7ed      	b.n	800b912 <_free_r+0x1e>
 800b936:	461a      	mov	r2, r3
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	b10b      	cbz	r3, 800b940 <_free_r+0x4c>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d9fa      	bls.n	800b936 <_free_r+0x42>
 800b940:	6811      	ldr	r1, [r2, #0]
 800b942:	1850      	adds	r0, r2, r1
 800b944:	42a0      	cmp	r0, r4
 800b946:	d10b      	bne.n	800b960 <_free_r+0x6c>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	4401      	add	r1, r0
 800b94c:	1850      	adds	r0, r2, r1
 800b94e:	4283      	cmp	r3, r0
 800b950:	6011      	str	r1, [r2, #0]
 800b952:	d1e0      	bne.n	800b916 <_free_r+0x22>
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	4401      	add	r1, r0
 800b95a:	6011      	str	r1, [r2, #0]
 800b95c:	6053      	str	r3, [r2, #4]
 800b95e:	e7da      	b.n	800b916 <_free_r+0x22>
 800b960:	d902      	bls.n	800b968 <_free_r+0x74>
 800b962:	230c      	movs	r3, #12
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	e7d6      	b.n	800b916 <_free_r+0x22>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	1821      	adds	r1, r4, r0
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf01      	itttt	eq
 800b970:	6819      	ldreq	r1, [r3, #0]
 800b972:	685b      	ldreq	r3, [r3, #4]
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	6063      	str	r3, [r4, #4]
 800b97a:	6054      	str	r4, [r2, #4]
 800b97c:	e7cb      	b.n	800b916 <_free_r+0x22>
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20001df8 	.word	0x20001df8

0800b984 <__ssputs_r>:
 800b984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b988:	688e      	ldr	r6, [r1, #8]
 800b98a:	4682      	mov	sl, r0
 800b98c:	429e      	cmp	r6, r3
 800b98e:	460c      	mov	r4, r1
 800b990:	4690      	mov	r8, r2
 800b992:	461f      	mov	r7, r3
 800b994:	d838      	bhi.n	800ba08 <__ssputs_r+0x84>
 800b996:	898a      	ldrh	r2, [r1, #12]
 800b998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b99c:	d032      	beq.n	800ba04 <__ssputs_r+0x80>
 800b99e:	6825      	ldr	r5, [r4, #0]
 800b9a0:	6909      	ldr	r1, [r1, #16]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	eba5 0901 	sub.w	r9, r5, r1
 800b9a8:	6965      	ldr	r5, [r4, #20]
 800b9aa:	444b      	add	r3, r9
 800b9ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9b4:	106d      	asrs	r5, r5, #1
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	bf38      	it	cc
 800b9ba:	461d      	movcc	r5, r3
 800b9bc:	0553      	lsls	r3, r2, #21
 800b9be:	d531      	bpl.n	800ba24 <__ssputs_r+0xa0>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7fd febd 	bl	8009740 <_malloc_r>
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	b950      	cbnz	r0, 800b9e0 <__ssputs_r+0x5c>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	f8ca 3000 	str.w	r3, [sl]
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e0:	464a      	mov	r2, r9
 800b9e2:	6921      	ldr	r1, [r4, #16]
 800b9e4:	f7fd fe75 	bl	80096d2 <memcpy>
 800b9e8:	89a3      	ldrh	r3, [r4, #12]
 800b9ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	6126      	str	r6, [r4, #16]
 800b9f6:	444e      	add	r6, r9
 800b9f8:	6026      	str	r6, [r4, #0]
 800b9fa:	463e      	mov	r6, r7
 800b9fc:	6165      	str	r5, [r4, #20]
 800b9fe:	eba5 0509 	sub.w	r5, r5, r9
 800ba02:	60a5      	str	r5, [r4, #8]
 800ba04:	42be      	cmp	r6, r7
 800ba06:	d900      	bls.n	800ba0a <__ssputs_r+0x86>
 800ba08:	463e      	mov	r6, r7
 800ba0a:	4632      	mov	r2, r6
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	6820      	ldr	r0, [r4, #0]
 800ba10:	f000 f968 	bl	800bce4 <memmove>
 800ba14:	68a3      	ldr	r3, [r4, #8]
 800ba16:	2000      	movs	r0, #0
 800ba18:	1b9b      	subs	r3, r3, r6
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	4433      	add	r3, r6
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	e7db      	b.n	800b9dc <__ssputs_r+0x58>
 800ba24:	462a      	mov	r2, r5
 800ba26:	f000 f977 	bl	800bd18 <_realloc_r>
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d1e1      	bne.n	800b9f4 <__ssputs_r+0x70>
 800ba30:	4650      	mov	r0, sl
 800ba32:	6921      	ldr	r1, [r4, #16]
 800ba34:	f7ff ff5e 	bl	800b8f4 <_free_r>
 800ba38:	e7c7      	b.n	800b9ca <__ssputs_r+0x46>
	...

0800ba3c <_svfiprintf_r>:
 800ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	4698      	mov	r8, r3
 800ba42:	898b      	ldrh	r3, [r1, #12]
 800ba44:	4607      	mov	r7, r0
 800ba46:	061b      	lsls	r3, r3, #24
 800ba48:	460d      	mov	r5, r1
 800ba4a:	4614      	mov	r4, r2
 800ba4c:	b09d      	sub	sp, #116	; 0x74
 800ba4e:	d50e      	bpl.n	800ba6e <_svfiprintf_r+0x32>
 800ba50:	690b      	ldr	r3, [r1, #16]
 800ba52:	b963      	cbnz	r3, 800ba6e <_svfiprintf_r+0x32>
 800ba54:	2140      	movs	r1, #64	; 0x40
 800ba56:	f7fd fe73 	bl	8009740 <_malloc_r>
 800ba5a:	6028      	str	r0, [r5, #0]
 800ba5c:	6128      	str	r0, [r5, #16]
 800ba5e:	b920      	cbnz	r0, 800ba6a <_svfiprintf_r+0x2e>
 800ba60:	230c      	movs	r3, #12
 800ba62:	603b      	str	r3, [r7, #0]
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295
 800ba68:	e0d1      	b.n	800bc0e <_svfiprintf_r+0x1d2>
 800ba6a:	2340      	movs	r3, #64	; 0x40
 800ba6c:	616b      	str	r3, [r5, #20]
 800ba6e:	2300      	movs	r3, #0
 800ba70:	9309      	str	r3, [sp, #36]	; 0x24
 800ba72:	2320      	movs	r3, #32
 800ba74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba78:	2330      	movs	r3, #48	; 0x30
 800ba7a:	f04f 0901 	mov.w	r9, #1
 800ba7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc28 <_svfiprintf_r+0x1ec>
 800ba86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba8a:	4623      	mov	r3, r4
 800ba8c:	469a      	mov	sl, r3
 800ba8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba92:	b10a      	cbz	r2, 800ba98 <_svfiprintf_r+0x5c>
 800ba94:	2a25      	cmp	r2, #37	; 0x25
 800ba96:	d1f9      	bne.n	800ba8c <_svfiprintf_r+0x50>
 800ba98:	ebba 0b04 	subs.w	fp, sl, r4
 800ba9c:	d00b      	beq.n	800bab6 <_svfiprintf_r+0x7a>
 800ba9e:	465b      	mov	r3, fp
 800baa0:	4622      	mov	r2, r4
 800baa2:	4629      	mov	r1, r5
 800baa4:	4638      	mov	r0, r7
 800baa6:	f7ff ff6d 	bl	800b984 <__ssputs_r>
 800baaa:	3001      	adds	r0, #1
 800baac:	f000 80aa 	beq.w	800bc04 <_svfiprintf_r+0x1c8>
 800bab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bab2:	445a      	add	r2, fp
 800bab4:	9209      	str	r2, [sp, #36]	; 0x24
 800bab6:	f89a 3000 	ldrb.w	r3, [sl]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 80a2 	beq.w	800bc04 <_svfiprintf_r+0x1c8>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295
 800bac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baca:	f10a 0a01 	add.w	sl, sl, #1
 800bace:	9304      	str	r3, [sp, #16]
 800bad0:	9307      	str	r3, [sp, #28]
 800bad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bad6:	931a      	str	r3, [sp, #104]	; 0x68
 800bad8:	4654      	mov	r4, sl
 800bada:	2205      	movs	r2, #5
 800badc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae0:	4851      	ldr	r0, [pc, #324]	; (800bc28 <_svfiprintf_r+0x1ec>)
 800bae2:	f7ff fb57 	bl	800b194 <memchr>
 800bae6:	9a04      	ldr	r2, [sp, #16]
 800bae8:	b9d8      	cbnz	r0, 800bb22 <_svfiprintf_r+0xe6>
 800baea:	06d0      	lsls	r0, r2, #27
 800baec:	bf44      	itt	mi
 800baee:	2320      	movmi	r3, #32
 800baf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baf4:	0711      	lsls	r1, r2, #28
 800baf6:	bf44      	itt	mi
 800baf8:	232b      	movmi	r3, #43	; 0x2b
 800bafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bafe:	f89a 3000 	ldrb.w	r3, [sl]
 800bb02:	2b2a      	cmp	r3, #42	; 0x2a
 800bb04:	d015      	beq.n	800bb32 <_svfiprintf_r+0xf6>
 800bb06:	4654      	mov	r4, sl
 800bb08:	2000      	movs	r0, #0
 800bb0a:	f04f 0c0a 	mov.w	ip, #10
 800bb0e:	9a07      	ldr	r2, [sp, #28]
 800bb10:	4621      	mov	r1, r4
 800bb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb16:	3b30      	subs	r3, #48	; 0x30
 800bb18:	2b09      	cmp	r3, #9
 800bb1a:	d94e      	bls.n	800bbba <_svfiprintf_r+0x17e>
 800bb1c:	b1b0      	cbz	r0, 800bb4c <_svfiprintf_r+0x110>
 800bb1e:	9207      	str	r2, [sp, #28]
 800bb20:	e014      	b.n	800bb4c <_svfiprintf_r+0x110>
 800bb22:	eba0 0308 	sub.w	r3, r0, r8
 800bb26:	fa09 f303 	lsl.w	r3, r9, r3
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	46a2      	mov	sl, r4
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	e7d2      	b.n	800bad8 <_svfiprintf_r+0x9c>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	1d19      	adds	r1, r3, #4
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	9103      	str	r1, [sp, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bfbb      	ittet	lt
 800bb3e:	425b      	neglt	r3, r3
 800bb40:	f042 0202 	orrlt.w	r2, r2, #2
 800bb44:	9307      	strge	r3, [sp, #28]
 800bb46:	9307      	strlt	r3, [sp, #28]
 800bb48:	bfb8      	it	lt
 800bb4a:	9204      	strlt	r2, [sp, #16]
 800bb4c:	7823      	ldrb	r3, [r4, #0]
 800bb4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb50:	d10c      	bne.n	800bb6c <_svfiprintf_r+0x130>
 800bb52:	7863      	ldrb	r3, [r4, #1]
 800bb54:	2b2a      	cmp	r3, #42	; 0x2a
 800bb56:	d135      	bne.n	800bbc4 <_svfiprintf_r+0x188>
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	3402      	adds	r4, #2
 800bb5c:	1d1a      	adds	r2, r3, #4
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	9203      	str	r2, [sp, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfb8      	it	lt
 800bb66:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb6a:	9305      	str	r3, [sp, #20]
 800bb6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bc2c <_svfiprintf_r+0x1f0>
 800bb70:	2203      	movs	r2, #3
 800bb72:	4650      	mov	r0, sl
 800bb74:	7821      	ldrb	r1, [r4, #0]
 800bb76:	f7ff fb0d 	bl	800b194 <memchr>
 800bb7a:	b140      	cbz	r0, 800bb8e <_svfiprintf_r+0x152>
 800bb7c:	2340      	movs	r3, #64	; 0x40
 800bb7e:	eba0 000a 	sub.w	r0, r0, sl
 800bb82:	fa03 f000 	lsl.w	r0, r3, r0
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	3401      	adds	r4, #1
 800bb8a:	4303      	orrs	r3, r0
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb92:	2206      	movs	r2, #6
 800bb94:	4826      	ldr	r0, [pc, #152]	; (800bc30 <_svfiprintf_r+0x1f4>)
 800bb96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb9a:	f7ff fafb 	bl	800b194 <memchr>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d038      	beq.n	800bc14 <_svfiprintf_r+0x1d8>
 800bba2:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <_svfiprintf_r+0x1f8>)
 800bba4:	bb1b      	cbnz	r3, 800bbee <_svfiprintf_r+0x1b2>
 800bba6:	9b03      	ldr	r3, [sp, #12]
 800bba8:	3307      	adds	r3, #7
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	3308      	adds	r3, #8
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb4:	4433      	add	r3, r6
 800bbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb8:	e767      	b.n	800ba8a <_svfiprintf_r+0x4e>
 800bbba:	460c      	mov	r4, r1
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc2:	e7a5      	b.n	800bb10 <_svfiprintf_r+0xd4>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f04f 0c0a 	mov.w	ip, #10
 800bbca:	4619      	mov	r1, r3
 800bbcc:	3401      	adds	r4, #1
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbd6:	3a30      	subs	r2, #48	; 0x30
 800bbd8:	2a09      	cmp	r2, #9
 800bbda:	d903      	bls.n	800bbe4 <_svfiprintf_r+0x1a8>
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0c5      	beq.n	800bb6c <_svfiprintf_r+0x130>
 800bbe0:	9105      	str	r1, [sp, #20]
 800bbe2:	e7c3      	b.n	800bb6c <_svfiprintf_r+0x130>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbec:	e7f0      	b.n	800bbd0 <_svfiprintf_r+0x194>
 800bbee:	ab03      	add	r3, sp, #12
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	462a      	mov	r2, r5
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <_svfiprintf_r+0x1fc>)
 800bbf8:	a904      	add	r1, sp, #16
 800bbfa:	f7fd feb3 	bl	8009964 <_printf_float>
 800bbfe:	1c42      	adds	r2, r0, #1
 800bc00:	4606      	mov	r6, r0
 800bc02:	d1d6      	bne.n	800bbb2 <_svfiprintf_r+0x176>
 800bc04:	89ab      	ldrh	r3, [r5, #12]
 800bc06:	065b      	lsls	r3, r3, #25
 800bc08:	f53f af2c 	bmi.w	800ba64 <_svfiprintf_r+0x28>
 800bc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc0e:	b01d      	add	sp, #116	; 0x74
 800bc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <_svfiprintf_r+0x1fc>)
 800bc1e:	a904      	add	r1, sp, #16
 800bc20:	f7fe f93c 	bl	8009e9c <_printf_i>
 800bc24:	e7eb      	b.n	800bbfe <_svfiprintf_r+0x1c2>
 800bc26:	bf00      	nop
 800bc28:	0800cc64 	.word	0x0800cc64
 800bc2c:	0800cc6a 	.word	0x0800cc6a
 800bc30:	0800cc6e 	.word	0x0800cc6e
 800bc34:	08009965 	.word	0x08009965
 800bc38:	0800b985 	.word	0x0800b985

0800bc3c <_read_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	4611      	mov	r1, r2
 800bc44:	2200      	movs	r2, #0
 800bc46:	4d05      	ldr	r5, [pc, #20]	; (800bc5c <_read_r+0x20>)
 800bc48:	602a      	str	r2, [r5, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f7f7 f98d 	bl	8002f6a <_read>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_read_r+0x1e>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_read_r+0x1e>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	20001e00 	.word	0x20001e00

0800bc60 <__assert_func>:
 800bc60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc62:	4614      	mov	r4, r2
 800bc64:	461a      	mov	r2, r3
 800bc66:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <__assert_func+0x2c>)
 800bc68:	4605      	mov	r5, r0
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68d8      	ldr	r0, [r3, #12]
 800bc6e:	b14c      	cbz	r4, 800bc84 <__assert_func+0x24>
 800bc70:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <__assert_func+0x30>)
 800bc72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc76:	9100      	str	r1, [sp, #0]
 800bc78:	462b      	mov	r3, r5
 800bc7a:	4906      	ldr	r1, [pc, #24]	; (800bc94 <__assert_func+0x34>)
 800bc7c:	f000 f80e 	bl	800bc9c <fiprintf>
 800bc80:	f000 fa9e 	bl	800c1c0 <abort>
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <__assert_func+0x38>)
 800bc86:	461c      	mov	r4, r3
 800bc88:	e7f3      	b.n	800bc72 <__assert_func+0x12>
 800bc8a:	bf00      	nop
 800bc8c:	20000018 	.word	0x20000018
 800bc90:	0800cc75 	.word	0x0800cc75
 800bc94:	0800cc82 	.word	0x0800cc82
 800bc98:	0800ccb0 	.word	0x0800ccb0

0800bc9c <fiprintf>:
 800bc9c:	b40e      	push	{r1, r2, r3}
 800bc9e:	b503      	push	{r0, r1, lr}
 800bca0:	4601      	mov	r1, r0
 800bca2:	ab03      	add	r3, sp, #12
 800bca4:	4805      	ldr	r0, [pc, #20]	; (800bcbc <fiprintf+0x20>)
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	f000 f889 	bl	800bdc4 <_vfiprintf_r>
 800bcb2:	b002      	add	sp, #8
 800bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcb8:	b003      	add	sp, #12
 800bcba:	4770      	bx	lr
 800bcbc:	20000018 	.word	0x20000018

0800bcc0 <__ascii_mbtowc>:
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	b901      	cbnz	r1, 800bcc6 <__ascii_mbtowc+0x6>
 800bcc4:	a901      	add	r1, sp, #4
 800bcc6:	b142      	cbz	r2, 800bcda <__ascii_mbtowc+0x1a>
 800bcc8:	b14b      	cbz	r3, 800bcde <__ascii_mbtowc+0x1e>
 800bcca:	7813      	ldrb	r3, [r2, #0]
 800bccc:	600b      	str	r3, [r1, #0]
 800bcce:	7812      	ldrb	r2, [r2, #0]
 800bcd0:	1e10      	subs	r0, r2, #0
 800bcd2:	bf18      	it	ne
 800bcd4:	2001      	movne	r0, #1
 800bcd6:	b002      	add	sp, #8
 800bcd8:	4770      	bx	lr
 800bcda:	4610      	mov	r0, r2
 800bcdc:	e7fb      	b.n	800bcd6 <__ascii_mbtowc+0x16>
 800bcde:	f06f 0001 	mvn.w	r0, #1
 800bce2:	e7f8      	b.n	800bcd6 <__ascii_mbtowc+0x16>

0800bce4 <memmove>:
 800bce4:	4288      	cmp	r0, r1
 800bce6:	b510      	push	{r4, lr}
 800bce8:	eb01 0402 	add.w	r4, r1, r2
 800bcec:	d902      	bls.n	800bcf4 <memmove+0x10>
 800bcee:	4284      	cmp	r4, r0
 800bcf0:	4623      	mov	r3, r4
 800bcf2:	d807      	bhi.n	800bd04 <memmove+0x20>
 800bcf4:	1e43      	subs	r3, r0, #1
 800bcf6:	42a1      	cmp	r1, r4
 800bcf8:	d008      	beq.n	800bd0c <memmove+0x28>
 800bcfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd02:	e7f8      	b.n	800bcf6 <memmove+0x12>
 800bd04:	4601      	mov	r1, r0
 800bd06:	4402      	add	r2, r0
 800bd08:	428a      	cmp	r2, r1
 800bd0a:	d100      	bne.n	800bd0e <memmove+0x2a>
 800bd0c:	bd10      	pop	{r4, pc}
 800bd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd16:	e7f7      	b.n	800bd08 <memmove+0x24>

0800bd18 <_realloc_r>:
 800bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4614      	mov	r4, r2
 800bd20:	460e      	mov	r6, r1
 800bd22:	b921      	cbnz	r1, 800bd2e <_realloc_r+0x16>
 800bd24:	4611      	mov	r1, r2
 800bd26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2a:	f7fd bd09 	b.w	8009740 <_malloc_r>
 800bd2e:	b92a      	cbnz	r2, 800bd3c <_realloc_r+0x24>
 800bd30:	f7ff fde0 	bl	800b8f4 <_free_r>
 800bd34:	4625      	mov	r5, r4
 800bd36:	4628      	mov	r0, r5
 800bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3c:	f000 faac 	bl	800c298 <_malloc_usable_size_r>
 800bd40:	4284      	cmp	r4, r0
 800bd42:	4607      	mov	r7, r0
 800bd44:	d802      	bhi.n	800bd4c <_realloc_r+0x34>
 800bd46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd4a:	d812      	bhi.n	800bd72 <_realloc_r+0x5a>
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7fd fcf6 	bl	8009740 <_malloc_r>
 800bd54:	4605      	mov	r5, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d0ed      	beq.n	800bd36 <_realloc_r+0x1e>
 800bd5a:	42bc      	cmp	r4, r7
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	4631      	mov	r1, r6
 800bd60:	bf28      	it	cs
 800bd62:	463a      	movcs	r2, r7
 800bd64:	f7fd fcb5 	bl	80096d2 <memcpy>
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f7ff fdc2 	bl	800b8f4 <_free_r>
 800bd70:	e7e1      	b.n	800bd36 <_realloc_r+0x1e>
 800bd72:	4635      	mov	r5, r6
 800bd74:	e7df      	b.n	800bd36 <_realloc_r+0x1e>

0800bd76 <__sfputc_r>:
 800bd76:	6893      	ldr	r3, [r2, #8]
 800bd78:	b410      	push	{r4}
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	6093      	str	r3, [r2, #8]
 800bd80:	da07      	bge.n	800bd92 <__sfputc_r+0x1c>
 800bd82:	6994      	ldr	r4, [r2, #24]
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	db01      	blt.n	800bd8c <__sfputc_r+0x16>
 800bd88:	290a      	cmp	r1, #10
 800bd8a:	d102      	bne.n	800bd92 <__sfputc_r+0x1c>
 800bd8c:	bc10      	pop	{r4}
 800bd8e:	f000 b949 	b.w	800c024 <__swbuf_r>
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	6010      	str	r0, [r2, #0]
 800bd98:	7019      	strb	r1, [r3, #0]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	bc10      	pop	{r4}
 800bd9e:	4770      	bx	lr

0800bda0 <__sfputs_r>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	4606      	mov	r6, r0
 800bda4:	460f      	mov	r7, r1
 800bda6:	4614      	mov	r4, r2
 800bda8:	18d5      	adds	r5, r2, r3
 800bdaa:	42ac      	cmp	r4, r5
 800bdac:	d101      	bne.n	800bdb2 <__sfputs_r+0x12>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e007      	b.n	800bdc2 <__sfputs_r+0x22>
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdba:	f7ff ffdc 	bl	800bd76 <__sfputc_r>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	d1f3      	bne.n	800bdaa <__sfputs_r+0xa>
 800bdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdc4 <_vfiprintf_r>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	460d      	mov	r5, r1
 800bdca:	4614      	mov	r4, r2
 800bdcc:	4698      	mov	r8, r3
 800bdce:	4606      	mov	r6, r0
 800bdd0:	b09d      	sub	sp, #116	; 0x74
 800bdd2:	b118      	cbz	r0, 800bddc <_vfiprintf_r+0x18>
 800bdd4:	6983      	ldr	r3, [r0, #24]
 800bdd6:	b90b      	cbnz	r3, 800bddc <_vfiprintf_r+0x18>
 800bdd8:	f7fd fbb6 	bl	8009548 <__sinit>
 800bddc:	4b89      	ldr	r3, [pc, #548]	; (800c004 <_vfiprintf_r+0x240>)
 800bdde:	429d      	cmp	r5, r3
 800bde0:	d11b      	bne.n	800be1a <_vfiprintf_r+0x56>
 800bde2:	6875      	ldr	r5, [r6, #4]
 800bde4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde6:	07d9      	lsls	r1, r3, #31
 800bde8:	d405      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	059a      	lsls	r2, r3, #22
 800bdee:	d402      	bmi.n	800bdf6 <_vfiprintf_r+0x32>
 800bdf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdf2:	f7fd fc6c 	bl	80096ce <__retarget_lock_acquire_recursive>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	071b      	lsls	r3, r3, #28
 800bdfa:	d501      	bpl.n	800be00 <_vfiprintf_r+0x3c>
 800bdfc:	692b      	ldr	r3, [r5, #16]
 800bdfe:	b9eb      	cbnz	r3, 800be3c <_vfiprintf_r+0x78>
 800be00:	4629      	mov	r1, r5
 800be02:	4630      	mov	r0, r6
 800be04:	f000 f96e 	bl	800c0e4 <__swsetup_r>
 800be08:	b1c0      	cbz	r0, 800be3c <_vfiprintf_r+0x78>
 800be0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be0c:	07dc      	lsls	r4, r3, #31
 800be0e:	d50e      	bpl.n	800be2e <_vfiprintf_r+0x6a>
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
 800be14:	b01d      	add	sp, #116	; 0x74
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	4b7b      	ldr	r3, [pc, #492]	; (800c008 <_vfiprintf_r+0x244>)
 800be1c:	429d      	cmp	r5, r3
 800be1e:	d101      	bne.n	800be24 <_vfiprintf_r+0x60>
 800be20:	68b5      	ldr	r5, [r6, #8]
 800be22:	e7df      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be24:	4b79      	ldr	r3, [pc, #484]	; (800c00c <_vfiprintf_r+0x248>)
 800be26:	429d      	cmp	r5, r3
 800be28:	bf08      	it	eq
 800be2a:	68f5      	ldreq	r5, [r6, #12]
 800be2c:	e7da      	b.n	800bde4 <_vfiprintf_r+0x20>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	0598      	lsls	r0, r3, #22
 800be32:	d4ed      	bmi.n	800be10 <_vfiprintf_r+0x4c>
 800be34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be36:	f7fd fc4b 	bl	80096d0 <__retarget_lock_release_recursive>
 800be3a:	e7e9      	b.n	800be10 <_vfiprintf_r+0x4c>
 800be3c:	2300      	movs	r3, #0
 800be3e:	9309      	str	r3, [sp, #36]	; 0x24
 800be40:	2320      	movs	r3, #32
 800be42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be46:	2330      	movs	r3, #48	; 0x30
 800be48:	f04f 0901 	mov.w	r9, #1
 800be4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c010 <_vfiprintf_r+0x24c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be58:	4623      	mov	r3, r4
 800be5a:	469a      	mov	sl, r3
 800be5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be60:	b10a      	cbz	r2, 800be66 <_vfiprintf_r+0xa2>
 800be62:	2a25      	cmp	r2, #37	; 0x25
 800be64:	d1f9      	bne.n	800be5a <_vfiprintf_r+0x96>
 800be66:	ebba 0b04 	subs.w	fp, sl, r4
 800be6a:	d00b      	beq.n	800be84 <_vfiprintf_r+0xc0>
 800be6c:	465b      	mov	r3, fp
 800be6e:	4622      	mov	r2, r4
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ff94 	bl	800bda0 <__sfputs_r>
 800be78:	3001      	adds	r0, #1
 800be7a:	f000 80aa 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be80:	445a      	add	r2, fp
 800be82:	9209      	str	r2, [sp, #36]	; 0x24
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 80a2 	beq.w	800bfd2 <_vfiprintf_r+0x20e>
 800be8e:	2300      	movs	r3, #0
 800be90:	f04f 32ff 	mov.w	r2, #4294967295
 800be94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be98:	f10a 0a01 	add.w	sl, sl, #1
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea4:	931a      	str	r3, [sp, #104]	; 0x68
 800bea6:	4654      	mov	r4, sl
 800bea8:	2205      	movs	r2, #5
 800beaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beae:	4858      	ldr	r0, [pc, #352]	; (800c010 <_vfiprintf_r+0x24c>)
 800beb0:	f7ff f970 	bl	800b194 <memchr>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	b9d8      	cbnz	r0, 800bef0 <_vfiprintf_r+0x12c>
 800beb8:	06d1      	lsls	r1, r2, #27
 800beba:	bf44      	itt	mi
 800bebc:	2320      	movmi	r3, #32
 800bebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec2:	0713      	lsls	r3, r2, #28
 800bec4:	bf44      	itt	mi
 800bec6:	232b      	movmi	r3, #43	; 0x2b
 800bec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800becc:	f89a 3000 	ldrb.w	r3, [sl]
 800bed0:	2b2a      	cmp	r3, #42	; 0x2a
 800bed2:	d015      	beq.n	800bf00 <_vfiprintf_r+0x13c>
 800bed4:	4654      	mov	r4, sl
 800bed6:	2000      	movs	r0, #0
 800bed8:	f04f 0c0a 	mov.w	ip, #10
 800bedc:	9a07      	ldr	r2, [sp, #28]
 800bede:	4621      	mov	r1, r4
 800bee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee4:	3b30      	subs	r3, #48	; 0x30
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d94e      	bls.n	800bf88 <_vfiprintf_r+0x1c4>
 800beea:	b1b0      	cbz	r0, 800bf1a <_vfiprintf_r+0x156>
 800beec:	9207      	str	r2, [sp, #28]
 800beee:	e014      	b.n	800bf1a <_vfiprintf_r+0x156>
 800bef0:	eba0 0308 	sub.w	r3, r0, r8
 800bef4:	fa09 f303 	lsl.w	r3, r9, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	46a2      	mov	sl, r4
 800befc:	9304      	str	r3, [sp, #16]
 800befe:	e7d2      	b.n	800bea6 <_vfiprintf_r+0xe2>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbb      	ittet	lt
 800bf0c:	425b      	neglt	r3, r3
 800bf0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf12:	9307      	strge	r3, [sp, #28]
 800bf14:	9307      	strlt	r3, [sp, #28]
 800bf16:	bfb8      	it	lt
 800bf18:	9204      	strlt	r2, [sp, #16]
 800bf1a:	7823      	ldrb	r3, [r4, #0]
 800bf1c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf1e:	d10c      	bne.n	800bf3a <_vfiprintf_r+0x176>
 800bf20:	7863      	ldrb	r3, [r4, #1]
 800bf22:	2b2a      	cmp	r3, #42	; 0x2a
 800bf24:	d135      	bne.n	800bf92 <_vfiprintf_r+0x1ce>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	3402      	adds	r4, #2
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	9203      	str	r2, [sp, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bfb8      	it	lt
 800bf34:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c014 <_vfiprintf_r+0x250>
 800bf3e:	2203      	movs	r2, #3
 800bf40:	4650      	mov	r0, sl
 800bf42:	7821      	ldrb	r1, [r4, #0]
 800bf44:	f7ff f926 	bl	800b194 <memchr>
 800bf48:	b140      	cbz	r0, 800bf5c <_vfiprintf_r+0x198>
 800bf4a:	2340      	movs	r3, #64	; 0x40
 800bf4c:	eba0 000a 	sub.w	r0, r0, sl
 800bf50:	fa03 f000 	lsl.w	r0, r3, r0
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	3401      	adds	r4, #1
 800bf58:	4303      	orrs	r3, r0
 800bf5a:	9304      	str	r3, [sp, #16]
 800bf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf60:	2206      	movs	r2, #6
 800bf62:	482d      	ldr	r0, [pc, #180]	; (800c018 <_vfiprintf_r+0x254>)
 800bf64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf68:	f7ff f914 	bl	800b194 <memchr>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d03f      	beq.n	800bff0 <_vfiprintf_r+0x22c>
 800bf70:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <_vfiprintf_r+0x258>)
 800bf72:	bb1b      	cbnz	r3, 800bfbc <_vfiprintf_r+0x1f8>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	3307      	adds	r3, #7
 800bf78:	f023 0307 	bic.w	r3, r3, #7
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf82:	443b      	add	r3, r7
 800bf84:	9309      	str	r3, [sp, #36]	; 0x24
 800bf86:	e767      	b.n	800be58 <_vfiprintf_r+0x94>
 800bf88:	460c      	mov	r4, r1
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf90:	e7a5      	b.n	800bede <_vfiprintf_r+0x11a>
 800bf92:	2300      	movs	r3, #0
 800bf94:	f04f 0c0a 	mov.w	ip, #10
 800bf98:	4619      	mov	r1, r3
 800bf9a:	3401      	adds	r4, #1
 800bf9c:	9305      	str	r3, [sp, #20]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa4:	3a30      	subs	r2, #48	; 0x30
 800bfa6:	2a09      	cmp	r2, #9
 800bfa8:	d903      	bls.n	800bfb2 <_vfiprintf_r+0x1ee>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0c5      	beq.n	800bf3a <_vfiprintf_r+0x176>
 800bfae:	9105      	str	r1, [sp, #20]
 800bfb0:	e7c3      	b.n	800bf3a <_vfiprintf_r+0x176>
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfba:	e7f0      	b.n	800bf9e <_vfiprintf_r+0x1da>
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4b16      	ldr	r3, [pc, #88]	; (800c020 <_vfiprintf_r+0x25c>)
 800bfc6:	a904      	add	r1, sp, #16
 800bfc8:	f7fd fccc 	bl	8009964 <_printf_float>
 800bfcc:	4607      	mov	r7, r0
 800bfce:	1c78      	adds	r0, r7, #1
 800bfd0:	d1d6      	bne.n	800bf80 <_vfiprintf_r+0x1bc>
 800bfd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd4:	07d9      	lsls	r1, r3, #31
 800bfd6:	d405      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfd8:	89ab      	ldrh	r3, [r5, #12]
 800bfda:	059a      	lsls	r2, r3, #22
 800bfdc:	d402      	bmi.n	800bfe4 <_vfiprintf_r+0x220>
 800bfde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfe0:	f7fd fb76 	bl	80096d0 <__retarget_lock_release_recursive>
 800bfe4:	89ab      	ldrh	r3, [r5, #12]
 800bfe6:	065b      	lsls	r3, r3, #25
 800bfe8:	f53f af12 	bmi.w	800be10 <_vfiprintf_r+0x4c>
 800bfec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfee:	e711      	b.n	800be14 <_vfiprintf_r+0x50>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	4b09      	ldr	r3, [pc, #36]	; (800c020 <_vfiprintf_r+0x25c>)
 800bffa:	a904      	add	r1, sp, #16
 800bffc:	f7fd ff4e 	bl	8009e9c <_printf_i>
 800c000:	e7e4      	b.n	800bfcc <_vfiprintf_r+0x208>
 800c002:	bf00      	nop
 800c004:	0800ca04 	.word	0x0800ca04
 800c008:	0800ca24 	.word	0x0800ca24
 800c00c:	0800c9e4 	.word	0x0800c9e4
 800c010:	0800cc64 	.word	0x0800cc64
 800c014:	0800cc6a 	.word	0x0800cc6a
 800c018:	0800cc6e 	.word	0x0800cc6e
 800c01c:	08009965 	.word	0x08009965
 800c020:	0800bda1 	.word	0x0800bda1

0800c024 <__swbuf_r>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	460e      	mov	r6, r1
 800c028:	4614      	mov	r4, r2
 800c02a:	4605      	mov	r5, r0
 800c02c:	b118      	cbz	r0, 800c036 <__swbuf_r+0x12>
 800c02e:	6983      	ldr	r3, [r0, #24]
 800c030:	b90b      	cbnz	r3, 800c036 <__swbuf_r+0x12>
 800c032:	f7fd fa89 	bl	8009548 <__sinit>
 800c036:	4b21      	ldr	r3, [pc, #132]	; (800c0bc <__swbuf_r+0x98>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	d12b      	bne.n	800c094 <__swbuf_r+0x70>
 800c03c:	686c      	ldr	r4, [r5, #4]
 800c03e:	69a3      	ldr	r3, [r4, #24]
 800c040:	60a3      	str	r3, [r4, #8]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	071a      	lsls	r2, r3, #28
 800c046:	d52f      	bpl.n	800c0a8 <__swbuf_r+0x84>
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	b36b      	cbz	r3, 800c0a8 <__swbuf_r+0x84>
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	6820      	ldr	r0, [r4, #0]
 800c050:	b2f6      	uxtb	r6, r6
 800c052:	1ac0      	subs	r0, r0, r3
 800c054:	6963      	ldr	r3, [r4, #20]
 800c056:	4637      	mov	r7, r6
 800c058:	4283      	cmp	r3, r0
 800c05a:	dc04      	bgt.n	800c066 <__swbuf_r+0x42>
 800c05c:	4621      	mov	r1, r4
 800c05e:	4628      	mov	r0, r5
 800c060:	f7ff f83e 	bl	800b0e0 <_fflush_r>
 800c064:	bb30      	cbnz	r0, 800c0b4 <__swbuf_r+0x90>
 800c066:	68a3      	ldr	r3, [r4, #8]
 800c068:	3001      	adds	r0, #1
 800c06a:	3b01      	subs	r3, #1
 800c06c:	60a3      	str	r3, [r4, #8]
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	6022      	str	r2, [r4, #0]
 800c074:	701e      	strb	r6, [r3, #0]
 800c076:	6963      	ldr	r3, [r4, #20]
 800c078:	4283      	cmp	r3, r0
 800c07a:	d004      	beq.n	800c086 <__swbuf_r+0x62>
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	07db      	lsls	r3, r3, #31
 800c080:	d506      	bpl.n	800c090 <__swbuf_r+0x6c>
 800c082:	2e0a      	cmp	r6, #10
 800c084:	d104      	bne.n	800c090 <__swbuf_r+0x6c>
 800c086:	4621      	mov	r1, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	f7ff f829 	bl	800b0e0 <_fflush_r>
 800c08e:	b988      	cbnz	r0, 800c0b4 <__swbuf_r+0x90>
 800c090:	4638      	mov	r0, r7
 800c092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <__swbuf_r+0x9c>)
 800c096:	429c      	cmp	r4, r3
 800c098:	d101      	bne.n	800c09e <__swbuf_r+0x7a>
 800c09a:	68ac      	ldr	r4, [r5, #8]
 800c09c:	e7cf      	b.n	800c03e <__swbuf_r+0x1a>
 800c09e:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <__swbuf_r+0xa0>)
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	bf08      	it	eq
 800c0a4:	68ec      	ldreq	r4, [r5, #12]
 800c0a6:	e7ca      	b.n	800c03e <__swbuf_r+0x1a>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 f81a 	bl	800c0e4 <__swsetup_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0cb      	beq.n	800c04c <__swbuf_r+0x28>
 800c0b4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0b8:	e7ea      	b.n	800c090 <__swbuf_r+0x6c>
 800c0ba:	bf00      	nop
 800c0bc:	0800ca04 	.word	0x0800ca04
 800c0c0:	0800ca24 	.word	0x0800ca24
 800c0c4:	0800c9e4 	.word	0x0800c9e4

0800c0c8 <__ascii_wctomb>:
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	b141      	cbz	r1, 800c0e0 <__ascii_wctomb+0x18>
 800c0ce:	2aff      	cmp	r2, #255	; 0xff
 800c0d0:	d904      	bls.n	800c0dc <__ascii_wctomb+0x14>
 800c0d2:	228a      	movs	r2, #138	; 0x8a
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	4770      	bx	lr
 800c0dc:	2001      	movs	r0, #1
 800c0de:	700a      	strb	r2, [r1, #0]
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <__swsetup_r>:
 800c0e4:	4b32      	ldr	r3, [pc, #200]	; (800c1b0 <__swsetup_r+0xcc>)
 800c0e6:	b570      	push	{r4, r5, r6, lr}
 800c0e8:	681d      	ldr	r5, [r3, #0]
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	b125      	cbz	r5, 800c0fa <__swsetup_r+0x16>
 800c0f0:	69ab      	ldr	r3, [r5, #24]
 800c0f2:	b913      	cbnz	r3, 800c0fa <__swsetup_r+0x16>
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f7fd fa27 	bl	8009548 <__sinit>
 800c0fa:	4b2e      	ldr	r3, [pc, #184]	; (800c1b4 <__swsetup_r+0xd0>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	d10f      	bne.n	800c120 <__swsetup_r+0x3c>
 800c100:	686c      	ldr	r4, [r5, #4]
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c108:	0719      	lsls	r1, r3, #28
 800c10a:	d42c      	bmi.n	800c166 <__swsetup_r+0x82>
 800c10c:	06dd      	lsls	r5, r3, #27
 800c10e:	d411      	bmi.n	800c134 <__swsetup_r+0x50>
 800c110:	2309      	movs	r3, #9
 800c112:	6033      	str	r3, [r6, #0]
 800c114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	e03e      	b.n	800c19e <__swsetup_r+0xba>
 800c120:	4b25      	ldr	r3, [pc, #148]	; (800c1b8 <__swsetup_r+0xd4>)
 800c122:	429c      	cmp	r4, r3
 800c124:	d101      	bne.n	800c12a <__swsetup_r+0x46>
 800c126:	68ac      	ldr	r4, [r5, #8]
 800c128:	e7eb      	b.n	800c102 <__swsetup_r+0x1e>
 800c12a:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <__swsetup_r+0xd8>)
 800c12c:	429c      	cmp	r4, r3
 800c12e:	bf08      	it	eq
 800c130:	68ec      	ldreq	r4, [r5, #12]
 800c132:	e7e6      	b.n	800c102 <__swsetup_r+0x1e>
 800c134:	0758      	lsls	r0, r3, #29
 800c136:	d512      	bpl.n	800c15e <__swsetup_r+0x7a>
 800c138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c13a:	b141      	cbz	r1, 800c14e <__swsetup_r+0x6a>
 800c13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c140:	4299      	cmp	r1, r3
 800c142:	d002      	beq.n	800c14a <__swsetup_r+0x66>
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff fbd5 	bl	800b8f4 <_free_r>
 800c14a:	2300      	movs	r3, #0
 800c14c:	6363      	str	r3, [r4, #52]	; 0x34
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	2300      	movs	r3, #0
 800c158:	6063      	str	r3, [r4, #4]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f043 0308 	orr.w	r3, r3, #8
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	6923      	ldr	r3, [r4, #16]
 800c168:	b94b      	cbnz	r3, 800c17e <__swsetup_r+0x9a>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c174:	d003      	beq.n	800c17e <__swsetup_r+0x9a>
 800c176:	4621      	mov	r1, r4
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f84d 	bl	800c218 <__smakebuf_r>
 800c17e:	89a0      	ldrh	r0, [r4, #12]
 800c180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c184:	f010 0301 	ands.w	r3, r0, #1
 800c188:	d00a      	beq.n	800c1a0 <__swsetup_r+0xbc>
 800c18a:	2300      	movs	r3, #0
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	6963      	ldr	r3, [r4, #20]
 800c190:	425b      	negs	r3, r3
 800c192:	61a3      	str	r3, [r4, #24]
 800c194:	6923      	ldr	r3, [r4, #16]
 800c196:	b943      	cbnz	r3, 800c1aa <__swsetup_r+0xc6>
 800c198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c19c:	d1ba      	bne.n	800c114 <__swsetup_r+0x30>
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
 800c1a0:	0781      	lsls	r1, r0, #30
 800c1a2:	bf58      	it	pl
 800c1a4:	6963      	ldrpl	r3, [r4, #20]
 800c1a6:	60a3      	str	r3, [r4, #8]
 800c1a8:	e7f4      	b.n	800c194 <__swsetup_r+0xb0>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e7f7      	b.n	800c19e <__swsetup_r+0xba>
 800c1ae:	bf00      	nop
 800c1b0:	20000018 	.word	0x20000018
 800c1b4:	0800ca04 	.word	0x0800ca04
 800c1b8:	0800ca24 	.word	0x0800ca24
 800c1bc:	0800c9e4 	.word	0x0800c9e4

0800c1c0 <abort>:
 800c1c0:	2006      	movs	r0, #6
 800c1c2:	b508      	push	{r3, lr}
 800c1c4:	f000 f898 	bl	800c2f8 <raise>
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	f7f6 fec4 	bl	8002f56 <_exit>

0800c1ce <__swhatbuf_r>:
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	460e      	mov	r6, r1
 800c1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	461d      	mov	r5, r3
 800c1dc:	b096      	sub	sp, #88	; 0x58
 800c1de:	da08      	bge.n	800c1f2 <__swhatbuf_r+0x24>
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1e6:	602a      	str	r2, [r5, #0]
 800c1e8:	061a      	lsls	r2, r3, #24
 800c1ea:	d410      	bmi.n	800c20e <__swhatbuf_r+0x40>
 800c1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f0:	e00e      	b.n	800c210 <__swhatbuf_r+0x42>
 800c1f2:	466a      	mov	r2, sp
 800c1f4:	f000 f89c 	bl	800c330 <_fstat_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dbf1      	blt.n	800c1e0 <__swhatbuf_r+0x12>
 800c1fc:	9a01      	ldr	r2, [sp, #4]
 800c1fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c206:	425a      	negs	r2, r3
 800c208:	415a      	adcs	r2, r3
 800c20a:	602a      	str	r2, [r5, #0]
 800c20c:	e7ee      	b.n	800c1ec <__swhatbuf_r+0x1e>
 800c20e:	2340      	movs	r3, #64	; 0x40
 800c210:	2000      	movs	r0, #0
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	b016      	add	sp, #88	; 0x58
 800c216:	bd70      	pop	{r4, r5, r6, pc}

0800c218 <__smakebuf_r>:
 800c218:	898b      	ldrh	r3, [r1, #12]
 800c21a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c21c:	079d      	lsls	r5, r3, #30
 800c21e:	4606      	mov	r6, r0
 800c220:	460c      	mov	r4, r1
 800c222:	d507      	bpl.n	800c234 <__smakebuf_r+0x1c>
 800c224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c228:	6023      	str	r3, [r4, #0]
 800c22a:	6123      	str	r3, [r4, #16]
 800c22c:	2301      	movs	r3, #1
 800c22e:	6163      	str	r3, [r4, #20]
 800c230:	b002      	add	sp, #8
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	466a      	mov	r2, sp
 800c236:	ab01      	add	r3, sp, #4
 800c238:	f7ff ffc9 	bl	800c1ce <__swhatbuf_r>
 800c23c:	9900      	ldr	r1, [sp, #0]
 800c23e:	4605      	mov	r5, r0
 800c240:	4630      	mov	r0, r6
 800c242:	f7fd fa7d 	bl	8009740 <_malloc_r>
 800c246:	b948      	cbnz	r0, 800c25c <__smakebuf_r+0x44>
 800c248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c24c:	059a      	lsls	r2, r3, #22
 800c24e:	d4ef      	bmi.n	800c230 <__smakebuf_r+0x18>
 800c250:	f023 0303 	bic.w	r3, r3, #3
 800c254:	f043 0302 	orr.w	r3, r3, #2
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	e7e3      	b.n	800c224 <__smakebuf_r+0xc>
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <__smakebuf_r+0x7c>)
 800c25e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	6020      	str	r0, [r4, #0]
 800c264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	6120      	str	r0, [r4, #16]
 800c26e:	6163      	str	r3, [r4, #20]
 800c270:	9b01      	ldr	r3, [sp, #4]
 800c272:	b15b      	cbz	r3, 800c28c <__smakebuf_r+0x74>
 800c274:	4630      	mov	r0, r6
 800c276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c27a:	f000 f86b 	bl	800c354 <_isatty_r>
 800c27e:	b128      	cbz	r0, 800c28c <__smakebuf_r+0x74>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	f043 0301 	orr.w	r3, r3, #1
 800c28a:	81a3      	strh	r3, [r4, #12]
 800c28c:	89a0      	ldrh	r0, [r4, #12]
 800c28e:	4305      	orrs	r5, r0
 800c290:	81a5      	strh	r5, [r4, #12]
 800c292:	e7cd      	b.n	800c230 <__smakebuf_r+0x18>
 800c294:	080094e1 	.word	0x080094e1

0800c298 <_malloc_usable_size_r>:
 800c298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c29c:	1f18      	subs	r0, r3, #4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bfbc      	itt	lt
 800c2a2:	580b      	ldrlt	r3, [r1, r0]
 800c2a4:	18c0      	addlt	r0, r0, r3
 800c2a6:	4770      	bx	lr

0800c2a8 <_raise_r>:
 800c2a8:	291f      	cmp	r1, #31
 800c2aa:	b538      	push	{r3, r4, r5, lr}
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	460d      	mov	r5, r1
 800c2b0:	d904      	bls.n	800c2bc <_raise_r+0x14>
 800c2b2:	2316      	movs	r3, #22
 800c2b4:	6003      	str	r3, [r0, #0]
 800c2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2be:	b112      	cbz	r2, 800c2c6 <_raise_r+0x1e>
 800c2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2c4:	b94b      	cbnz	r3, 800c2da <_raise_r+0x32>
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 f830 	bl	800c32c <_getpid_r>
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2d6:	f000 b817 	b.w	800c308 <_kill_r>
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d00a      	beq.n	800c2f4 <_raise_r+0x4c>
 800c2de:	1c59      	adds	r1, r3, #1
 800c2e0:	d103      	bne.n	800c2ea <_raise_r+0x42>
 800c2e2:	2316      	movs	r3, #22
 800c2e4:	6003      	str	r3, [r0, #0]
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	e7e7      	b.n	800c2ba <_raise_r+0x12>
 800c2ea:	2400      	movs	r4, #0
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2f2:	4798      	blx	r3
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e7e0      	b.n	800c2ba <_raise_r+0x12>

0800c2f8 <raise>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <raise+0xc>)
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	f7ff bfd3 	b.w	800c2a8 <_raise_r>
 800c302:	bf00      	nop
 800c304:	20000018 	.word	0x20000018

0800c308 <_kill_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	2300      	movs	r3, #0
 800c30c:	4d06      	ldr	r5, [pc, #24]	; (800c328 <_kill_r+0x20>)
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	4611      	mov	r1, r2
 800c314:	602b      	str	r3, [r5, #0]
 800c316:	f7f6 fe0e 	bl	8002f36 <_kill>
 800c31a:	1c43      	adds	r3, r0, #1
 800c31c:	d102      	bne.n	800c324 <_kill_r+0x1c>
 800c31e:	682b      	ldr	r3, [r5, #0]
 800c320:	b103      	cbz	r3, 800c324 <_kill_r+0x1c>
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	bd38      	pop	{r3, r4, r5, pc}
 800c326:	bf00      	nop
 800c328:	20001e00 	.word	0x20001e00

0800c32c <_getpid_r>:
 800c32c:	f7f6 bdfc 	b.w	8002f28 <_getpid>

0800c330 <_fstat_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	2300      	movs	r3, #0
 800c334:	4d06      	ldr	r5, [pc, #24]	; (800c350 <_fstat_r+0x20>)
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f6 fe58 	bl	8002ff2 <_fstat>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d102      	bne.n	800c34c <_fstat_r+0x1c>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	b103      	cbz	r3, 800c34c <_fstat_r+0x1c>
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	20001e00 	.word	0x20001e00

0800c354 <_isatty_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	2300      	movs	r3, #0
 800c358:	4d05      	ldr	r5, [pc, #20]	; (800c370 <_isatty_r+0x1c>)
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f6 fe56 	bl	8003010 <_isatty>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_isatty_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_isatty_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	20001e00 	.word	0x20001e00

0800c374 <_init>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	bf00      	nop
 800c378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37a:	bc08      	pop	{r3}
 800c37c:	469e      	mov	lr, r3
 800c37e:	4770      	bx	lr

0800c380 <_fini>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	bf00      	nop
 800c384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c386:	bc08      	pop	{r3}
 800c388:	469e      	mov	lr, r3
 800c38a:	4770      	bx	lr
