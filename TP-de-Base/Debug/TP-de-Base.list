
TP-de-Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009190  08009190  00019190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095fc  080095fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009604  08009604  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800960c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001dc  080097e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  080097e8  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012524  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d70  00000000  00000000  00032729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  000365f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018680  00000000  00000000  00037630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143b7  00000000  00000000  0004fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b38  00000000  00000000  00064067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fab9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  000fabf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08009174 	.word	0x08009174

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08009174 	.word	0x08009174

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <__aeabi_ldivmod>:
 8000fc0:	b97b      	cbnz	r3, 8000fe2 <__aeabi_ldivmod+0x22>
 8000fc2:	b972      	cbnz	r2, 8000fe2 <__aeabi_ldivmod+0x22>
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	bfbe      	ittt	lt
 8000fc8:	2000      	movlt	r0, #0
 8000fca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000fce:	e006      	blt.n	8000fde <__aeabi_ldivmod+0x1e>
 8000fd0:	bf08      	it	eq
 8000fd2:	2800      	cmpeq	r0, #0
 8000fd4:	bf1c      	itt	ne
 8000fd6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000fda:	f04f 30ff 	movne.w	r0, #4294967295
 8000fde:	f000 b9c1 	b.w	8001364 <__aeabi_idiv0>
 8000fe2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fea:	2900      	cmp	r1, #0
 8000fec:	db09      	blt.n	8001002 <__aeabi_ldivmod+0x42>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db1a      	blt.n	8001028 <__aeabi_ldivmod+0x68>
 8000ff2:	f000 f84d 	bl	8001090 <__udivmoddi4>
 8000ff6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ffe:	b004      	add	sp, #16
 8001000:	4770      	bx	lr
 8001002:	4240      	negs	r0, r0
 8001004:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	db1b      	blt.n	8001044 <__aeabi_ldivmod+0x84>
 800100c:	f000 f840 	bl	8001090 <__udivmoddi4>
 8001010:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001018:	b004      	add	sp, #16
 800101a:	4240      	negs	r0, r0
 800101c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001020:	4252      	negs	r2, r2
 8001022:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001026:	4770      	bx	lr
 8001028:	4252      	negs	r2, r2
 800102a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800102e:	f000 f82f 	bl	8001090 <__udivmoddi4>
 8001032:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103a:	b004      	add	sp, #16
 800103c:	4240      	negs	r0, r0
 800103e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001042:	4770      	bx	lr
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	f000 f821 	bl	8001090 <__udivmoddi4>
 800104e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001056:	b004      	add	sp, #16
 8001058:	4252      	negs	r2, r2
 800105a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800105e:	4770      	bx	lr

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b976 	b.w	8001364 <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	9e08      	ldr	r6, [sp, #32]
 8001096:	460d      	mov	r5, r1
 8001098:	4604      	mov	r4, r0
 800109a:	4688      	mov	r8, r1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d14d      	bne.n	800113c <__udivmoddi4+0xac>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4694      	mov	ip, r2
 80010a4:	d968      	bls.n	8001178 <__udivmoddi4+0xe8>
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b152      	cbz	r2, 80010c2 <__udivmoddi4+0x32>
 80010ac:	fa01 f302 	lsl.w	r3, r1, r2
 80010b0:	f1c2 0120 	rsb	r1, r2, #32
 80010b4:	fa20 f101 	lsr.w	r1, r0, r1
 80010b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010bc:	ea41 0803 	orr.w	r8, r1, r3
 80010c0:	4094      	lsls	r4, r2
 80010c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80010ca:	fa1f fe8c 	uxth.w	lr, ip
 80010ce:	fb01 8817 	mls	r8, r1, r7, r8
 80010d2:	fb07 f00e 	mul.w	r0, r7, lr
 80010d6:	0c23      	lsrs	r3, r4, #16
 80010d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010dc:	4298      	cmp	r0, r3
 80010de:	d90a      	bls.n	80010f6 <__udivmoddi4+0x66>
 80010e0:	eb1c 0303 	adds.w	r3, ip, r3
 80010e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80010e8:	f080 811e 	bcs.w	8001328 <__udivmoddi4+0x298>
 80010ec:	4298      	cmp	r0, r3
 80010ee:	f240 811b 	bls.w	8001328 <__udivmoddi4+0x298>
 80010f2:	3f02      	subs	r7, #2
 80010f4:	4463      	add	r3, ip
 80010f6:	1a1b      	subs	r3, r3, r0
 80010f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80010fc:	fb01 3310 	mls	r3, r1, r0, r3
 8001100:	fb00 fe0e 	mul.w	lr, r0, lr
 8001104:	b2a4      	uxth	r4, r4
 8001106:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110a:	45a6      	cmp	lr, r4
 800110c:	d90a      	bls.n	8001124 <__udivmoddi4+0x94>
 800110e:	eb1c 0404 	adds.w	r4, ip, r4
 8001112:	f100 33ff 	add.w	r3, r0, #4294967295
 8001116:	f080 8109 	bcs.w	800132c <__udivmoddi4+0x29c>
 800111a:	45a6      	cmp	lr, r4
 800111c:	f240 8106 	bls.w	800132c <__udivmoddi4+0x29c>
 8001120:	4464      	add	r4, ip
 8001122:	3802      	subs	r0, #2
 8001124:	2100      	movs	r1, #0
 8001126:	eba4 040e 	sub.w	r4, r4, lr
 800112a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800112e:	b11e      	cbz	r6, 8001138 <__udivmoddi4+0xa8>
 8001130:	2300      	movs	r3, #0
 8001132:	40d4      	lsrs	r4, r2
 8001134:	e9c6 4300 	strd	r4, r3, [r6]
 8001138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113c:	428b      	cmp	r3, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0xc2>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 80ee 	beq.w	8001322 <__udivmoddi4+0x292>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c6 0500 	strd	r0, r5, [r6]
 800114c:	4608      	mov	r0, r1
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	fab3 f183 	clz	r1, r3
 8001156:	2900      	cmp	r1, #0
 8001158:	d14a      	bne.n	80011f0 <__udivmoddi4+0x160>
 800115a:	42ab      	cmp	r3, r5
 800115c:	d302      	bcc.n	8001164 <__udivmoddi4+0xd4>
 800115e:	4282      	cmp	r2, r0
 8001160:	f200 80fc 	bhi.w	800135c <__udivmoddi4+0x2cc>
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb65 0303 	sbc.w	r3, r5, r3
 800116a:	2001      	movs	r0, #1
 800116c:	4698      	mov	r8, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d0e2      	beq.n	8001138 <__udivmoddi4+0xa8>
 8001172:	e9c6 4800 	strd	r4, r8, [r6]
 8001176:	e7df      	b.n	8001138 <__udivmoddi4+0xa8>
 8001178:	b902      	cbnz	r2, 800117c <__udivmoddi4+0xec>
 800117a:	deff      	udf	#255	; 0xff
 800117c:	fab2 f282 	clz	r2, r2
 8001180:	2a00      	cmp	r2, #0
 8001182:	f040 8091 	bne.w	80012a8 <__udivmoddi4+0x218>
 8001186:	eba1 000c 	sub.w	r0, r1, ip
 800118a:	2101      	movs	r1, #1
 800118c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001190:	fa1f fe8c 	uxth.w	lr, ip
 8001194:	fbb0 f3f7 	udiv	r3, r0, r7
 8001198:	fb07 0013 	mls	r0, r7, r3, r0
 800119c:	0c25      	lsrs	r5, r4, #16
 800119e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011a2:	fb0e f003 	mul.w	r0, lr, r3
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d908      	bls.n	80011bc <__udivmoddi4+0x12c>
 80011aa:	eb1c 0505 	adds.w	r5, ip, r5
 80011ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80011b2:	d202      	bcs.n	80011ba <__udivmoddi4+0x12a>
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	f200 80ce 	bhi.w	8001356 <__udivmoddi4+0x2c6>
 80011ba:	4643      	mov	r3, r8
 80011bc:	1a2d      	subs	r5, r5, r0
 80011be:	fbb5 f0f7 	udiv	r0, r5, r7
 80011c2:	fb07 5510 	mls	r5, r7, r0, r5
 80011c6:	fb0e fe00 	mul.w	lr, lr, r0
 80011ca:	b2a4      	uxth	r4, r4
 80011cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d0:	45a6      	cmp	lr, r4
 80011d2:	d908      	bls.n	80011e6 <__udivmoddi4+0x156>
 80011d4:	eb1c 0404 	adds.w	r4, ip, r4
 80011d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011dc:	d202      	bcs.n	80011e4 <__udivmoddi4+0x154>
 80011de:	45a6      	cmp	lr, r4
 80011e0:	f200 80b6 	bhi.w	8001350 <__udivmoddi4+0x2c0>
 80011e4:	4628      	mov	r0, r5
 80011e6:	eba4 040e 	sub.w	r4, r4, lr
 80011ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011ee:	e79e      	b.n	800112e <__udivmoddi4+0x9e>
 80011f0:	f1c1 0720 	rsb	r7, r1, #32
 80011f4:	408b      	lsls	r3, r1
 80011f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80011fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8001202:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001206:	fbba f8f9 	udiv	r8, sl, r9
 800120a:	fa20 f307 	lsr.w	r3, r0, r7
 800120e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001212:	408d      	lsls	r5, r1
 8001214:	fa1f fe8c 	uxth.w	lr, ip
 8001218:	431d      	orrs	r5, r3
 800121a:	fa00 f301 	lsl.w	r3, r0, r1
 800121e:	fb08 f00e 	mul.w	r0, r8, lr
 8001222:	0c2c      	lsrs	r4, r5, #16
 8001224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001228:	42a0      	cmp	r0, r4
 800122a:	fa02 f201 	lsl.w	r2, r2, r1
 800122e:	d90b      	bls.n	8001248 <__udivmoddi4+0x1b8>
 8001230:	eb1c 0404 	adds.w	r4, ip, r4
 8001234:	f108 3aff 	add.w	sl, r8, #4294967295
 8001238:	f080 8088 	bcs.w	800134c <__udivmoddi4+0x2bc>
 800123c:	42a0      	cmp	r0, r4
 800123e:	f240 8085 	bls.w	800134c <__udivmoddi4+0x2bc>
 8001242:	f1a8 0802 	sub.w	r8, r8, #2
 8001246:	4464      	add	r4, ip
 8001248:	1a24      	subs	r4, r4, r0
 800124a:	fbb4 f0f9 	udiv	r0, r4, r9
 800124e:	fb09 4410 	mls	r4, r9, r0, r4
 8001252:	fb00 fe0e 	mul.w	lr, r0, lr
 8001256:	b2ad      	uxth	r5, r5
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	45a6      	cmp	lr, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x1e2>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d26c      	bcs.n	8001344 <__udivmoddi4+0x2b4>
 800126a:	45a6      	cmp	lr, r4
 800126c:	d96a      	bls.n	8001344 <__udivmoddi4+0x2b4>
 800126e:	3802      	subs	r0, #2
 8001270:	4464      	add	r4, ip
 8001272:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001276:	fba0 9502 	umull	r9, r5, r0, r2
 800127a:	eba4 040e 	sub.w	r4, r4, lr
 800127e:	42ac      	cmp	r4, r5
 8001280:	46c8      	mov	r8, r9
 8001282:	46ae      	mov	lr, r5
 8001284:	d356      	bcc.n	8001334 <__udivmoddi4+0x2a4>
 8001286:	d053      	beq.n	8001330 <__udivmoddi4+0x2a0>
 8001288:	2e00      	cmp	r6, #0
 800128a:	d069      	beq.n	8001360 <__udivmoddi4+0x2d0>
 800128c:	ebb3 0208 	subs.w	r2, r3, r8
 8001290:	eb64 040e 	sbc.w	r4, r4, lr
 8001294:	fa22 f301 	lsr.w	r3, r2, r1
 8001298:	fa04 f707 	lsl.w	r7, r4, r7
 800129c:	431f      	orrs	r7, r3
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e747      	b.n	8001138 <__udivmoddi4+0xa8>
 80012a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ac:	f1c2 0120 	rsb	r1, r2, #32
 80012b0:	fa25 f301 	lsr.w	r3, r5, r1
 80012b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b8:	fa20 f101 	lsr.w	r1, r0, r1
 80012bc:	4095      	lsls	r5, r2
 80012be:	430d      	orrs	r5, r1
 80012c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80012c4:	fb07 3311 	mls	r3, r7, r1, r3
 80012c8:	fa1f fe8c 	uxth.w	lr, ip
 80012cc:	0c28      	lsrs	r0, r5, #16
 80012ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012d2:	fb01 f30e 	mul.w	r3, r1, lr
 80012d6:	4283      	cmp	r3, r0
 80012d8:	fa04 f402 	lsl.w	r4, r4, r2
 80012dc:	d908      	bls.n	80012f0 <__udivmoddi4+0x260>
 80012de:	eb1c 0000 	adds.w	r0, ip, r0
 80012e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80012e6:	d22f      	bcs.n	8001348 <__udivmoddi4+0x2b8>
 80012e8:	4283      	cmp	r3, r0
 80012ea:	d92d      	bls.n	8001348 <__udivmoddi4+0x2b8>
 80012ec:	3902      	subs	r1, #2
 80012ee:	4460      	add	r0, ip
 80012f0:	1ac0      	subs	r0, r0, r3
 80012f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80012f6:	fb07 0013 	mls	r0, r7, r3, r0
 80012fa:	b2ad      	uxth	r5, r5
 80012fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001300:	fb03 f00e 	mul.w	r0, r3, lr
 8001304:	42a8      	cmp	r0, r5
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x28a>
 8001308:	eb1c 0505 	adds.w	r5, ip, r5
 800130c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001310:	d216      	bcs.n	8001340 <__udivmoddi4+0x2b0>
 8001312:	42a8      	cmp	r0, r5
 8001314:	d914      	bls.n	8001340 <__udivmoddi4+0x2b0>
 8001316:	3b02      	subs	r3, #2
 8001318:	4465      	add	r5, ip
 800131a:	1a28      	subs	r0, r5, r0
 800131c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001320:	e738      	b.n	8001194 <__udivmoddi4+0x104>
 8001322:	4631      	mov	r1, r6
 8001324:	4630      	mov	r0, r6
 8001326:	e707      	b.n	8001138 <__udivmoddi4+0xa8>
 8001328:	462f      	mov	r7, r5
 800132a:	e6e4      	b.n	80010f6 <__udivmoddi4+0x66>
 800132c:	4618      	mov	r0, r3
 800132e:	e6f9      	b.n	8001124 <__udivmoddi4+0x94>
 8001330:	454b      	cmp	r3, r9
 8001332:	d2a9      	bcs.n	8001288 <__udivmoddi4+0x1f8>
 8001334:	ebb9 0802 	subs.w	r8, r9, r2
 8001338:	eb65 0e0c 	sbc.w	lr, r5, ip
 800133c:	3801      	subs	r0, #1
 800133e:	e7a3      	b.n	8001288 <__udivmoddi4+0x1f8>
 8001340:	4643      	mov	r3, r8
 8001342:	e7ea      	b.n	800131a <__udivmoddi4+0x28a>
 8001344:	4628      	mov	r0, r5
 8001346:	e794      	b.n	8001272 <__udivmoddi4+0x1e2>
 8001348:	4641      	mov	r1, r8
 800134a:	e7d1      	b.n	80012f0 <__udivmoddi4+0x260>
 800134c:	46d0      	mov	r8, sl
 800134e:	e77b      	b.n	8001248 <__udivmoddi4+0x1b8>
 8001350:	4464      	add	r4, ip
 8001352:	3802      	subs	r0, #2
 8001354:	e747      	b.n	80011e6 <__udivmoddi4+0x156>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	e72f      	b.n	80011bc <__udivmoddi4+0x12c>
 800135c:	4608      	mov	r0, r1
 800135e:	e706      	b.n	800116e <__udivmoddi4+0xde>
 8001360:	4631      	mov	r1, r6
 8001362:	e6e9      	b.n	8001138 <__udivmoddi4+0xa8>

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	715a      	strb	r2, [r3, #5]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b08a      	sub	sp, #40	; 0x28
 80013a2:	af04      	add	r7, sp, #16
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	460b      	mov	r3, r1
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8af9      	ldrh	r1, [r7, #22]
 80013be:	f241 3388 	movw	r3, #5000	; 0x1388
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2302      	movs	r3, #2
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	f002 fb96 	bl	8003b00 <HAL_I2C_Mem_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10b      	bne.n	80013f2 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80013da:	7d7b      	ldrb	r3, [r7, #21]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7d3b      	ldrb	r3, [r7, #20]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	801a      	strh	r2, [r3, #0]
		return true;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <read_register16+0x56>
	} else
		return false;
 80013f2:	2300      	movs	r3, #0

}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af04      	add	r7, sp, #16
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	460b      	mov	r3, r1
 800140a:	72fb      	strb	r3, [r7, #11]
 800140c:	4613      	mov	r3, r2
 800140e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	b29a      	uxth	r2, r3
 8001420:	7abb      	ldrb	r3, [r7, #10]
 8001422:	b29b      	uxth	r3, r3
 8001424:	8af9      	ldrh	r1, [r7, #22]
 8001426:	f241 3488 	movw	r4, #5000	; 0x1388
 800142a:	9402      	str	r4, [sp, #8]
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2301      	movs	r3, #1
 8001434:	f002 fb64 	bl	8003b00 <HAL_I2C_Mem_Read>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <read_data+0x46>
		return 0;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <read_data+0x48>
	else
		return 1;
 8001442:	2301      	movs	r3, #1

}
 8001444:	4618      	mov	r0, r3
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	461a      	mov	r2, r3
 8001458:	2188      	movs	r1, #136	; 0x88
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff9f 	bl	800139e <read_register16>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06f      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3302      	adds	r3, #2
 800146a:	461a      	mov	r2, r3
 800146c:	218a      	movs	r1, #138	; 0x8a
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff95 	bl	800139e <read_register16>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d065      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	461a      	mov	r2, r3
 8001480:	218c      	movs	r1, #140	; 0x8c
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff8b 	bl	800139e <read_register16>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d05b      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3306      	adds	r3, #6
 8001492:	461a      	mov	r2, r3
 8001494:	218e      	movs	r1, #142	; 0x8e
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff81 	bl	800139e <read_register16>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d051      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3308      	adds	r3, #8
 80014a6:	461a      	mov	r2, r3
 80014a8:	2190      	movs	r1, #144	; 0x90
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff77 	bl	800139e <read_register16>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d047      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	330a      	adds	r3, #10
 80014ba:	461a      	mov	r2, r3
 80014bc:	2192      	movs	r1, #146	; 0x92
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff6d 	bl	800139e <read_register16>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d03d      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	330c      	adds	r3, #12
 80014ce:	461a      	mov	r2, r3
 80014d0:	2194      	movs	r1, #148	; 0x94
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff63 	bl	800139e <read_register16>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d033      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	330e      	adds	r3, #14
 80014e2:	461a      	mov	r2, r3
 80014e4:	2196      	movs	r1, #150	; 0x96
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff59 	bl	800139e <read_register16>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d029      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3310      	adds	r3, #16
 80014f6:	461a      	mov	r2, r3
 80014f8:	2198      	movs	r1, #152	; 0x98
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff4f 	bl	800139e <read_register16>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01f      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3312      	adds	r3, #18
 800150a:	461a      	mov	r2, r3
 800150c:	219a      	movs	r1, #154	; 0x9a
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff45 	bl	800139e <read_register16>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3314      	adds	r3, #20
 800151e:	461a      	mov	r2, r3
 8001520:	219c      	movs	r1, #156	; 0x9c
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff3b 	bl	800139e <read_register16>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001532:	461a      	mov	r2, r3
 8001534:	219e      	movs	r1, #158	; 0x9e
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff31 	bl	800139e <read_register16>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <read_calibration_data+0xfa>

		return true;
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <read_calibration_data+0xfc>
	}

	return false;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af04      	add	r7, sp, #16
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
 800155c:	4613      	mov	r3, r2
 800155e:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	b29a      	uxth	r2, r3
 8001570:	89f9      	ldrh	r1, [r7, #14]
 8001572:	f242 7310 	movw	r3, #10000	; 0x2710
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	1cbb      	adds	r3, r7, #2
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	f002 f9c3 	bl	800390c <HAL_I2C_Mem_Write>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <write_register8+0x40>
		return false;
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <write_register8+0x42>
	else
		return true;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_1) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015a8:	2b77      	cmp	r3, #119	; 0x77
 80015aa:	d001      	beq.n	80015b0 <bmp280_init+0x16>

		return false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e071      	b.n	8001694 <bmp280_init+0xfa>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015b6:	2301      	movs	r3, #1
 80015b8:	21d0      	movs	r1, #208	; 0xd0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff1e 	bl	80013fc <read_data>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <bmp280_init+0x30>
		return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e064      	b.n	8001694 <bmp280_init+0xfa>
	}

	if (dev->id != BMP280_CHIP_ID) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015d0:	2b58      	cmp	r3, #88	; 0x58
 80015d2:	d001      	beq.n	80015d8 <bmp280_init+0x3e>

		return false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e05d      	b.n	8001694 <bmp280_init+0xfa>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80015d8:	22b6      	movs	r2, #182	; 0xb6
 80015da:	21e0      	movs	r1, #224	; 0xe0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffb7 	bl	8001550 <write_register8>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <bmp280_init+0x52>
		return false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e053      	b.n	8001694 <bmp280_init+0xfa>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80015ec:	f107 020d 	add.w	r2, r7, #13
 80015f0:	2301      	movs	r3, #1
 80015f2:	21f3      	movs	r1, #243	; 0xf3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff01 	bl	80013fc <read_data>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f5      	bne.n	80015ec <bmp280_init+0x52>
				&& (status & 1) == 0)
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <bmp280_init+0x52>
			break;
	}

	if (!read_calibration_data(dev)) {
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff1e 	bl	800144c <read_calibration_data>
 8001610:	4603      	mov	r3, r0
 8001612:	f083 0301 	eor.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d100      	bne.n	800161e <bmp280_init+0x84>
 800161c:	e001      	b.n	8001622 <bmp280_init+0x88>
		return false;
 800161e:	2300      	movs	r3, #0
 8001620:	e038      	b.n	8001694 <bmp280_init+0xfa>
	}


	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	b25a      	sxtb	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	461a      	mov	r2, r3
 800163c:	21f5      	movs	r1, #245	; 0xf5
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff86 	bl	8001550 <write_register8>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <bmp280_init+0xb4>
		return false;
 800164a:	2300      	movs	r3, #0
 800164c:	e022      	b.n	8001694 <bmp280_init+0xfa>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <bmp280_init+0xc2>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001662:	b25a      	sxtb	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b25a      	sxtb	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800167a:	73bb      	strb	r3, [r7, #14]


	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	461a      	mov	r2, r3
 8001680:	21f4      	movs	r1, #244	; 0xf4
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff64 	bl	8001550 <write_register8>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <bmp280_init+0xf8>
		return false;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <bmp280_init+0xfa>
	}

	return true;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	10da      	asrs	r2, r3, #3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80016be:	12db      	asrs	r3, r3, #11
 80016c0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	111b      	asrs	r3, r3, #4
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	1112      	asrs	r2, r2, #4
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	8809      	ldrh	r1, [r1, #0]
 80016d4:	1a52      	subs	r2, r2, r1
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80016e6:	139b      	asrs	r3, r3, #14
 80016e8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	441a      	add	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3380      	adds	r3, #128	; 0x80
 8001700:	121b      	asrs	r3, r3, #8
}
 8001702:	4618      	mov	r0, r3
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800170c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001710:	b0cc      	sub	sp, #304	; 0x130
 8001712:	af00      	add	r7, sp, #0
 8001714:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001718:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800171c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001724:	17da      	asrs	r2, r3, #31
 8001726:	461c      	mov	r4, r3
 8001728:	4615      	mov	r5, r2
 800172a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800172e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001732:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001736:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800173a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800173e:	fb03 f102 	mul.w	r1, r3, r2
 8001742:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	18ca      	adds	r2, r1, r3
 8001750:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001754:	fba3 8903 	umull	r8, r9, r3, r3
 8001758:	eb02 0309 	add.w	r3, r2, r9
 800175c:	4699      	mov	r9, r3
 800175e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001762:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001766:	b21b      	sxth	r3, r3
 8001768:	17da      	asrs	r2, r3, #31
 800176a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800176e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001772:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001776:	4603      	mov	r3, r0
 8001778:	fb03 f209 	mul.w	r2, r3, r9
 800177c:	460b      	mov	r3, r1
 800177e:	fb08 f303 	mul.w	r3, r8, r3
 8001782:	4413      	add	r3, r2
 8001784:	4602      	mov	r2, r0
 8001786:	fba8 2102 	umull	r2, r1, r8, r2
 800178a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800178e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001796:	4413      	add	r3, r2
 8001798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800179c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80017a0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80017a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80017a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	17da      	asrs	r2, r3, #31
 80017b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80017b8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80017bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017c0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80017c4:	462a      	mov	r2, r5
 80017c6:	fb02 f203 	mul.w	r2, r2, r3
 80017ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ce:	4621      	mov	r1, r4
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	441a      	add	r2, r3
 80017d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017da:	4621      	mov	r1, r4
 80017dc:	fba3 3101 	umull	r3, r1, r3, r1
 80017e0:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80017e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80017e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017ec:	18d3      	adds	r3, r2, r3
 80017ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80017fe:	462b      	mov	r3, r5
 8001800:	0459      	lsls	r1, r3, #17
 8001802:	4622      	mov	r2, r4
 8001804:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001808:	4623      	mov	r3, r4
 800180a:	0458      	lsls	r0, r3, #17
 800180c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001810:	1814      	adds	r4, r2, r0
 8001812:	643c      	str	r4, [r7, #64]	; 0x40
 8001814:	414b      	adcs	r3, r1
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
 8001818:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800181c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001824:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001828:	b21b      	sxth	r3, r3
 800182a:	17da      	asrs	r2, r3, #31
 800182c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001834:	f04f 0000 	mov.w	r0, #0
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001840:	00d9      	lsls	r1, r3, #3
 8001842:	2000      	movs	r0, #0
 8001844:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001848:	1814      	adds	r4, r2, r0
 800184a:	63bc      	str	r4, [r7, #56]	; 0x38
 800184c:	414b      	adcs	r3, r1
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001850:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001854:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001858:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800185c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001860:	fb03 f102 	mul.w	r1, r3, r2
 8001864:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	18ca      	adds	r2, r1, r3
 8001872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001876:	fba3 3103 	umull	r3, r1, r3, r3
 800187a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800187e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800188c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001890:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001894:	b21b      	sxth	r3, r3
 8001896:	17da      	asrs	r2, r3, #31
 8001898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800189c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80018a0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80018a4:	4622      	mov	r2, r4
 80018a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80018aa:	4641      	mov	r1, r8
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	464d      	mov	r5, r9
 80018b2:	4618      	mov	r0, r3
 80018b4:	4621      	mov	r1, r4
 80018b6:	4603      	mov	r3, r0
 80018b8:	fb03 f305 	mul.w	r3, r3, r5
 80018bc:	4413      	add	r3, r2
 80018be:	4602      	mov	r2, r0
 80018c0:	4641      	mov	r1, r8
 80018c2:	fba2 2101 	umull	r2, r1, r2, r1
 80018c6:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80018ca:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80018ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80018d2:	4413      	add	r3, r2
 80018d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80018d8:	f04f 0000 	mov.w	r0, #0
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80018e4:	4623      	mov	r3, r4
 80018e6:	0a18      	lsrs	r0, r3, #8
 80018e8:	462a      	mov	r2, r5
 80018ea:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80018ee:	462b      	mov	r3, r5
 80018f0:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80018f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	17da      	asrs	r2, r3, #31
 80018fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001902:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800190a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800190e:	464a      	mov	r2, r9
 8001910:	fb02 f203 	mul.w	r2, r2, r3
 8001914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001918:	4644      	mov	r4, r8
 800191a:	fb04 f303 	mul.w	r3, r4, r3
 800191e:	441a      	add	r2, r3
 8001920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001924:	4644      	mov	r4, r8
 8001926:	fba3 3404 	umull	r3, r4, r3, r4
 800192a:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800192e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001932:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001936:	18d3      	adds	r3, r2, r3
 8001938:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001948:	464c      	mov	r4, r9
 800194a:	0323      	lsls	r3, r4, #12
 800194c:	46c4      	mov	ip, r8
 800194e:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001952:	4644      	mov	r4, r8
 8001954:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001956:	1884      	adds	r4, r0, r2
 8001958:	633c      	str	r4, [r7, #48]	; 0x30
 800195a:	eb41 0303 	adc.w	r3, r1, r3
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
 8001960:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001964:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001968:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800196c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001970:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001974:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800197c:	88db      	ldrh	r3, [r3, #6]
 800197e:	b29b      	uxth	r3, r3
 8001980:	2200      	movs	r2, #0
 8001982:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001986:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800198a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800198e:	4622      	mov	r2, r4
 8001990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001994:	4641      	mov	r1, r8
 8001996:	fb01 f202 	mul.w	r2, r1, r2
 800199a:	464d      	mov	r5, r9
 800199c:	4618      	mov	r0, r3
 800199e:	4621      	mov	r1, r4
 80019a0:	4603      	mov	r3, r0
 80019a2:	fb03 f305 	mul.w	r3, r3, r5
 80019a6:	4413      	add	r3, r2
 80019a8:	4602      	mov	r2, r0
 80019aa:	4641      	mov	r1, r8
 80019ac:	fba2 2101 	umull	r2, r1, r2, r1
 80019b0:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80019b4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80019b8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80019bc:	4413      	add	r3, r2
 80019be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80019ce:	4629      	mov	r1, r5
 80019d0:	104a      	asrs	r2, r1, #1
 80019d2:	4629      	mov	r1, r5
 80019d4:	17cb      	asrs	r3, r1, #31
 80019d6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80019da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80019de:	4313      	orrs	r3, r2
 80019e0:	d101      	bne.n	80019e6 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 80019e2:	2300      	movs	r3, #0
 80019e4:	e146      	b.n	8001c74 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 80019e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ea:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80019f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 80019fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a00:	105b      	asrs	r3, r3, #1
 8001a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a0a:	07db      	lsls	r3, r3, #31
 8001a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a10:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a14:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a18:	4604      	mov	r4, r0
 8001a1a:	1aa4      	subs	r4, r4, r2
 8001a1c:	67bc      	str	r4, [r7, #120]	; 0x78
 8001a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8001a22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a24:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a28:	4622      	mov	r2, r4
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	1891      	adds	r1, r2, r2
 8001a2e:	6239      	str	r1, [r7, #32]
 8001a30:	415b      	adcs	r3, r3
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a38:	4621      	mov	r1, r4
 8001a3a:	1851      	adds	r1, r2, r1
 8001a3c:	61b9      	str	r1, [r7, #24]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	414b      	adcs	r3, r1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a50:	4649      	mov	r1, r9
 8001a52:	018b      	lsls	r3, r1, #6
 8001a54:	4641      	mov	r1, r8
 8001a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	018a      	lsls	r2, r1, #6
 8001a5e:	4641      	mov	r1, r8
 8001a60:	1889      	adds	r1, r1, r2
 8001a62:	6139      	str	r1, [r7, #16]
 8001a64:	4649      	mov	r1, r9
 8001a66:	eb43 0101 	adc.w	r1, r3, r1
 8001a6a:	6179      	str	r1, [r7, #20]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a78:	4649      	mov	r1, r9
 8001a7a:	008b      	lsls	r3, r1, #2
 8001a7c:	46c4      	mov	ip, r8
 8001a7e:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001a82:	4641      	mov	r1, r8
 8001a84:	008a      	lsls	r2, r1, #2
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	189b      	adds	r3, r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	460b      	mov	r3, r1
 8001a94:	462a      	mov	r2, r5
 8001a96:	eb42 0303 	adc.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	008b      	lsls	r3, r1, #2
 8001aac:	46c4      	mov	ip, r8
 8001aae:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ab2:	4641      	mov	r1, r8
 8001ab4:	008a      	lsls	r2, r1, #2
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	4622      	mov	r2, r4
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	eb42 0303 	adc.w	r3, r2, r3
 8001aca:	677b      	str	r3, [r7, #116]	; 0x74
 8001acc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001ad0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ad4:	f7ff fa74 	bl	8000fc0 <__aeabi_ldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ae4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	17da      	asrs	r2, r3, #31
 8001aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001aee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001af0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	0b50      	lsrs	r0, r2, #13
 8001afe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b02:	1359      	asrs	r1, r3, #13
 8001b04:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001b08:	462b      	mov	r3, r5
 8001b0a:	fb00 f203 	mul.w	r2, r0, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	fb03 f301 	mul.w	r3, r3, r1
 8001b14:	4413      	add	r3, r2
 8001b16:	4622      	mov	r2, r4
 8001b18:	fba2 2100 	umull	r2, r1, r2, r0
 8001b1c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001b20:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001b24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001b28:	4413      	add	r3, r2
 8001b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	0b50      	lsrs	r0, r2, #13
 8001b3c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b40:	1359      	asrs	r1, r3, #13
 8001b42:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001b46:	462b      	mov	r3, r5
 8001b48:	fb00 f203 	mul.w	r2, r0, r3
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	fb03 f301 	mul.w	r3, r3, r1
 8001b52:	4413      	add	r3, r2
 8001b54:	4622      	mov	r2, r4
 8001b56:	fba2 2100 	umull	r2, r1, r2, r0
 8001b5a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001b5e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001b62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001b66:	4413      	add	r3, r2
 8001b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001b78:	4621      	mov	r1, r4
 8001b7a:	0e4a      	lsrs	r2, r1, #25
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	460c      	mov	r4, r1
 8001b82:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001b86:	164b      	asrs	r3, r1, #25
 8001b88:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	17da      	asrs	r2, r3, #31
 8001b98:	663b      	str	r3, [r7, #96]	; 0x60
 8001b9a:	667a      	str	r2, [r7, #100]	; 0x64
 8001b9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ba0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001ba4:	462a      	mov	r2, r5
 8001ba6:	fb02 f203 	mul.w	r2, r2, r3
 8001baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001bae:	4621      	mov	r1, r4
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bba:	4621      	mov	r1, r4
 8001bbc:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc0:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001bc4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001bc8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001bcc:	4413      	add	r3, r2
 8001bce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001bde:	4621      	mov	r1, r4
 8001be0:	0cca      	lsrs	r2, r1, #19
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	460c      	mov	r4, r1
 8001be8:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001bec:	14cb      	asrs	r3, r1, #19
 8001bee:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001bf2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001bf6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001bfa:	1884      	adds	r4, r0, r2
 8001bfc:	65bc      	str	r4, [r7, #88]	; 0x58
 8001bfe:	eb41 0303 	adc.w	r3, r1, r3
 8001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c08:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	1889      	adds	r1, r1, r2
 8001c10:	6539      	str	r1, [r7, #80]	; 0x50
 8001c12:	4629      	mov	r1, r5
 8001c14:	eb43 0101 	adc.w	r1, r3, r1
 8001c18:	6579      	str	r1, [r7, #84]	; 0x54
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001c26:	4623      	mov	r3, r4
 8001c28:	0a18      	lsrs	r0, r3, #8
 8001c2a:	462a      	mov	r2, r5
 8001c2c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001c30:	462b      	mov	r3, r5
 8001c32:	1219      	asrs	r1, r3, #8
 8001c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	17da      	asrs	r2, r3, #31
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001c50:	464c      	mov	r4, r9
 8001c52:	0123      	lsls	r3, r4, #4
 8001c54:	46c4      	mov	ip, r8
 8001c56:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001c5a:	4644      	mov	r4, r8
 8001c5c:	0122      	lsls	r2, r4, #4
 8001c5e:	1884      	adds	r4, r0, r2
 8001c60:	603c      	str	r4, [r7, #0]
 8001c62:	eb41 0303 	adc.w	r3, r1, r3
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c6c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001c70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c80 <bmp280_read_fixed>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
	int32_t adc_temp;
	uint8_t data[8];


	// Need to read in one sequence to ensure they match.
	size_t size = temperature ? 8 : 6;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <bmp280_read_fixed+0x16>
 8001c92:	2308      	movs	r3, #8
 8001c94:	e000      	b.n	8001c98 <bmp280_read_fixed+0x18>
 8001c96:	2306      	movs	r3, #6
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(dev, 0xf7, data, size)) {
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f107 0214 	add.w	r2, r7, #20
 8001ca2:	21f7      	movs	r1, #247	; 0xf7
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fba9 	bl	80013fc <read_data>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <bmp280_read_fixed+0x34>
		return false;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e027      	b.n	8001d04 <bmp280_read_fixed+0x84>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001cb4:	7d3b      	ldrb	r3, [r7, #20]
 8001cb6:	031a      	lsls	r2, r3, #12
 8001cb8:	7d7b      	ldrb	r3, [r7, #21]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	7dba      	ldrb	r2, [r7, #22]
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	031a      	lsls	r2, r3, #12
 8001ccc:	7e3b      	ldrb	r3, [r7, #24]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	7e7a      	ldrb	r2, [r7, #25]
 8001cd4:	0912      	lsrs	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	69f9      	ldr	r1, [r7, #28]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff fcd9 	bl	800169c <compensate_temperature>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff fd08 	bl	800170c <compensate_pressure>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]

	return true;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure)) {
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff ffac 	bl	8001c80 <bmp280_read_fixed>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01c      	beq.n	8001d68 <bmp280_read_float+0x5c>
		*temperature = (float) fixed_temperature / 100;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff7b 	bl	8000c2c <__aeabi_i2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <bmp280_read_float+0x68>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f87e 	bl	8000e3c <__aeabi_fdiv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff6a 	bl	8000c24 <__aeabi_ui2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f870 	bl	8000e3c <__aeabi_fdiv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
		return true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <bmp280_read_float+0x5e>
	}

	return false;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	42c80000 	.word	0x42c80000

08001d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_GPIO_Init+0xc0>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2120      	movs	r1, #32
 8001df2:	4812      	ldr	r0, [pc, #72]	; (8001e3c <MX_GPIO_Init+0xc4>)
 8001df4:	f001 f90a 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480c      	ldr	r0, [pc, #48]	; (8001e40 <MX_GPIO_Init+0xc8>)
 8001e10:	f000 ff6c 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e14:	2320      	movs	r3, #32
 8001e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4804      	ldr	r0, [pc, #16]	; (8001e3c <MX_GPIO_Init+0xc4>)
 8001e2c:	f000 ff5e 	bl	8002cec <HAL_GPIO_Init>

}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020800 	.word	0x40020800

08001e44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <MX_I2C1_Init+0x54>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_I2C1_Init+0x58>)
 8001e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e82:	f001 f8db 	bl	800303c <HAL_I2C_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e8c:	f000 fb00 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200001f8 	.word	0x200001f8
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	000186a0 	.word	0x000186a0

08001ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_I2C_MspInit+0x7c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d128      	bne.n	8001f14 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <HAL_I2C_MspInit+0x84>)
 8001ef8:	f000 fef8 	bl	8002cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f06:	6253      	str	r3, [r2, #36]	; 0x24
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_I2C_MspInit+0x80>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020400 	.word	0x40020400

08001f28 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f043 030c 	orr.w	r3, r3, #12
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f043 0320 	orr.w	r3, r3, #32
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001f54:	f107 0118 	add.w	r1, r7, #24
 8001f58:	230a      	movs	r3, #10
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	486c      	ldr	r0, [pc, #432]	; (8002110 <lcd_init+0x1e8>)
 8001f5e:	f003 fe4a 	bl	8005bf6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001f62:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001f66:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001f68:	f107 0114 	add.w	r1, r7, #20
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4867      	ldr	r0, [pc, #412]	; (8002110 <lcd_init+0x1e8>)
 8001f72:	f003 fe40 	bl	8005bf6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001f76:	2364      	movs	r3, #100	; 0x64
 8001f78:	2205      	movs	r2, #5
 8001f7a:	217c      	movs	r1, #124	; 0x7c
 8001f7c:	69f8      	ldr	r0, [r7, #28]
 8001f7e:	f001 ffe5 	bl	8003f4c <HAL_I2C_IsDeviceReady>
 8001f82:	4603      	mov	r3, r0
 8001f84:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8001f86:	f107 0113 	add.w	r1, r7, #19
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4860      	ldr	r0, [pc, #384]	; (8002110 <lcd_init+0x1e8>)
 8001f90:	f003 fe31 	bl	8005bf6 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001f94:	2032      	movs	r0, #50	; 0x32
 8001f96:	f000 fda7 	bl	8002ae8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001f9a:	f107 0218 	add.w	r2, r7, #24
 8001f9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	217c      	movs	r1, #124	; 0x7c
 8001fa8:	69f8      	ldr	r0, [r7, #28]
 8001faa:	f001 f98b 	bl	80032c4 <HAL_I2C_Master_Transmit>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001fb2:	f107 0112 	add.w	r1, r7, #18
 8001fb6:	230a      	movs	r3, #10
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4855      	ldr	r0, [pc, #340]	; (8002110 <lcd_init+0x1e8>)
 8001fbc:	f003 fe1b 	bl	8005bf6 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001fc0:	2032      	movs	r0, #50	; 0x32
 8001fc2:	f000 fd91 	bl	8002ae8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001fc6:	f107 0218 	add.w	r2, r7, #24
 8001fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	217c      	movs	r1, #124	; 0x7c
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	f001 f975 	bl	80032c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001fda:	2005      	movs	r0, #5
 8001fdc:	f000 fd84 	bl	8002ae8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001fe0:	f107 0218 	add.w	r2, r7, #24
 8001fe4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2302      	movs	r3, #2
 8001fec:	217c      	movs	r1, #124	; 0x7c
 8001fee:	69f8      	ldr	r0, [r7, #28]
 8001ff0:	f001 f968 	bl	80032c4 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	b2db      	uxtb	r3, r3
 8002004:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8002006:	f107 0218 	add.w	r2, r7, #24
 800200a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2302      	movs	r3, #2
 8002012:	217c      	movs	r1, #124	; 0x7c
 8002014:	69f8      	ldr	r0, [r7, #28]
 8002016:	f001 f955 	bl	80032c4 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800201a:	2301      	movs	r3, #1
 800201c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800201e:	f107 0218 	add.w	r2, r7, #24
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	217c      	movs	r1, #124	; 0x7c
 800202c:	69f8      	ldr	r0, [r7, #28]
 800202e:	f001 f949 	bl	80032c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002032:	2002      	movs	r0, #2
 8002034:	f000 fd58 	bl	8002ae8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	b2db      	uxtb	r3, r3
 8002048:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800204a:	f107 0218 	add.w	r2, r7, #24
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2302      	movs	r3, #2
 8002056:	217c      	movs	r1, #124	; 0x7c
 8002058:	69f8      	ldr	r0, [r7, #28]
 800205a:	f001 f933 	bl	80032c4 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 800205e:	2300      	movs	r3, #0
 8002060:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002066:	f107 0210 	add.w	r2, r7, #16
 800206a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	2302      	movs	r3, #2
 8002072:	21c4      	movs	r1, #196	; 0xc4
 8002074:	69f8      	ldr	r0, [r7, #28]
 8002076:	f001 f925 	bl	80032c4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800207a:	2308      	movs	r3, #8
 800207c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800207e:	23ff      	movs	r3, #255	; 0xff
 8002080:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002082:	f107 0210 	add.w	r2, r7, #16
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2302      	movs	r3, #2
 800208e:	21c4      	movs	r1, #196	; 0xc4
 8002090:	69f8      	ldr	r0, [r7, #28]
 8002092:	f001 f917 	bl	80032c4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8002096:	2301      	movs	r3, #1
 8002098:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800209a:	2320      	movs	r3, #32
 800209c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800209e:	f107 0210 	add.w	r2, r7, #16
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2302      	movs	r3, #2
 80020aa:	21c4      	movs	r1, #196	; 0xc4
 80020ac:	69f8      	ldr	r0, [r7, #28]
 80020ae:	f001 f909 	bl	80032c4 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80020b2:	2304      	movs	r3, #4
 80020b4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80020b6:	23ff      	movs	r3, #255	; 0xff
 80020b8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2302      	movs	r3, #2
 80020c6:	21c4      	movs	r1, #196	; 0xc4
 80020c8:	69f8      	ldr	r0, [r7, #28]
 80020ca:	f001 f8fb 	bl	80032c4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80020ce:	2303      	movs	r3, #3
 80020d0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80020d2:	23ff      	movs	r3, #255	; 0xff
 80020d4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2302      	movs	r3, #2
 80020e2:	21c4      	movs	r1, #196	; 0xc4
 80020e4:	69f8      	ldr	r0, [r7, #28]
 80020e6:	f001 f8ed 	bl	80032c4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80020ea:	2302      	movs	r3, #2
 80020ec:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80020ee:	23ff      	movs	r3, #255	; 0xff
 80020f0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2302      	movs	r3, #2
 80020fe:	21c4      	movs	r1, #196	; 0xc4
 8002100:	69f8      	ldr	r0, [r7, #28]
 8002102:	f001 f8df 	bl	80032c4 <HAL_I2C_Master_Transmit>


}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002c8 	.word	0x200002c8

08002114 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af02      	add	r7, sp, #8
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8002122:	2340      	movs	r3, #64	; 0x40
 8002124:	733b      	strb	r3, [r7, #12]
    int i=0;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800212a:	e011      	b.n	8002150 <lcd_print+0x3c>
    {
            data[1] = str[i];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2302      	movs	r3, #2
 8002142:	217c      	movs	r1, #124	; 0x7c
 8002144:	6938      	ldr	r0, [r7, #16]
 8002146:	f001 f8bd 	bl	80032c4 <HAL_I2C_Master_Transmit>
            i++;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e7      	bne.n	800212c <lcd_print+0x18>
   }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af02      	add	r7, sp, #8
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
 8002172:	4613      	mov	r3, r2
 8002174:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <lcd_position+0x24>
    {
        col = col | 0x80;
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002186:	70fb      	strb	r3, [r7, #3]
 8002188:	e003      	b.n	8002192 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002190:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800219a:	f107 0208 	add.w	r2, r7, #8
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2302      	movs	r3, #2
 80021a6:	217c      	movs	r1, #124	; 0x7c
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f001 f88b 	bl	80032c4 <HAL_I2C_Master_Transmit>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	460b      	mov	r3, r1
 80021c4:	71bb      	strb	r3, [r7, #6]
 80021c6:	4613      	mov	r3, r2
 80021c8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <reglagecouleur+0x74>)
 80021cc:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 80021ce:	2304      	movs	r3, #4
 80021d0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 80021d6:	f107 0210 	add.w	r2, r7, #16
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2302      	movs	r3, #2
 80021e2:	21c4      	movs	r1, #196	; 0xc4
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f001 f86d 	bl	80032c4 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80021ea:	2303      	movs	r3, #3
 80021ec:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80021ee:	79bb      	ldrb	r3, [r7, #6]
 80021f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2302      	movs	r3, #2
 80021fe:	21c4      	movs	r1, #196	; 0xc4
 8002200:	6978      	ldr	r0, [r7, #20]
 8002202:	f001 f85f 	bl	80032c4 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8002206:	2302      	movs	r3, #2
 8002208:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2302      	movs	r3, #2
 800221a:	21c4      	movs	r1, #196	; 0xc4
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f001 f851 	bl	80032c4 <HAL_I2C_Master_Transmit>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001f8 	.word	0x200001f8

08002230 <main>:




int main(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b096      	sub	sp, #88	; 0x58
 8002234:	af00      	add	r7, sp, #0

  static rgb_lcd lcdData;
  float temperature=0,pressure=0,humidity=0;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
  char Data_pres[10];
  char Data[20];
  uint8_t buf[15];
  int size;

  HAL_Init();
 8002248:	f000 fc19 	bl	8002a7e <HAL_Init>
  SystemClock_Config();
 800224c:	f000 f8c0 	bl	80023d0 <SystemClock_Config>
  MX_GPIO_Init();
 8002250:	f7ff fd92 	bl	8001d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002254:	f000 fb80 	bl	8002958 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002258:	f7ff fdf4 	bl	8001e44 <MX_I2C1_Init>
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 800225c:	4950      	ldr	r1, [pc, #320]	; (80023a0 <main+0x170>)
 800225e:	4851      	ldr	r0, [pc, #324]	; (80023a4 <main+0x174>)
 8002260:	f7ff fe62 	bl	8001f28 <lcd_init>
  lcd_position(&hi2c1,0,0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	484e      	ldr	r0, [pc, #312]	; (80023a4 <main+0x174>)
 800226a:	f7ff ff7c 	bl	8002166 <lcd_position>
  reglagecouleur(0,0,255);
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	2100      	movs	r1, #0
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff ffa0 	bl	80021b8 <reglagecouleur>
  bmp280_init_default_params(&bmp280.params);
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <main+0x178>)
 800227a:	f7ff f875 	bl	8001368 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_1;
 800227e:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <main+0x17c>)
 8002280:	2277      	movs	r2, #119	; 0x77
 8002282:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <main+0x17c>)
 8002286:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <main+0x174>)
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280_init(&bmp280, &bmp280.params);
 800228a:	4947      	ldr	r1, [pc, #284]	; (80023a8 <main+0x178>)
 800228c:	4847      	ldr	r0, [pc, #284]	; (80023ac <main+0x17c>)
 800228e:	f7ff f984 	bl	800159a <bmp280_init>


	while(1){
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 8002292:	e019      	b.n	80022c8 <main+0x98>
			size = sprintf((char *)Data,"Temperature/pressure reading failed\n\r");
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4945      	ldr	r1, [pc, #276]	; (80023b0 <main+0x180>)
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fe9c 	bl	8006fd8 <siprintf>
 80022a0:	6478      	str	r0, [r7, #68]	; 0x44
			 HAL_UART_Transmit(&huart2, Data, size, 1000);
 80022a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f107 0110 	add.w	r1, r7, #16
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	4841      	ldr	r0, [pc, #260]	; (80023b4 <main+0x184>)
 80022b0:	f003 fca1 	bl	8005bf6 <HAL_UART_Transmit>
			 for(int i=0;i<100000;i++);
 80022b4:	2300      	movs	r3, #0
 80022b6:	657b      	str	r3, [r7, #84]	; 0x54
 80022b8:	e002      	b.n	80022c0 <main+0x90>
 80022ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022bc:	3301      	adds	r3, #1
 80022be:	657b      	str	r3, [r7, #84]	; 0x54
 80022c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <main+0x188>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	ddf8      	ble.n	80022ba <main+0x8a>
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 80022c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80022cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022d0:	4619      	mov	r1, r3
 80022d2:	4836      	ldr	r0, [pc, #216]	; (80023ac <main+0x17c>)
 80022d4:	f7ff fd1a 	bl	8001d0c <bmp280_read_float>
 80022d8:	4603      	mov	r3, r0
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1d7      	bne.n	8002294 <main+0x64>
			 }

    humidity = humidity_read_value (&hi2c1,&huart2);
 80022e4:	4933      	ldr	r1, [pc, #204]	; (80023b4 <main+0x184>)
 80022e6:	482f      	ldr	r0, [pc, #188]	; (80023a4 <main+0x174>)
 80022e8:	f000 f8d8 	bl	800249c <humidity_read_value>
 80022ec:	64b8      	str	r0, [r7, #72]	; 0x48
	for(int i=0;i<100000;i++);
 80022ee:	2300      	movs	r3, #0
 80022f0:	653b      	str	r3, [r7, #80]	; 0x50
 80022f2:	e002      	b.n	80022fa <main+0xca>
 80022f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f6:	3301      	adds	r3, #1
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
 80022fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fc:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <main+0x188>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	ddf8      	ble.n	80022f4 <main+0xc4>

	sprintf(Data_temp,"%.1f C",temperature);
 8002302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8a7 	bl	8000458 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002312:	492a      	ldr	r1, [pc, #168]	; (80023bc <main+0x18c>)
 8002314:	f004 fe60 	bl	8006fd8 <siprintf>
	sprintf(Data_pres,"%.1f Kpa",pressure/1000);
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	4929      	ldr	r1, [pc, #164]	; (80023c0 <main+0x190>)
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fd8d 	bl	8000e3c <__aeabi_fdiv>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f897 	bl	8000458 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002332:	4924      	ldr	r1, [pc, #144]	; (80023c4 <main+0x194>)
 8002334:	f004 fe50 	bl	8006fd8 <siprintf>
	lcd_position(&hi2c1,0,0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	4819      	ldr	r0, [pc, #100]	; (80023a4 <main+0x174>)
 800233e:	f7ff ff12 	bl	8002166 <lcd_position>
	lcd_print(&hi2c1,"Pres: ");
 8002342:	4921      	ldr	r1, [pc, #132]	; (80023c8 <main+0x198>)
 8002344:	4817      	ldr	r0, [pc, #92]	; (80023a4 <main+0x174>)
 8002346:	f7ff fee5 	bl	8002114 <lcd_print>
    lcd_position(&hi2c1,7,0);
 800234a:	2200      	movs	r2, #0
 800234c:	2107      	movs	r1, #7
 800234e:	4815      	ldr	r0, [pc, #84]	; (80023a4 <main+0x174>)
 8002350:	f7ff ff09 	bl	8002166 <lcd_position>
	lcd_print(&hi2c1,Data_pres);
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <main+0x174>)
 800235c:	f7ff feda 	bl	8002114 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8002360:	2201      	movs	r2, #1
 8002362:	2100      	movs	r1, #0
 8002364:	480f      	ldr	r0, [pc, #60]	; (80023a4 <main+0x174>)
 8002366:	f7ff fefe 	bl	8002166 <lcd_position>
	lcd_print(&hi2c1,"Temp: ");
 800236a:	4918      	ldr	r1, [pc, #96]	; (80023cc <main+0x19c>)
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <main+0x174>)
 800236e:	f7ff fed1 	bl	8002114 <lcd_print>
	lcd_position(&hi2c1,7,1);
 8002372:	2201      	movs	r2, #1
 8002374:	2107      	movs	r1, #7
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <main+0x174>)
 8002378:	f7ff fef5 	bl	8002166 <lcd_position>
	lcd_print(&hi2c1,Data_temp);
 800237c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002380:	4619      	mov	r1, r3
 8002382:	4808      	ldr	r0, [pc, #32]	; (80023a4 <main+0x174>)
 8002384:	f7ff fec6 	bl	8002114 <lcd_print>

	 for(int i=0;i<100000;i++);
 8002388:	2300      	movs	r3, #0
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800238c:	e002      	b.n	8002394 <main+0x164>
 800238e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002390:	3301      	adds	r3, #1
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <main+0x188>)
 8002398:	4293      	cmp	r3, r2
 800239a:	ddf8      	ble.n	800238e <main+0x15e>
    while (!bmp280_read_float(&bmp280, &temperature, &pressure)) {
 800239c:	e794      	b.n	80022c8 <main+0x98>
 800239e:	bf00      	nop
 80023a0:	20000280 	.word	0x20000280
 80023a4:	200001f8 	.word	0x200001f8
 80023a8:	20000278 	.word	0x20000278
 80023ac:	2000024c 	.word	0x2000024c
 80023b0:	08009190 	.word	0x08009190
 80023b4:	200002c8 	.word	0x200002c8
 80023b8:	0001869f 	.word	0x0001869f
 80023bc:	080091b8 	.word	0x080091b8
 80023c0:	447a0000 	.word	0x447a0000
 80023c4:	080091c0 	.word	0x080091c0
 80023c8:	080091cc 	.word	0x080091cc
 80023cc:	080091d4 	.word	0x080091d4

080023d0 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b092      	sub	sp, #72	; 0x48
 80023d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	2234      	movs	r2, #52	; 0x34
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f004 f8ed 	bl	80065be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e4:	463b      	mov	r3, r7
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <SystemClock_Config+0x98>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80023fa:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <SystemClock_Config+0x98>)
 80023fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002400:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002402:	2302      	movs	r3, #2
 8002404:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002406:	2301      	movs	r3, #1
 8002408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800240a:	2310      	movs	r3, #16
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240e:	2302      	movs	r3, #2
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002412:	2300      	movs	r3, #0
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002416:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800241c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fb68 	bl	8004afc <HAL_RCC_OscConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002432:	f000 f82d 	bl	8002490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002436:	230f      	movs	r3, #15
 8002438:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243a:	2303      	movs	r3, #3
 800243c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800244a:	463b      	mov	r3, r7
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fe84 	bl	800515c <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800245a:	f000 f819 	bl	8002490 <Error_Handler>
  }
}
 800245e:	bf00      	nop
 8002460:	3748      	adds	r7, #72	; 0x48
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000

0800246c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800247e:	f000 fb17 	bl	8002ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40000400 	.word	0x40000400

08002490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002494:	b672      	cpsid	i
}
 8002496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002498:	e7fe      	b.n	8002498 <Error_Handler+0x8>
	...

0800249c <humidity_read_value>:
#include "sht31.h"




float humidity_read_value (I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef *huart2){
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b091      	sub	sp, #68	; 0x44
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
		uint8_t buf[20];
		volatile uint16_t value;
		volatile float temp;
		float Decimal_part;
		float Entier_part;
	    buf[0] = CAPTEUR_CMD_MSB;
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <humidity_read_value+0x168>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	753b      	strb	r3, [r7, #20]
	    		buf[1] = CAPTEUR_CMD_LSB;
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <humidity_read_value+0x16c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	757b      	strb	r3, [r7, #21]
	    		ret = HAL_I2C_Master_Transmit( hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <humidity_read_value+0x170>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b299      	uxth	r1, r3
 80024b8:	f107 0214 	add.w	r2, r7, #20
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2302      	movs	r3, #2
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fefd 	bl	80032c4 <HAL_I2C_Master_Transmit>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	    		if ( ret != HAL_OK)
 80024d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <humidity_read_value+0x5e>
	    		{
	    			strcpy((char*)buf, "erreur_T!!\r\n");
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <humidity_read_value+0x174>)
 80024de:	461c      	mov	r4, r3
 80024e0:	4613      	mov	r3, r2
 80024e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e4:	c407      	stmia	r4!, {r0, r1, r2}
 80024e6:	7023      	strb	r3, [r4, #0]
	    			HAL_UART_Transmit(huart2, buf, sizeof(buf), 1000);
 80024e8:	f107 0114 	add.w	r1, r7, #20
 80024ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f0:	2214      	movs	r2, #20
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	f003 fb7f 	bl	8005bf6 <HAL_UART_Transmit>
 80024f8:	e07e      	b.n	80025f8 <humidity_read_value+0x15c>
	    			else
	    		{



	    		ret = HAL_I2C_Master_Receive(hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <humidity_read_value+0x170>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b299      	uxth	r1, r3
 8002500:	f107 0214 	add.w	r2, r7, #20
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2306      	movs	r3, #6
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 ffd7 	bl	80034c0 <HAL_I2C_Master_Receive>
 8002512:	4603      	mov	r3, r0
 8002514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	    					if ( ret != HAL_OK)
 8002518:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <humidity_read_value+0xa6>
	    				{
	    					strcpy((char*)buf, "erreur_R!!\r\n");
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <humidity_read_value+0x178>)
 8002526:	461c      	mov	r4, r3
 8002528:	4613      	mov	r3, r2
 800252a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252c:	c407      	stmia	r4!, {r0, r1, r2}
 800252e:	7023      	strb	r3, [r4, #0]
	    					HAL_UART_Transmit(huart2, buf, sizeof(buf), 1000);
 8002530:	f107 0114 	add.w	r1, r7, #20
 8002534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002538:	2214      	movs	r2, #20
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f003 fb5b 	bl	8005bf6 <HAL_UART_Transmit>
 8002540:	e05a      	b.n	80025f8 <humidity_read_value+0x15c>
	    				}
	    		else
	    		{

	    			value  =   buf[1] | buf[0] << 8;
 8002542:	7d7b      	ldrb	r3, [r7, #21]
 8002544:	b21a      	sxth	r2, r3
 8002546:	7d3b      	ldrb	r3, [r7, #20]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	b21b      	sxth	r3, r3
 800254c:	4313      	orrs	r3, r2
 800254e:	b21b      	sxth	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	827b      	strh	r3, [r7, #18]


	    			temp = -45 + 175 * ( (float)value / 65535);
 8002554:	8a7b      	ldrh	r3, [r7, #18]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fb63 	bl	8000c24 <__aeabi_ui2f>
 800255e:	4603      	mov	r3, r0
 8002560:	492d      	ldr	r1, [pc, #180]	; (8002618 <humidity_read_value+0x17c>)
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fc6a 	bl	8000e3c <__aeabi_fdiv>
 8002568:	4603      	mov	r3, r0
 800256a:	492c      	ldr	r1, [pc, #176]	; (800261c <humidity_read_value+0x180>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fbb1 	bl	8000cd4 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	492a      	ldr	r1, [pc, #168]	; (8002620 <humidity_read_value+0x184>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe faa2 	bl	8000ac0 <__aeabi_fsub>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

	    			Entier_part = (int) temp;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fcf6 	bl	8000f74 <__aeabi_f2iz>
 8002588:	4603      	mov	r3, r0
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fb4e 	bl	8000c2c <__aeabi_i2f>
 8002590:	4603      	mov	r3, r0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
	    			Decimal_part = temp;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
	    			Decimal_part *= 100;
 8002598:	4922      	ldr	r1, [pc, #136]	; (8002624 <humidity_read_value+0x188>)
 800259a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259c:	f7fe fb9a 	bl	8000cd4 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
	    			Decimal_part = Decimal_part - (Entier_part * 100);
 80025a4:	491f      	ldr	r1, [pc, #124]	; (8002624 <humidity_read_value+0x188>)
 80025a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025a8:	f7fe fb94 	bl	8000cd4 <__aeabi_fmul>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f7fe fa85 	bl	8000ac0 <__aeabi_fsub>
 80025b6:	4603      	mov	r3, r0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
	    			value = buf[4] | buf[3] << 8;
 80025ba:	7e3b      	ldrb	r3, [r7, #24]
 80025bc:	b21a      	sxth	r2, r3
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	827b      	strh	r3, [r7, #18]

	    			umid = -49 + 315 *( (float)value / 65535);
 80025cc:	8a7b      	ldrh	r3, [r7, #18]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb27 	bl	8000c24 <__aeabi_ui2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	490f      	ldr	r1, [pc, #60]	; (8002618 <humidity_read_value+0x17c>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fc2e 	bl	8000e3c <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4911      	ldr	r1, [pc, #68]	; (8002628 <humidity_read_value+0x18c>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb75 	bl	8000cd4 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	490f      	ldr	r1, [pc, #60]	; (800262c <humidity_read_value+0x190>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fa66 	bl	8000ac0 <__aeabi_fsub>
 80025f4:	4603      	mov	r3, r0
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34

	    		}
	    		}
	    return umid;
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	373c      	adds	r7, #60	; 0x3c
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	080091f9 	.word	0x080091f9
 8002608:	080091fa 	.word	0x080091fa
 800260c:	080091fb 	.word	0x080091fb
 8002610:	080091dc 	.word	0x080091dc
 8002614:	080091ec 	.word	0x080091ec
 8002618:	477fff00 	.word	0x477fff00
 800261c:	432f0000 	.word	0x432f0000
 8002620:	42340000 	.word	0x42340000
 8002624:	42c80000 	.word	0x42c80000
 8002628:	439d8000 	.word	0x439d8000
 800262c:	42440000 	.word	0x42440000

08002630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_MspInit+0x64>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_MspInit+0x64>)
 800263c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002640:	6253      	str	r3, [r2, #36]	; 0x24
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_MspInit+0x64>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_MspInit+0x64>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_MspInit+0x64>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_MspInit+0x64>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_MspInit+0x64>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_MspInit+0x64>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6253      	str	r3, [r2, #36]	; 0x24
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_MspInit+0x64>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	210f      	movs	r1, #15
 8002682:	f06f 0001 	mvn.w	r0, #1
 8002686:	f000 fb06 	bl	8002c96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	; 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_InitTick+0xe0>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_InitTick+0xe0>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6253      	str	r3, [r2, #36]	; 0x24
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_InitTick+0xe0>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c6:	f107 0210 	add.w	r2, r7, #16
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 ffa9 	bl	8005628 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026e0:	f002 ff7a 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 80026e4:	6378      	str	r0, [r7, #52]	; 0x34
 80026e6:	e004      	b.n	80026f2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026e8:	f002 ff76 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 80026ec:	4603      	mov	r3, r0
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_InitTick+0xe4>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	3b01      	subs	r3, #1
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_InitTick+0xe8>)
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_InitTick+0xec>)
 8002704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_InitTick+0xe8>)
 8002708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800270c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <HAL_InitTick+0xe8>)
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_InitTick+0xe8>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_InitTick+0xe8>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim3);
 8002720:	4817      	ldr	r0, [pc, #92]	; (8002780 <HAL_InitTick+0xe8>)
 8002722:	f003 f811 	bl	8005748 <HAL_TIM_Base_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800272c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11b      	bne.n	800276c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002734:	4812      	ldr	r0, [pc, #72]	; (8002780 <HAL_InitTick+0xe8>)
 8002736:	f003 f84f 	bl	80057d8 <HAL_TIM_Base_Start_IT>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002744:	2b00      	cmp	r3, #0
 8002746:	d111      	bne.n	800276c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002748:	201d      	movs	r0, #29
 800274a:	f000 fac0 	bl	8002cce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d808      	bhi.n	8002766 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	201d      	movs	r0, #29
 800275a:	f000 fa9c 	bl	8002c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_InitTick+0xf0>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e002      	b.n	800276c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800276c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002770:	4618      	mov	r0, r3
 8002772:	3738      	adds	r7, #56	; 0x38
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	431bde83 	.word	0x431bde83
 8002780:	20000284 	.word	0x20000284
 8002784:	40000400 	.word	0x40000400
 8002788:	20000004 	.word	0x20000004

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <NMI_Handler+0x4>

08002792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <MemManage_Handler+0x4>

0800279e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <UsageFault_Handler+0x4>

080027aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
	...

080027b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM3_IRQHandler+0x10>)
 80027be:	f003 f85d 	bl	800587c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000284 	.word	0x20000284

080027cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <_kill>:

int _kill(int pid, int sig)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e4:	f003 fdba 	bl	800635c <__errno>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2216      	movs	r2, #22
 80027ec:	601a      	str	r2, [r3, #0]
  return -1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <_exit>:

void _exit (int status)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002802:	f04f 31ff 	mov.w	r1, #4294967295
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffe7 	bl	80027da <_kill>
  while (1) {}    /* Make sure we hang here */
 800280c:	e7fe      	b.n	800280c <_exit+0x12>

0800280e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e00a      	b.n	8002836 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002820:	f3af 8000 	nop.w
 8002824:	4601      	mov	r1, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf0      	blt.n	8002820 <_read+0x12>
  }

  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e009      	b.n	800286e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	60ba      	str	r2, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	dbf1      	blt.n	800285a <_write+0x12>
  }
  return len;
 8002876:	687b      	ldr	r3, [r7, #4]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <_close>:

int _close(int file)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a6:	605a      	str	r2, [r3, #4]
  return 0;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <_isatty>:

int _isatty(int file)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f003 fd24 	bl	800635c <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20014000 	.word	0x20014000
 8002940:	00000400 	.word	0x00000400
 8002944:	200002c4 	.word	0x200002c4
 8002948:	200007a8 	.word	0x200007a8

0800294c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <MX_USART2_UART_Init+0x50>)
 8002960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <MX_USART2_UART_Init+0x4c>)
 8002990:	f003 f8e4 	bl	8005b5c <HAL_UART_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800299a:	f7ff fd79 	bl	8002490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200002c8 	.word	0x200002c8
 80029a8:	40004400 	.word	0x40004400

080029ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_UART_MspInit+0x7c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d127      	bne.n	8002a1e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	6253      	str	r3, [r2, #36]	; 0x24
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <HAL_UART_MspInit+0x80>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029fe:	230c      	movs	r3, #12
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_UART_MspInit+0x84>)
 8002a1a:	f000 f967 	bl	8002cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020000 	.word	0x40020000

08002a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	; (8002a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a5a:	f7ff ff77 	bl	800294c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f003 fd79 	bl	8006554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a62:	f7ff fbe5 	bl	8002230 <main>
  bx lr
 8002a66:	4770      	bx	lr
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a70:	0800960c 	.word	0x0800960c
  ldr r2, =_sbss
 8002a74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a78:	200007a8 	.word	0x200007a8

08002a7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_IRQHandler>

08002a7e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 f8f9 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8e:	200f      	movs	r0, #15
 8002a90:	f7ff fe02 	bl	8002698 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
 8002a9e:	e001      	b.n	8002aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aa0:	f7ff fdc6 	bl	8002630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_IncTick+0x1c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_IncTick+0x20>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a03      	ldr	r2, [pc, #12]	; (8002acc <HAL_IncTick+0x1c>)
 8002ac0:	6013      	str	r3, [r2, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	2000030c 	.word	0x2000030c
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_GetTick+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	2000030c 	.word	0x2000030c

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff fff0 	bl	8002ad4 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d004      	beq.n	8002b0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_Delay+0x40>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0c:	bf00      	nop
 8002b0e:	f7ff ffe1 	bl	8002ad4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d8f7      	bhi.n	8002b0e <HAL_Delay+0x26>
  {
  }
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000008 	.word	0x20000008

08002b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x44>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_GetPriorityGrouping+0x18>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 0307 	and.w	r3, r3, #7
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db0b      	blt.n	8002bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <__NVIC_EnableIRQ+0x34>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	bf28      	it	cs
 8002c3a:	2304      	movcs	r3, #4
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b03      	subs	r3, #3
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43d9      	mvns	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	4313      	orrs	r3, r2
         );
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff4f 	bl	8002b2c <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff64 	bl	8002b74 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ffb2 	bl	8002c1c <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff81 	bl	8002bc8 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff57 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d02:	e160      	b.n	8002fc6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8152 	beq.w	8002fc0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d005      	beq.n	8002d34 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d130      	bne.n	8002d96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0201 	and.w	r2, r3, #1
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d017      	beq.n	8002dd2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d123      	bne.n	8002e26 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	6939      	ldr	r1, [r7, #16]
 8002e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0203 	and.w	r2, r3, #3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80ac 	beq.w	8002fc0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a5d      	ldr	r2, [pc, #372]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e80:	4a59      	ldr	r2, [pc, #356]	; (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	3302      	adds	r3, #2
 8002e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	220f      	movs	r2, #15
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a51      	ldr	r2, [pc, #324]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d025      	beq.n	8002ef8 <HAL_GPIO_Init+0x20c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01f      	beq.n	8002ef4 <HAL_GPIO_Init+0x208>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a4f      	ldr	r2, [pc, #316]	; (8002ff4 <HAL_GPIO_Init+0x308>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d019      	beq.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a4e      	ldr	r2, [pc, #312]	; (8002ff8 <HAL_GPIO_Init+0x30c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_GPIO_Init+0x200>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_GPIO_Init+0x310>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00d      	beq.n	8002ee8 <HAL_GPIO_Init+0x1fc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_GPIO_Init+0x314>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x1f8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a4b      	ldr	r2, [pc, #300]	; (8003004 <HAL_GPIO_Init+0x318>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_GPIO_Init+0x1f4>
 8002edc:	2306      	movs	r3, #6
 8002ede:	e00c      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	e00a      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	e008      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ee8:	2304      	movs	r3, #4
 8002eea:	e006      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002eec:	2303      	movs	r3, #3
 8002eee:	e004      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e002      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	f002 0203 	and.w	r2, r2, #3
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	4093      	lsls	r3, r2
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f0a:	4937      	ldr	r1, [pc, #220]	; (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f66:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_GPIO_Init+0x31c>)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f ae97 	bne.w	8002d04 <HAL_GPIO_Init+0x18>
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40020400 	.word	0x40020400
 8002ff4:	40020800 	.word	0x40020800
 8002ff8:	40020c00 	.word	0x40020c00
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40021400 	.word	0x40021400
 8003004:	40021800 	.word	0x40021800
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e12b      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe ff1c 	bl	8001ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a0:	f002 fa9a 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a81      	ldr	r2, [pc, #516]	; (80032b0 <HAL_I2C_Init+0x274>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d807      	bhi.n	80030c0 <HAL_I2C_Init+0x84>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a80      	ldr	r2, [pc, #512]	; (80032b4 <HAL_I2C_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e006      	b.n	80030ce <HAL_I2C_Init+0x92>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	; (80032b8 <HAL_I2C_Init+0x27c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e7      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a78      	ldr	r2, [pc, #480]	; (80032bc <HAL_I2C_Init+0x280>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9b      	lsrs	r3, r3, #18
 80030e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a6a      	ldr	r2, [pc, #424]	; (80032b0 <HAL_I2C_Init+0x274>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d802      	bhi.n	8003110 <HAL_I2C_Init+0xd4>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	e009      	b.n	8003124 <HAL_I2C_Init+0xe8>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a69      	ldr	r2, [pc, #420]	; (80032c0 <HAL_I2C_Init+0x284>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	495c      	ldr	r1, [pc, #368]	; (80032b0 <HAL_I2C_Init+0x274>)
 8003140:	428b      	cmp	r3, r1
 8003142:	d819      	bhi.n	8003178 <HAL_I2C_Init+0x13c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e59      	subs	r1, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003158:	400b      	ands	r3, r1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_I2C_Init+0x138>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e59      	subs	r1, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fbb1 f3f3 	udiv	r3, r1, r3
 800316c:	3301      	adds	r3, #1
 800316e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003172:	e051      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003174:	2304      	movs	r3, #4
 8003176:	e04f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <HAL_I2C_Init+0x168>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e012      	b.n	80031ca <HAL_I2C_Init+0x18e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x196>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <HAL_I2C_Init+0x1bc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e58      	subs	r0, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	e00f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	6809      	ldr	r1, [r1, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6911      	ldr	r1, [r2, #16]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	000186a0 	.word	0x000186a0
 80032b4:	001e847f 	.word	0x001e847f
 80032b8:	003d08ff 	.word	0x003d08ff
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	10624dd3 	.word	0x10624dd3

080032c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	461a      	mov	r2, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
 80032d4:	4613      	mov	r3, r2
 80032d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff fbfc 	bl	8002ad4 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	f040 80e0 	bne.w	80034ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2319      	movs	r3, #25
 80032f2:	2201      	movs	r2, #1
 80032f4:	4970      	ldr	r1, [pc, #448]	; (80034b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f001 fa24 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	e0d3      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x50>
 8003310:	2302      	movs	r3, #2
 8003312:	e0cc      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d007      	beq.n	800333a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2221      	movs	r2, #33	; 0x21
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2210      	movs	r2, #16
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	893a      	ldrh	r2, [r7, #8]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_I2C_Master_Transmit+0x1f8>)
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6a3a      	ldr	r2, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 ff10 	bl	80041a8 <I2C_MasterRequestWrite>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e08d      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033a8:	e066      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f001 fa9e 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06b      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11b      	bne.n	800344c <HAL_I2C_Master_Transmit+0x188>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6a39      	ldr	r1, [r7, #32]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f001 fa8e 	bl	8004972 <I2C_WaitOnBTFFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e01a      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d194      	bne.n	80033aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	461a      	mov	r2, r3
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
 80034d0:	4613      	mov	r3, r2
 80034d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff fafe 	bl	8002ad4 <HAL_GetTick>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	f040 820b 	bne.w	80038fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2319      	movs	r3, #25
 80034ee:	2201      	movs	r2, #1
 80034f0:	497c      	ldr	r1, [pc, #496]	; (80036e4 <HAL_I2C_Master_Receive+0x224>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f001 f926 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	e1fe      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_I2C_Master_Receive+0x50>
 800350c:	2302      	movs	r3, #2
 800350e:	e1f7      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d007      	beq.n	8003536 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2222      	movs	r2, #34	; 0x22
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2210      	movs	r2, #16
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	893a      	ldrh	r2, [r7, #8]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_I2C_Master_Receive+0x228>)
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003578:	8979      	ldrh	r1, [r7, #10]
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fe94 	bl	80042ac <I2C_MasterRequestRead>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e1b8      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d113      	bne.n	80035be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e18c      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d11b      	bne.n	80035fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e16c      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b02      	cmp	r3, #2
 8003604:	d11b      	bne.n	800363e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	e14c      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003664:	e138      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b03      	cmp	r3, #3
 800366c:	f200 80f1 	bhi.w	8003852 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b01      	cmp	r3, #1
 8003676:	d123      	bne.n	80036c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f001 f9b9 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e139      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036be:	e10b      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d14e      	bne.n	8003766 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	4906      	ldr	r1, [pc, #24]	; (80036ec <HAL_I2C_Master_Receive+0x22c>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f001 f836 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e10e      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
 80036e2:	bf00      	nop
 80036e4:	00100002 	.word	0x00100002
 80036e8:	ffff0000 	.word	0xffff0000
 80036ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003764:	e0b8      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2200      	movs	r2, #0
 800376e:	4966      	ldr	r1, [pc, #408]	; (8003908 <HAL_I2C_Master_Receive+0x448>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 ffe7 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0bf      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	494f      	ldr	r1, [pc, #316]	; (8003908 <HAL_I2C_Master_Receive+0x448>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 ffb9 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e091      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003850:	e042      	b.n	80038d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 f8cc 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e04c      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d118      	bne.n	80038d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f aec2 	bne.w	8003666 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00010004 	.word	0x00010004

0800390c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	817b      	strh	r3, [r7, #10]
 800391e:	460b      	mov	r3, r1
 8003920:	813b      	strh	r3, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003926:	f7ff f8d5 	bl	8002ad4 <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	f040 80d9 	bne.w	8003aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2319      	movs	r3, #25
 8003940:	2201      	movs	r2, #1
 8003942:	496d      	ldr	r1, [pc, #436]	; (8003af8 <HAL_I2C_Mem_Write+0x1ec>)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fefd 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
 8003952:	e0cc      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_I2C_Mem_Write+0x56>
 800395e:	2302      	movs	r3, #2
 8003960:	e0c5      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d007      	beq.n	8003988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	; 0x21
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a4d      	ldr	r2, [pc, #308]	; (8003afc <HAL_I2C_Mem_Write+0x1f0>)
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ca:	88f8      	ldrh	r0, [r7, #6]
 80039cc:	893a      	ldrh	r2, [r7, #8]
 80039ce:	8979      	ldrh	r1, [r7, #10]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	4603      	mov	r3, r0
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fd34 	bl	8004448 <I2C_RequestMemoryWrite>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d052      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e081      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 ff7e 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e06b      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d11b      	bne.n	8003a8c <HAL_I2C_Mem_Write+0x180>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1aa      	bne.n	80039ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 ff6a 	bl	8004972 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00d      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e016      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	00100002 	.word	0x00100002
 8003afc:	ffff0000 	.word	0xffff0000

08003b00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	817b      	strh	r3, [r7, #10]
 8003b12:	460b      	mov	r3, r1
 8003b14:	813b      	strh	r3, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b1a:	f7fe ffdb 	bl	8002ad4 <HAL_GetTick>
 8003b1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	f040 8208 	bne.w	8003f3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2319      	movs	r3, #25
 8003b34:	2201      	movs	r2, #1
 8003b36:	497b      	ldr	r1, [pc, #492]	; (8003d24 <HAL_I2C_Mem_Read+0x224>)
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fe03 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
 8003b46:	e1fb      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x56>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e1f4      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d007      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2222      	movs	r2, #34	; 0x22
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a5b      	ldr	r2, [pc, #364]	; (8003d28 <HAL_I2C_Mem_Read+0x228>)
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bbe:	88f8      	ldrh	r0, [r7, #6]
 8003bc0:	893a      	ldrh	r2, [r7, #8]
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4603      	mov	r3, r0
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fcd0 	bl	8004574 <I2C_RequestMemoryRead>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e1b0      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d113      	bne.n	8003c0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	623b      	str	r3, [r7, #32]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e184      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d11b      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e164      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d11b      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	e144      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ca4:	e138      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	f200 80f1 	bhi.w	8003e92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d123      	bne.n	8003d00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fe99 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e139      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfe:	e10b      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d14e      	bne.n	8003da6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4906      	ldr	r1, [pc, #24]	; (8003d2c <HAL_I2C_Mem_Read+0x22c>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fd16 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e10e      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
 8003d22:	bf00      	nop
 8003d24:	00100002 	.word	0x00100002
 8003d28:	ffff0000 	.word	0xffff0000
 8003d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da4:	e0b8      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2200      	movs	r2, #0
 8003dae:	4966      	ldr	r1, [pc, #408]	; (8003f48 <HAL_I2C_Mem_Read+0x448>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fcc7 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0bf      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2200      	movs	r2, #0
 8003e0a:	494f      	ldr	r1, [pc, #316]	; (8003f48 <HAL_I2C_Mem_Read+0x448>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fc99 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e091      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e90:	e042      	b.n	8003f18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fdac 	bl	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e04c      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d118      	bne.n	8003f18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f aec2 	bne.w	8003ca6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	; 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00010004 	.word	0x00010004

08003f4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7fe fdba 	bl	8002ad4 <HAL_GetTick>
 8003f60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 8111 	bne.w	8004196 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4988      	ldr	r1, [pc, #544]	; (80041a0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fbe0 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e104      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_I2C_IsDeviceReady+0x50>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0fd      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d007      	beq.n	8003fc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2224      	movs	r2, #36	; 0x24
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a70      	ldr	r2, [pc, #448]	; (80041a4 <HAL_I2C_IsDeviceReady+0x258>)
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fb9e 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401c:	d103      	bne.n	8004026 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0b6      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004038:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800403a:	f7fe fd4b 	bl	8002ad4 <HAL_GetTick>
 800403e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800406e:	e025      	b.n	80040bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004070:	f7fe fd30 	bl	8002ad4 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <HAL_I2C_IsDeviceReady+0x13a>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	22a0      	movs	r2, #160	; 0xa0
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2ba0      	cmp	r3, #160	; 0xa0
 80040c6:	d005      	beq.n	80040d4 <HAL_I2C_IsDeviceReady+0x188>
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_I2C_IsDeviceReady+0x188>
 80040ce:	7dbb      	ldrb	r3, [r7, #22]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0cd      	beq.n	8004070 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d129      	bne.n	800413e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2319      	movs	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	4921      	ldr	r1, [pc, #132]	; (80041a0 <HAL_I2C_IsDeviceReady+0x254>)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fb12 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e036      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e02c      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004156:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2319      	movs	r3, #25
 800415e:	2201      	movs	r2, #1
 8004160:	490f      	ldr	r1, [pc, #60]	; (80041a0 <HAL_I2C_IsDeviceReady+0x254>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 faee 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e012      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	3301      	adds	r3, #1
 8004176:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	f4ff af32 	bcc.w	8003fe6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3720      	adds	r7, #32
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	00100002 	.word	0x00100002
 80041a4:	ffff0000 	.word	0xffff0000

080041a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	460b      	mov	r3, r1
 80041b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d006      	beq.n	80041d2 <I2C_MasterRequestWrite+0x2a>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d003      	beq.n	80041d2 <I2C_MasterRequestWrite+0x2a>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d0:	d108      	bne.n	80041e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e00b      	b.n	80041fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	2b12      	cmp	r3, #18
 80041ea:	d107      	bne.n	80041fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fa9b 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d103      	bne.n	800422c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e035      	b.n	800429c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d108      	bne.n	800424c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004248:	611a      	str	r2, [r3, #16]
 800424a:	e01b      	b.n	8004284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	11db      	asrs	r3, r3, #7
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 0306 	and.w	r3, r3, #6
 8004256:	b2db      	uxtb	r3, r3
 8004258:	f063 030f 	orn	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <I2C_MasterRequestWrite+0xfc>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fac1 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e010      	b.n	800429c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4907      	ldr	r1, [pc, #28]	; (80042a8 <I2C_MasterRequestWrite+0x100>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fab1 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	00010008 	.word	0x00010008
 80042a8:	00010002 	.word	0x00010002

080042ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d006      	beq.n	80042e6 <I2C_MasterRequestRead+0x3a>
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d003      	beq.n	80042e6 <I2C_MasterRequestRead+0x3a>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e4:	d108      	bne.n	80042f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e00b      	b.n	8004310 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	2b11      	cmp	r3, #17
 80042fe:	d107      	bne.n	8004310 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fa11 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	d103      	bne.n	8004340 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e079      	b.n	8004438 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434c:	d108      	bne.n	8004360 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]
 800435e:	e05f      	b.n	8004420 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	11db      	asrs	r3, r3, #7
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f063 030f 	orn	r3, r3, #15
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4930      	ldr	r1, [pc, #192]	; (8004440 <I2C_MasterRequestRead+0x194>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fa37 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e054      	b.n	8004438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4929      	ldr	r1, [pc, #164]	; (8004444 <I2C_MasterRequestRead+0x198>)
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fa27 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e044      	b.n	8004438 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f9af 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d103      	bne.n	8004404 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e017      	b.n	8004438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	11db      	asrs	r3, r3, #7
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0306 	and.w	r3, r3, #6
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f063 030e 	orn	r3, r3, #14
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <I2C_MasterRequestRead+0x198>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f9e3 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	00010008 	.word	0x00010008
 8004444:	00010002 	.word	0x00010002

08004448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	461a      	mov	r2, r3
 8004456:	4603      	mov	r3, r0
 8004458:	817b      	strh	r3, [r7, #10]
 800445a:	460b      	mov	r3, r1
 800445c:	813b      	strh	r3, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2200      	movs	r2, #0
 800447a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f960 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d103      	bne.n	80044a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e05f      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	492d      	ldr	r1, [pc, #180]	; (8004570 <I2C_RequestMemoryWrite+0x128>)
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f998 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04c      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	6a39      	ldr	r1, [r7, #32]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa02 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d107      	bne.n	800450a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e02b      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d105      	bne.n	8004520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]
 800451e:	e021      	b.n	8004564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004520:	893b      	ldrh	r3, [r7, #8]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	b29b      	uxth	r3, r3
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	6a39      	ldr	r1, [r7, #32]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9dc 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b04      	cmp	r3, #4
 8004544:	d107      	bne.n	8004556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e005      	b.n	8004566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800455a:	893b      	ldrh	r3, [r7, #8]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	00010002 	.word	0x00010002

08004574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f8c2 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d103      	bne.n	80045de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0aa      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	4952      	ldr	r1, [pc, #328]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8fa 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e097      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	6a39      	ldr	r1, [r7, #32]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f964 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b04      	cmp	r3, #4
 8004634:	d107      	bne.n	8004646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e076      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e021      	b.n	80046a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f93e 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e050      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004696:	893b      	ldrh	r3, [r7, #8]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	6a39      	ldr	r1, [r7, #32]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f923 	bl	80048f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e035      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f82b 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d103      	bne.n	800470c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e013      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004710:	897b      	ldrh	r3, [r7, #10]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	4906      	ldr	r1, [pc, #24]	; (8004740 <I2C_RequestMemoryRead+0x1cc>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f863 	bl	80047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	00010002 	.word	0x00010002

08004744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004754:	e025      	b.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d021      	beq.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7fe f9b9 	bl	8002ad4 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d116      	bne.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e023      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d10d      	bne.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	e00c      	b.n	80047e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d0b6      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004800:	e051      	b.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004810:	d123      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800482a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0204 	orr.w	r2, r3, #4
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e046      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d021      	beq.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7fe f937 	bl	8002ad4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d302      	bcc.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d116      	bne.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e020      	b.n	80048e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10c      	bne.n	80048ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e00b      	b.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d18d      	bne.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fc:	e02d      	b.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f8ce 	bl	8004aa0 <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e02d      	b.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d021      	beq.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe f8dd 	bl	8002ad4 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d1ca      	bne.n	80048fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497e:	e02d      	b.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f88d 	bl	8004aa0 <I2C_IsAcknowledgeFailed>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e02d      	b.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d021      	beq.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fe f89c 	bl	8002ad4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d116      	bne.n	80049dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e007      	b.n	80049ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d1ca      	bne.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a00:	e042      	b.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d119      	bne.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e029      	b.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe f846 	bl	8002ad4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d1b5      	bne.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d11b      	bne.n	8004af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e31d      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b94      	ldr	r3, [pc, #592]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b18:	4b91      	ldr	r3, [pc, #580]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b20:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d07b      	beq.n	8004c26 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d006      	beq.n	8004b42 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d10f      	bne.n	8004b5a <HAL_RCC_OscConfig+0x5e>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b40:	d10b      	bne.n	8004b5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b42:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d06a      	beq.n	8004c24 <HAL_RCC_OscConfig+0x128>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d166      	bne.n	8004c24 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2f7      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d106      	bne.n	8004b70 <HAL_RCC_OscConfig+0x74>
 8004b62:	4b7f      	ldr	r3, [pc, #508]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7e      	ldr	r2, [pc, #504]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e02d      	b.n	8004bcc <HAL_RCC_OscConfig+0xd0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10c      	bne.n	8004b92 <HAL_RCC_OscConfig+0x96>
 8004b78:	4b79      	ldr	r3, [pc, #484]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a78      	ldr	r2, [pc, #480]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a75      	ldr	r2, [pc, #468]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e01c      	b.n	8004bcc <HAL_RCC_OscConfig+0xd0>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0xb8>
 8004b9a:	4b71      	ldr	r3, [pc, #452]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a70      	ldr	r2, [pc, #448]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b6e      	ldr	r3, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6d      	ldr	r2, [pc, #436]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0xd0>
 8004bb4:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a69      	ldr	r2, [pc, #420]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b67      	ldr	r3, [pc, #412]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a66      	ldr	r2, [pc, #408]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fd ff7e 	bl	8002ad4 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fd ff7a 	bl	8002ad4 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e2ad      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bee:	4b5c      	ldr	r3, [pc, #368]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0xe0>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd ff6a 	bl	8002ad4 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fd ff66 	bl	8002ad4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e299      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c16:	4b52      	ldr	r3, [pc, #328]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x108>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05a      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_OscConfig+0x176>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d116      	bne.n	8004c72 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c44:	4b46      	ldr	r3, [pc, #280]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x160>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e276      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5c:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	493d      	ldr	r1, [pc, #244]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c70:	e03a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCC_OscConfig+0x268>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fd ff28 	bl	8002ad4 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fd ff24 	bl	8002ad4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e257      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	492a      	ldr	r1, [pc, #168]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
 8004cba:	e015      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCC_OscConfig+0x268>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd ff07 	bl	8002ad4 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cca:	f7fd ff03 	bl	8002ad4 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e236      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f0      	bne.n	8004cca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80b8 	beq.w	8004e66 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d170      	bne.n	8004dde <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_OscConfig+0x218>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e21a      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d921      	bls.n	8004d68 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fcad 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e208      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	4906      	ldr	r1, [pc, #24]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	4901      	ldr	r1, [pc, #4]	; (8004d60 <HAL_RCC_OscConfig+0x264>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
 8004d5e:	e020      	b.n	8004da2 <HAL_RCC_OscConfig+0x2a6>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d68:	4b99      	ldr	r3, [pc, #612]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	4996      	ldr	r1, [pc, #600]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d7a:	4b95      	ldr	r3, [pc, #596]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	4991      	ldr	r1, [pc, #580]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fc78 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e1d3      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	0b5b      	lsrs	r3, r3, #13
 8004da8:	3301      	adds	r3, #1
 8004daa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004db2:	4a87      	ldr	r2, [pc, #540]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	0912      	lsrs	r2, r2, #4
 8004db8:	f002 020f 	and.w	r2, r2, #15
 8004dbc:	4985      	ldr	r1, [pc, #532]	; (8004fd4 <HAL_RCC_OscConfig+0x4d8>)
 8004dbe:	5c8a      	ldrb	r2, [r1, r2]
 8004dc0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004dc2:	4a85      	ldr	r2, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x4dc>)
 8004dc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dc6:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <HAL_RCC_OscConfig+0x4e0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fc64 	bl	8002698 <HAL_InitTick>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d045      	beq.n	8004e66 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	e1b5      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d029      	beq.n	8004e3a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004de6:	4b7e      	ldr	r3, [pc, #504]	; (8004fe0 <HAL_RCC_OscConfig+0x4e4>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fd fe72 	bl	8002ad4 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004df4:	f7fd fe6e 	bl	8002ad4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1a1      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e06:	4b72      	ldr	r3, [pc, #456]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e12:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	496c      	ldr	r1, [pc, #432]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e24:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	061b      	lsls	r3, r3, #24
 8004e32:	4967      	ldr	r1, [pc, #412]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
 8004e38:	e015      	b.n	8004e66 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e3a:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_RCC_OscConfig+0x4e4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fe48 	bl	8002ad4 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e48:	f7fd fe44 	bl	8002ad4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e177      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004e5a:	4b5d      	ldr	r3, [pc, #372]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d030      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fd fe28 	bl	8002ad4 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fd fe24 	bl	8002ad4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e157      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x38c>
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fd fe11 	bl	8002ad4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fe0d 	bl	8002ad4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e140      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ec8:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80b5 	beq.w	800504c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10d      	bne.n	8004f0e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	4b37      	ldr	r3, [pc, #220]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	4a36      	ldr	r2, [pc, #216]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efc:	6253      	str	r3, [r2, #36]	; 0x24
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCC_OscConfig+0x4ec>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <HAL_RCC_OscConfig+0x4ec>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <HAL_RCC_OscConfig+0x4ec>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fd fdd5 	bl	8002ad4 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fd fdd1 	bl	8002ad4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b64      	cmp	r3, #100	; 0x64
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e104      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <HAL_RCC_OscConfig+0x4ec>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <HAL_RCC_OscConfig+0x466>
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5e:	6353      	str	r3, [r2, #52]	; 0x34
 8004f60:	e02d      	b.n	8004fbe <HAL_RCC_OscConfig+0x4c2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x488>
 8004f6a:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f74:	6353      	str	r3, [r2, #52]	; 0x34
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f80:	6353      	str	r3, [r2, #52]	; 0x34
 8004f82:	e01c      	b.n	8004fbe <HAL_RCC_OscConfig+0x4c2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b05      	cmp	r3, #5
 8004f8a:	d10c      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x4aa>
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f96:	6353      	str	r3, [r2, #52]	; 0x34
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	6353      	str	r3, [r2, #52]	; 0x34
 8004fa4:	e00b      	b.n	8004fbe <HAL_RCC_OscConfig+0x4c2>
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x4d4>)
 8004fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fbc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d024      	beq.n	8005010 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc6:	f7fd fd85 	bl	8002ad4 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fcc:	e019      	b.n	8005002 <HAL_RCC_OscConfig+0x506>
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	08009208 	.word	0x08009208
 8004fd8:	20000000 	.word	0x20000000
 8004fdc:	20000004 	.word	0x20000004
 8004fe0:	42470020 	.word	0x42470020
 8004fe4:	42470680 	.word	0x42470680
 8004fe8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd fd72 	bl	8002ad4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0a3      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005002:	4b54      	ldr	r3, [pc, #336]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ee      	beq.n	8004fec <HAL_RCC_OscConfig+0x4f0>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005010:	f7fd fd60 	bl	8002ad4 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fd fd5c 	bl	8002ad4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e08d      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800502e:	4b49      	ldr	r3, [pc, #292]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ee      	bne.n	8005018 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800503a:	7ffb      	ldrb	r3, [r7, #31]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b44      	ldr	r3, [pc, #272]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	4a43      	ldr	r2, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d079      	beq.n	8005148 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d056      	beq.n	8005108 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b02      	cmp	r3, #2
 8005060:	d13b      	bne.n	80050da <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b3d      	ldr	r3, [pc, #244]	; (8005158 <HAL_RCC_OscConfig+0x65c>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd fd34 	bl	8002ad4 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd fd30 	bl	8002ad4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e063      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005082:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4319      	orrs	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	430b      	orrs	r3, r1
 80050a6:	492b      	ldr	r1, [pc, #172]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <HAL_RCC_OscConfig+0x65c>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fd fd0f 	bl	8002ad4 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fd fd0b 	bl	8002ad4 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e03e      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050cc:	4b21      	ldr	r3, [pc, #132]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x5be>
 80050d8:	e036      	b.n	8005148 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <HAL_RCC_OscConfig+0x65c>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fd fcf8 	bl	8002ad4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fd fcf4 	bl	8002ad4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e027      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fa:	4b16      	ldr	r3, [pc, #88]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5ec>
 8005106:	e01f      	b.n	8005148 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e01a      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <HAL_RCC_OscConfig+0x658>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	429a      	cmp	r2, r3
 8005126:	d10d      	bne.n	8005144 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	42470060 	.word	0x42470060

0800515c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e11a      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b8f      	ldr	r3, [pc, #572]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d919      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_ClockConfig+0x34>
 8005184:	4b8a      	ldr	r3, [pc, #552]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a89      	ldr	r2, [pc, #548]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	4b87      	ldr	r3, [pc, #540]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 0201 	bic.w	r2, r3, #1
 8005198:	4985      	ldr	r1, [pc, #532]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a0:	4b83      	ldr	r3, [pc, #524]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0f9      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051be:	4b7d      	ldr	r3, [pc, #500]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	497a      	ldr	r1, [pc, #488]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 808e 	beq.w	80052fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e6:	4b73      	ldr	r3, [pc, #460]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d121      	bne.n	8005236 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0d7      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051fe:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d115      	bne.n	8005236 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0cb      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d107      	bne.n	8005226 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0bf      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0b7      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005236:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f023 0203 	bic.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	495c      	ldr	r1, [pc, #368]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005244:	4313      	orrs	r3, r2
 8005246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005248:	f7fd fc44 	bl	8002ad4 <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d112      	bne.n	800527c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005256:	e00a      	b.n	800526e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005258:	f7fd fc3c 	bl	8002ad4 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e09b      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800526e:	4b51      	ldr	r3, [pc, #324]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b08      	cmp	r3, #8
 8005278:	d1ee      	bne.n	8005258 <HAL_RCC_ClockConfig+0xfc>
 800527a:	e03e      	b.n	80052fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d112      	bne.n	80052aa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005284:	e00a      	b.n	800529c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005286:	f7fd fc25 	bl	8002ad4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e084      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529c:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d1ee      	bne.n	8005286 <HAL_RCC_ClockConfig+0x12a>
 80052a8:	e027      	b.n	80052fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d11d      	bne.n	80052ee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fd fc0e 	bl	8002ad4 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e06d      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ca:	4b3a      	ldr	r3, [pc, #232]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x158>
 80052d6:	e010      	b.n	80052fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fd fbfc 	bl	8002ad4 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e05b      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052ee:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1ee      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052fa:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d219      	bcs.n	800533c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <HAL_RCC_ClockConfig+0x1be>
 800530e:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	4923      	ldr	r1, [pc, #140]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <HAL_RCC_ClockConfig+0x254>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e034      	b.n	80053a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4917      	ldr	r1, [pc, #92]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490f      	ldr	r1, [pc, #60]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800537a:	f000 f823 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800537e:	4602      	mov	r2, r0
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCC_ClockConfig+0x258>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	490b      	ldr	r1, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 800538c:	5ccb      	ldrb	r3, [r1, r3]
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x264>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd f97c 	bl	8002698 <HAL_InitTick>
 80053a0:	4603      	mov	r3, r0
 80053a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023c00 	.word	0x40023c00
 80053b4:	40023800 	.word	0x40023800
 80053b8:	08009208 	.word	0x08009208
 80053bc:	20000000 	.word	0x20000000
 80053c0:	20000004 	.word	0x20000004

080053c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c8:	b092      	sub	sp, #72	; 0x48
 80053ca:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80053cc:	4b79      	ldr	r3, [pc, #484]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d00d      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0x34>
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	f200 80d5 	bhi.w	800558c <HAL_RCC_GetSysClockFreq+0x1c8>
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d002      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x28>
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d003      	beq.n	80053f2 <HAL_RCC_GetSysClockFreq+0x2e>
 80053ea:	e0cf      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053ec:	4b72      	ldr	r3, [pc, #456]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80053ee:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80053f0:	e0da      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053f2:	4b72      	ldr	r3, [pc, #456]	; (80055bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80053f6:	e0d7      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	0c9b      	lsrs	r3, r3, #18
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	4b6f      	ldr	r3, [pc, #444]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005402:	5c9b      	ldrb	r3, [r3, r2]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005408:	0d9b      	lsrs	r3, r3, #22
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	3301      	adds	r3, #1
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005412:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d05d      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2200      	movs	r2, #0
 8005422:	4618      	mov	r0, r3
 8005424:	4611      	mov	r1, r2
 8005426:	4604      	mov	r4, r0
 8005428:	460d      	mov	r5, r1
 800542a:	4622      	mov	r2, r4
 800542c:	462b      	mov	r3, r5
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	0159      	lsls	r1, r3, #5
 8005438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800543c:	0150      	lsls	r0, r2, #5
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4621      	mov	r1, r4
 8005444:	1a51      	subs	r1, r2, r1
 8005446:	6139      	str	r1, [r7, #16]
 8005448:	4629      	mov	r1, r5
 800544a:	eb63 0301 	sbc.w	r3, r3, r1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800545c:	4659      	mov	r1, fp
 800545e:	018b      	lsls	r3, r1, #6
 8005460:	4651      	mov	r1, sl
 8005462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005466:	4651      	mov	r1, sl
 8005468:	018a      	lsls	r2, r1, #6
 800546a:	46d4      	mov	ip, sl
 800546c:	ebb2 080c 	subs.w	r8, r2, ip
 8005470:	4659      	mov	r1, fp
 8005472:	eb63 0901 	sbc.w	r9, r3, r1
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800548a:	4690      	mov	r8, r2
 800548c:	4699      	mov	r9, r3
 800548e:	4623      	mov	r3, r4
 8005490:	eb18 0303 	adds.w	r3, r8, r3
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	462b      	mov	r3, r5
 8005498:	eb49 0303 	adc.w	r3, r9, r3
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054aa:	4629      	mov	r1, r5
 80054ac:	024b      	lsls	r3, r1, #9
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	4604      	mov	r4, r0
 80054b4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80054b8:	4601      	mov	r1, r0
 80054ba:	024a      	lsls	r2, r1, #9
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	2200      	movs	r2, #0
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054cc:	f7fb fdc8 	bl	8001060 <__aeabi_uldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4613      	mov	r3, r2
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
 80054d8:	e055      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2200      	movs	r2, #0
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	627a      	str	r2, [r7, #36]	; 0x24
 80054e2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054e6:	4642      	mov	r2, r8
 80054e8:	464b      	mov	r3, r9
 80054ea:	f04f 0000 	mov.w	r0, #0
 80054ee:	f04f 0100 	mov.w	r1, #0
 80054f2:	0159      	lsls	r1, r3, #5
 80054f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f8:	0150      	lsls	r0, r2, #5
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	46c4      	mov	ip, r8
 8005500:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	468c      	mov	ip, r1
 800550a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800551a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800551e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005522:	ebb2 040a 	subs.w	r4, r2, sl
 8005526:	eb63 050b 	sbc.w	r5, r3, fp
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	00eb      	lsls	r3, r5, #3
 8005534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005538:	00e2      	lsls	r2, r4, #3
 800553a:	4614      	mov	r4, r2
 800553c:	461d      	mov	r5, r3
 800553e:	4603      	mov	r3, r0
 8005540:	18e3      	adds	r3, r4, r3
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	460b      	mov	r3, r1
 8005546:	eb45 0303 	adc.w	r3, r5, r3
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005558:	4629      	mov	r1, r5
 800555a:	028b      	lsls	r3, r1, #10
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	4604      	mov	r4, r0
 8005562:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005566:	4601      	mov	r1, r0
 8005568:	028a      	lsls	r2, r1, #10
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	2200      	movs	r2, #0
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800557a:	f7fb fd71 	bl	8001060 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4613      	mov	r3, r2
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8005586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800558a:	e00d      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	0b5b      	lsrs	r3, r3, #13
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	3301      	adds	r3, #1
 800559c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80055a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3748      	adds	r7, #72	; 0x48
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	00f42400 	.word	0x00f42400
 80055bc:	007a1200 	.word	0x007a1200
 80055c0:	080091fc 	.word	0x080091fc

080055c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b02      	ldr	r3, [pc, #8]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	20000000 	.word	0x20000000

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055dc:	f7ff fff2 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e0:	4602      	mov	r2, r0
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	4903      	ldr	r1, [pc, #12]	; (80055fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ee:	5ccb      	ldrb	r3, [r1, r3]
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40023800 	.word	0x40023800
 80055fc:	08009218 	.word	0x08009218

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005604:	f7ff ffde 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0adb      	lsrs	r3, r3, #11
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	08009218 	.word	0x08009218

08005628 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	220f      	movs	r2, #15
 8005636:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <HAL_RCC_GetClockConfig+0x58>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0203 	and.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCC_GetClockConfig+0x58>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <HAL_RCC_GetClockConfig+0x58>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800565c:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCC_GetClockConfig+0x58>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	08db      	lsrs	r3, r3, #3
 8005662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_RCC_GetClockConfig+0x5c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0201 	and.w	r2, r3, #1
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	601a      	str	r2, [r3, #0]
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr
 8005680:	40023800 	.word	0x40023800
 8005684:	40023c00 	.word	0x40023c00

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005694:	4b29      	ldr	r3, [pc, #164]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d12c      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056a0:	4b26      	ldr	r3, [pc, #152]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056ac:	4b24      	ldr	r3, [pc, #144]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e016      	b.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	4a1f      	ldr	r2, [pc, #124]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6253      	str	r3, [r2, #36]	; 0x24
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80056d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80056ec:	d105      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f4:	d101      	bne.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80056f6:	2301      	movs	r3, #1
 80056f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 0201 	bic.w	r2, r3, #1
 8005714:	490b      	ldr	r1, [pc, #44]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d001      	beq.n	800572e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800
 8005740:	40007000 	.word	0x40007000
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e031      	b.n	80057be <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f829 	bl	80057c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f978 	bl	8005a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e03a      	b.n	8005866 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d00e      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x58>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <HAL_TIM_Base_Start_IT+0x98>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d009      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x58>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a14      	ldr	r2, [pc, #80]	; (8005874 <HAL_TIM_Base_Start_IT+0x9c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x58>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a13      	ldr	r2, [pc, #76]	; (8005878 <HAL_TIM_Base_Start_IT+0xa0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d111      	bne.n	8005854 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b06      	cmp	r3, #6
 8005840:	d010      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005852:	e007      	b.n	8005864 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40010800 	.word	0x40010800

0800587c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d122      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d11b      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0202 	mvn.w	r2, #2
 80058a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8c1 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8b4 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f8c3 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d122      	bne.n	800592c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d11b      	bne.n	800592c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0204 	mvn.w	r2, #4
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f897 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f88a 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f899 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d122      	bne.n	8005980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b08      	cmp	r3, #8
 8005946:	d11b      	bne.n	8005980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0208 	mvn.w	r2, #8
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2204      	movs	r2, #4
 8005956:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f86d 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f860 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f86f 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b10      	cmp	r3, #16
 800598c:	d122      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d11b      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0210 	mvn.w	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2208      	movs	r2, #8
 80059aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f843 	bl	8005a46 <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f836 	bl	8005a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f845 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10e      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0201 	mvn.w	r2, #1
 80059f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fc fd36 	bl	800246c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d10e      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f81f 	bl	8005a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0x38>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a2b      	ldr	r2, [pc, #172]	; (8005b44 <TIM_Base_SetConfig+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0x38>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <TIM_Base_SetConfig+0xcc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0x38>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <TIM_Base_SetConfig+0xd0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0x38>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a28      	ldr	r2, [pc, #160]	; (8005b50 <TIM_Base_SetConfig+0xd4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d017      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <TIM_Base_SetConfig+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d013      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <TIM_Base_SetConfig+0xcc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00f      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <TIM_Base_SetConfig+0xd0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <TIM_Base_SetConfig+0xd4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d007      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <TIM_Base_SetConfig+0xd8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_Base_SetConfig+0x82>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <TIM_Base_SetConfig+0xdc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d108      	bne.n	8005b10 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	615a      	str	r2, [r3, #20]
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40000c00 	.word	0x40000c00
 8005b50:	40010800 	.word	0x40010800
 8005b54:	40010c00 	.word	0x40010c00
 8005b58:	40011000 	.word	0x40011000

08005b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e03f      	b.n	8005bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc ff12 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f905 	bl	8005db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b08a      	sub	sp, #40	; 0x28
 8005bfa:	af02      	add	r7, sp, #8
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d17c      	bne.n	8005d10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_UART_Transmit+0x2c>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e075      	b.n	8005d12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Transmit+0x3e>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e06e      	b.n	8005d12 <HAL_UART_Transmit+0x11c>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2221      	movs	r2, #33	; 0x21
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c4a:	f7fc ff43 	bl	8002ad4 <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c64:	d108      	bne.n	8005c78 <HAL_UART_Transmit+0x82>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e003      	b.n	8005c80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c88:	e02a      	b.n	8005ce0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f840 	bl	8005d1a <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e036      	b.n	8005d12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e007      	b.n	8005cd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	781a      	ldrb	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1cf      	bne.n	8005c8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2140      	movs	r1, #64	; 0x40
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f810 	bl	8005d1a <UART_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	603b      	str	r3, [r7, #0]
 8005d26:	4613      	mov	r3, r2
 8005d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2a:	e02c      	b.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d028      	beq.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d3a:	f7fc fecb 	bl	8002ad4 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d21d      	bcs.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e00f      	b.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d0c3      	beq.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005df0:	f023 030c 	bic.w	r3, r3, #12
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a55      	ldr	r2, [pc, #340]	; (8005f70 <UART_SetConfig+0x1c0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d103      	bne.n	8005e26 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e1e:	f7ff fbef 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e26:	f7ff fbd7 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8005e2a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e34:	d14c      	bne.n	8005ed0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009a      	lsls	r2, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	4a49      	ldr	r2, [pc, #292]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	0119      	lsls	r1, r3, #4
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009a      	lsls	r2, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e6c:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2064      	movs	r0, #100	; 0x64
 8005e76:	fb00 f303 	mul.w	r3, r0, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	3332      	adds	r3, #50	; 0x32
 8005e80:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e8e:	4419      	add	r1, r3
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009a      	lsls	r2, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ea6:	4b33      	ldr	r3, [pc, #204]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	2064      	movs	r0, #100	; 0x64
 8005eb0:	fb00 f303 	mul.w	r3, r0, r3
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	3332      	adds	r3, #50	; 0x32
 8005eba:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	f003 0207 	and.w	r2, r3, #7
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	440a      	add	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ece:	e04a      	b.n	8005f66 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009a      	lsls	r2, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	0119      	lsls	r1, r3, #4
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009a      	lsls	r2, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f06:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005f08:	fba3 0302 	umull	r0, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2064      	movs	r0, #100	; 0x64
 8005f10:	fb00 f303 	mul.w	r3, r0, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f26:	4419      	add	r1, r3
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009a      	lsls	r2, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005f40:	fba3 0302 	umull	r0, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2064      	movs	r0, #100	; 0x64
 8005f48:	fb00 f303 	mul.w	r3, r0, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	3332      	adds	r3, #50	; 0x32
 8005f52:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <UART_SetConfig+0x1c4>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	440a      	add	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40013800 	.word	0x40013800
 8005f74:	51eb851f 	.word	0x51eb851f

08005f78 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6892      	ldr	r2, [r2, #8]
 8005fd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6852      	ldr	r2, [r2, #4]
 8005fde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d103      	bne.n	8005ff2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601a:	4b51      	ldr	r3, [pc, #324]	; (8006160 <xTaskIncrementTick+0x150>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 808e 	bne.w	8006140 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006024:	4b4f      	ldr	r3, [pc, #316]	; (8006164 <xTaskIncrementTick+0x154>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800602c:	4a4d      	ldr	r2, [pc, #308]	; (8006164 <xTaskIncrementTick+0x154>)
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d120      	bne.n	800607a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006038:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <xTaskIncrementTick+0x158>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <xTaskIncrementTick+0x46>
 8006058:	4b43      	ldr	r3, [pc, #268]	; (8006168 <xTaskIncrementTick+0x158>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <xTaskIncrementTick+0x15c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a41      	ldr	r2, [pc, #260]	; (8006168 <xTaskIncrementTick+0x158>)
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4a41      	ldr	r2, [pc, #260]	; (800616c <xTaskIncrementTick+0x15c>)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	4b40      	ldr	r3, [pc, #256]	; (8006170 <xTaskIncrementTick+0x160>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	4a3f      	ldr	r2, [pc, #252]	; (8006170 <xTaskIncrementTick+0x160>)
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	f000 f8ed 	bl	8006254 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800607a:	4b3e      	ldr	r3, [pc, #248]	; (8006174 <xTaskIncrementTick+0x164>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	d34e      	bcc.n	8006122 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006084:	4b38      	ldr	r3, [pc, #224]	; (8006168 <xTaskIncrementTick+0x158>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <xTaskIncrementTick+0x82>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <xTaskIncrementTick+0x84>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <xTaskIncrementTick+0x164>)
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	601a      	str	r2, [r3, #0]
					break;
 80060a0:	e03f      	b.n	8006122 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <xTaskIncrementTick+0x158>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d203      	bcs.n	80060c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060ba:	4a2e      	ldr	r2, [pc, #184]	; (8006174 <xTaskIncrementTick+0x164>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6013      	str	r3, [r2, #0]
						break;
 80060c0:	e02f      	b.n	8006122 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ff79 	bl	8005fbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	3318      	adds	r3, #24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff70 	bl	8005fbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	4b25      	ldr	r3, [pc, #148]	; (8006178 <xTaskIncrementTick+0x168>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d903      	bls.n	80060f2 <xTaskIncrementTick+0xe2>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	4a22      	ldr	r2, [pc, #136]	; (8006178 <xTaskIncrementTick+0x168>)
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4a1f      	ldr	r2, [pc, #124]	; (800617c <xTaskIncrementTick+0x16c>)
 8006100:	441a      	add	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3304      	adds	r3, #4
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f7ff ff35 	bl	8005f78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <xTaskIncrementTick+0x170>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	429a      	cmp	r2, r3
 800611a:	d3b3      	bcc.n	8006084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800611c:	2301      	movs	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006120:	e7b0      	b.n	8006084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <xTaskIncrementTick+0x170>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006128:	4914      	ldr	r1, [pc, #80]	; (800617c <xTaskIncrementTick+0x16c>)
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d907      	bls.n	800614a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800613a:	2301      	movs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	e004      	b.n	800614a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <xTaskIncrementTick+0x174>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <xTaskIncrementTick+0x174>)
 8006148:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800614a:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <xTaskIncrementTick+0x178>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006156:	697b      	ldr	r3, [r7, #20]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000794 	.word	0x20000794
 8006164:	2000077c 	.word	0x2000077c
 8006168:	20000774 	.word	0x20000774
 800616c:	20000778 	.word	0x20000778
 8006170:	2000078c 	.word	0x2000078c
 8006174:	20000790 	.word	0x20000790
 8006178:	20000780 	.word	0x20000780
 800617c:	20000314 	.word	0x20000314
 8006180:	20000310 	.word	0x20000310
 8006184:	20000784 	.word	0x20000784
 8006188:	20000788 	.word	0x20000788

0800618c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006192:	4b2a      	ldr	r3, [pc, #168]	; (800623c <vTaskSwitchContext+0xb0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800619a:	4b29      	ldr	r3, [pc, #164]	; (8006240 <vTaskSwitchContext+0xb4>)
 800619c:	2201      	movs	r2, #1
 800619e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061a0:	e046      	b.n	8006230 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <vTaskSwitchContext+0xb4>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061a8:	4b26      	ldr	r3, [pc, #152]	; (8006244 <vTaskSwitchContext+0xb8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e010      	b.n	80061d2 <vTaskSwitchContext+0x46>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <vTaskSwitchContext+0x40>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	607b      	str	r3, [r7, #4]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <vTaskSwitchContext+0x3e>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	491d      	ldr	r1, [pc, #116]	; (8006248 <vTaskSwitchContext+0xbc>)
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0e4      	beq.n	80061b0 <vTaskSwitchContext+0x24>
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <vTaskSwitchContext+0xbc>)
 80061f2:	4413      	add	r3, r2
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3308      	adds	r3, #8
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <vTaskSwitchContext+0x8a>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a0b      	ldr	r2, [pc, #44]	; (800624c <vTaskSwitchContext+0xc0>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	4a08      	ldr	r2, [pc, #32]	; (8006244 <vTaskSwitchContext+0xb8>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <vTaskSwitchContext+0xc0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3354      	adds	r3, #84	; 0x54
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <vTaskSwitchContext+0xc4>)
 800622e:	6013      	str	r3, [r2, #0]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000794 	.word	0x20000794
 8006240:	20000788 	.word	0x20000788
 8006244:	20000780 	.word	0x20000780
 8006248:	20000314 	.word	0x20000314
 800624c:	20000310 	.word	0x20000310
 8006250:	2000000c 	.word	0x2000000c

08006254 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625a:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <prvResetNextTaskUnblockTime+0x40>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <prvResetNextTaskUnblockTime+0x14>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <prvResetNextTaskUnblockTime+0x16>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <prvResetNextTaskUnblockTime+0x44>)
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006276:	e008      	b.n	800628a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <prvResetNextTaskUnblockTime+0x40>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4a04      	ldr	r2, [pc, #16]	; (8006298 <prvResetNextTaskUnblockTime+0x44>)
 8006288:	6013      	str	r3, [r2, #0]
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	20000774 	.word	0x20000774
 8006298:	20000790 	.word	0x20000790
 800629c:	00000000 	.word	0x00000000

080062a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <pxCurrentTCBConst2>)
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	6808      	ldr	r0, [r1, #0]
 80062a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062aa:	f380 8809 	msr	PSP, r0
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80062be:	4770      	bx	lr

080062c0 <pxCurrentTCBConst2>:
 80062c0:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
	...

080062d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062d0:	f3ef 8009 	mrs	r0, PSP
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <pxCurrentTCBConst>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062e0:	6010      	str	r0, [r2, #0]
 80062e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80062e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062ea:	f380 8811 	msr	BASEPRI, r0
 80062ee:	f7ff ff4d 	bl	800618c <vTaskSwitchContext>
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006306:	f380 8809 	msr	PSP, r0
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	4770      	bx	lr

08006310 <pxCurrentTCBConst>:
 8006310:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7ff fe6d 	bl	8006010 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <SysTick_Handler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c

08006368 <std>:
 8006368:	2300      	movs	r3, #0
 800636a:	b510      	push	{r4, lr}
 800636c:	4604      	mov	r4, r0
 800636e:	e9c0 3300 	strd	r3, r3, [r0]
 8006372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006376:	6083      	str	r3, [r0, #8]
 8006378:	8181      	strh	r1, [r0, #12]
 800637a:	6643      	str	r3, [r0, #100]	; 0x64
 800637c:	81c2      	strh	r2, [r0, #14]
 800637e:	6183      	str	r3, [r0, #24]
 8006380:	4619      	mov	r1, r3
 8006382:	2208      	movs	r2, #8
 8006384:	305c      	adds	r0, #92	; 0x5c
 8006386:	f000 f91a 	bl	80065be <memset>
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <std+0x38>)
 800638c:	6224      	str	r4, [r4, #32]
 800638e:	6263      	str	r3, [r4, #36]	; 0x24
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <std+0x3c>)
 8006392:	62a3      	str	r3, [r4, #40]	; 0x28
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <std+0x40>)
 8006396:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <std+0x44>)
 800639a:	6323      	str	r3, [r4, #48]	; 0x30
 800639c:	bd10      	pop	{r4, pc}
 800639e:	bf00      	nop
 80063a0:	08007019 	.word	0x08007019
 80063a4:	0800703b 	.word	0x0800703b
 80063a8:	08007073 	.word	0x08007073
 80063ac:	08007097 	.word	0x08007097

080063b0 <_cleanup_r>:
 80063b0:	4901      	ldr	r1, [pc, #4]	; (80063b8 <_cleanup_r+0x8>)
 80063b2:	f000 b8af 	b.w	8006514 <_fwalk_reent>
 80063b6:	bf00      	nop
 80063b8:	08007ee1 	.word	0x08007ee1

080063bc <__sfmoreglue>:
 80063bc:	2268      	movs	r2, #104	; 0x68
 80063be:	b570      	push	{r4, r5, r6, lr}
 80063c0:	1e4d      	subs	r5, r1, #1
 80063c2:	4355      	muls	r5, r2
 80063c4:	460e      	mov	r6, r1
 80063c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063ca:	f000 f921 	bl	8006610 <_malloc_r>
 80063ce:	4604      	mov	r4, r0
 80063d0:	b140      	cbz	r0, 80063e4 <__sfmoreglue+0x28>
 80063d2:	2100      	movs	r1, #0
 80063d4:	e9c0 1600 	strd	r1, r6, [r0]
 80063d8:	300c      	adds	r0, #12
 80063da:	60a0      	str	r0, [r4, #8]
 80063dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063e0:	f000 f8ed 	bl	80065be <memset>
 80063e4:	4620      	mov	r0, r4
 80063e6:	bd70      	pop	{r4, r5, r6, pc}

080063e8 <__sfp_lock_acquire>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__sfp_lock_acquire+0x8>)
 80063ea:	f000 b8d8 	b.w	800659e <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000799 	.word	0x20000799

080063f4 <__sfp_lock_release>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__sfp_lock_release+0x8>)
 80063f6:	f000 b8d3 	b.w	80065a0 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000799 	.word	0x20000799

08006400 <__sinit_lock_acquire>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__sinit_lock_acquire+0x8>)
 8006402:	f000 b8cc 	b.w	800659e <__retarget_lock_acquire_recursive>
 8006406:	bf00      	nop
 8006408:	2000079a 	.word	0x2000079a

0800640c <__sinit_lock_release>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sinit_lock_release+0x8>)
 800640e:	f000 b8c7 	b.w	80065a0 <__retarget_lock_release_recursive>
 8006412:	bf00      	nop
 8006414:	2000079a 	.word	0x2000079a

08006418 <__sinit>:
 8006418:	b510      	push	{r4, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	f7ff fff0 	bl	8006400 <__sinit_lock_acquire>
 8006420:	69a3      	ldr	r3, [r4, #24]
 8006422:	b11b      	cbz	r3, 800642c <__sinit+0x14>
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f7ff bff0 	b.w	800640c <__sinit_lock_release>
 800642c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006430:	6523      	str	r3, [r4, #80]	; 0x50
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <__sinit+0x68>)
 8006434:	4a13      	ldr	r2, [pc, #76]	; (8006484 <__sinit+0x6c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	62a2      	str	r2, [r4, #40]	; 0x28
 800643a:	42a3      	cmp	r3, r4
 800643c:	bf08      	it	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	4620      	mov	r0, r4
 8006442:	bf08      	it	eq
 8006444:	61a3      	streq	r3, [r4, #24]
 8006446:	f000 f81f 	bl	8006488 <__sfp>
 800644a:	6060      	str	r0, [r4, #4]
 800644c:	4620      	mov	r0, r4
 800644e:	f000 f81b 	bl	8006488 <__sfp>
 8006452:	60a0      	str	r0, [r4, #8]
 8006454:	4620      	mov	r0, r4
 8006456:	f000 f817 	bl	8006488 <__sfp>
 800645a:	2200      	movs	r2, #0
 800645c:	2104      	movs	r1, #4
 800645e:	60e0      	str	r0, [r4, #12]
 8006460:	6860      	ldr	r0, [r4, #4]
 8006462:	f7ff ff81 	bl	8006368 <std>
 8006466:	2201      	movs	r2, #1
 8006468:	2109      	movs	r1, #9
 800646a:	68a0      	ldr	r0, [r4, #8]
 800646c:	f7ff ff7c 	bl	8006368 <std>
 8006470:	2202      	movs	r2, #2
 8006472:	2112      	movs	r1, #18
 8006474:	68e0      	ldr	r0, [r4, #12]
 8006476:	f7ff ff77 	bl	8006368 <std>
 800647a:	2301      	movs	r3, #1
 800647c:	61a3      	str	r3, [r4, #24]
 800647e:	e7d1      	b.n	8006424 <__sinit+0xc>
 8006480:	08009280 	.word	0x08009280
 8006484:	080063b1 	.word	0x080063b1

08006488 <__sfp>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	4607      	mov	r7, r0
 800648c:	f7ff ffac 	bl	80063e8 <__sfp_lock_acquire>
 8006490:	4b1e      	ldr	r3, [pc, #120]	; (800650c <__sfp+0x84>)
 8006492:	681e      	ldr	r6, [r3, #0]
 8006494:	69b3      	ldr	r3, [r6, #24]
 8006496:	b913      	cbnz	r3, 800649e <__sfp+0x16>
 8006498:	4630      	mov	r0, r6
 800649a:	f7ff ffbd 	bl	8006418 <__sinit>
 800649e:	3648      	adds	r6, #72	; 0x48
 80064a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	d503      	bpl.n	80064b0 <__sfp+0x28>
 80064a8:	6833      	ldr	r3, [r6, #0]
 80064aa:	b30b      	cbz	r3, 80064f0 <__sfp+0x68>
 80064ac:	6836      	ldr	r6, [r6, #0]
 80064ae:	e7f7      	b.n	80064a0 <__sfp+0x18>
 80064b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064b4:	b9d5      	cbnz	r5, 80064ec <__sfp+0x64>
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <__sfp+0x88>)
 80064b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064bc:	60e3      	str	r3, [r4, #12]
 80064be:	6665      	str	r5, [r4, #100]	; 0x64
 80064c0:	f000 f86c 	bl	800659c <__retarget_lock_init_recursive>
 80064c4:	f7ff ff96 	bl	80063f4 <__sfp_lock_release>
 80064c8:	2208      	movs	r2, #8
 80064ca:	4629      	mov	r1, r5
 80064cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064d4:	6025      	str	r5, [r4, #0]
 80064d6:	61a5      	str	r5, [r4, #24]
 80064d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064dc:	f000 f86f 	bl	80065be <memset>
 80064e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064e8:	4620      	mov	r0, r4
 80064ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ec:	3468      	adds	r4, #104	; 0x68
 80064ee:	e7d9      	b.n	80064a4 <__sfp+0x1c>
 80064f0:	2104      	movs	r1, #4
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ff62 	bl	80063bc <__sfmoreglue>
 80064f8:	4604      	mov	r4, r0
 80064fa:	6030      	str	r0, [r6, #0]
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d1d5      	bne.n	80064ac <__sfp+0x24>
 8006500:	f7ff ff78 	bl	80063f4 <__sfp_lock_release>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	e7ee      	b.n	80064e8 <__sfp+0x60>
 800650a:	bf00      	nop
 800650c:	08009280 	.word	0x08009280
 8006510:	ffff0001 	.word	0xffff0001

08006514 <_fwalk_reent>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	4606      	mov	r6, r0
 800651a:	4688      	mov	r8, r1
 800651c:	2700      	movs	r7, #0
 800651e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006526:	f1b9 0901 	subs.w	r9, r9, #1
 800652a:	d505      	bpl.n	8006538 <_fwalk_reent+0x24>
 800652c:	6824      	ldr	r4, [r4, #0]
 800652e:	2c00      	cmp	r4, #0
 8006530:	d1f7      	bne.n	8006522 <_fwalk_reent+0xe>
 8006532:	4638      	mov	r0, r7
 8006534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006538:	89ab      	ldrh	r3, [r5, #12]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d907      	bls.n	800654e <_fwalk_reent+0x3a>
 800653e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006542:	3301      	adds	r3, #1
 8006544:	d003      	beq.n	800654e <_fwalk_reent+0x3a>
 8006546:	4629      	mov	r1, r5
 8006548:	4630      	mov	r0, r6
 800654a:	47c0      	blx	r8
 800654c:	4307      	orrs	r7, r0
 800654e:	3568      	adds	r5, #104	; 0x68
 8006550:	e7e9      	b.n	8006526 <_fwalk_reent+0x12>
	...

08006554 <__libc_init_array>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	2600      	movs	r6, #0
 8006558:	4d0c      	ldr	r5, [pc, #48]	; (800658c <__libc_init_array+0x38>)
 800655a:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <__libc_init_array+0x3c>)
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	42a6      	cmp	r6, r4
 8006562:	d109      	bne.n	8006578 <__libc_init_array+0x24>
 8006564:	f002 fe06 	bl	8009174 <_init>
 8006568:	2600      	movs	r6, #0
 800656a:	4d0a      	ldr	r5, [pc, #40]	; (8006594 <__libc_init_array+0x40>)
 800656c:	4c0a      	ldr	r4, [pc, #40]	; (8006598 <__libc_init_array+0x44>)
 800656e:	1b64      	subs	r4, r4, r5
 8006570:	10a4      	asrs	r4, r4, #2
 8006572:	42a6      	cmp	r6, r4
 8006574:	d105      	bne.n	8006582 <__libc_init_array+0x2e>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	f855 3b04 	ldr.w	r3, [r5], #4
 800657c:	4798      	blx	r3
 800657e:	3601      	adds	r6, #1
 8006580:	e7ee      	b.n	8006560 <__libc_init_array+0xc>
 8006582:	f855 3b04 	ldr.w	r3, [r5], #4
 8006586:	4798      	blx	r3
 8006588:	3601      	adds	r6, #1
 800658a:	e7f2      	b.n	8006572 <__libc_init_array+0x1e>
 800658c:	08009604 	.word	0x08009604
 8006590:	08009604 	.word	0x08009604
 8006594:	08009604 	.word	0x08009604
 8006598:	08009608 	.word	0x08009608

0800659c <__retarget_lock_init_recursive>:
 800659c:	4770      	bx	lr

0800659e <__retarget_lock_acquire_recursive>:
 800659e:	4770      	bx	lr

080065a0 <__retarget_lock_release_recursive>:
 80065a0:	4770      	bx	lr

080065a2 <memcpy>:
 80065a2:	440a      	add	r2, r1
 80065a4:	4291      	cmp	r1, r2
 80065a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80065aa:	d100      	bne.n	80065ae <memcpy+0xc>
 80065ac:	4770      	bx	lr
 80065ae:	b510      	push	{r4, lr}
 80065b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b4:	4291      	cmp	r1, r2
 80065b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ba:	d1f9      	bne.n	80065b0 <memcpy+0xe>
 80065bc:	bd10      	pop	{r4, pc}

080065be <memset>:
 80065be:	4603      	mov	r3, r0
 80065c0:	4402      	add	r2, r0
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d100      	bne.n	80065c8 <memset+0xa>
 80065c6:	4770      	bx	lr
 80065c8:	f803 1b01 	strb.w	r1, [r3], #1
 80065cc:	e7f9      	b.n	80065c2 <memset+0x4>
	...

080065d0 <sbrk_aligned>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4e0e      	ldr	r6, [pc, #56]	; (800660c <sbrk_aligned+0x3c>)
 80065d4:	460c      	mov	r4, r1
 80065d6:	6831      	ldr	r1, [r6, #0]
 80065d8:	4605      	mov	r5, r0
 80065da:	b911      	cbnz	r1, 80065e2 <sbrk_aligned+0x12>
 80065dc:	f000 fcec 	bl	8006fb8 <_sbrk_r>
 80065e0:	6030      	str	r0, [r6, #0]
 80065e2:	4621      	mov	r1, r4
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 fce7 	bl	8006fb8 <_sbrk_r>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d00a      	beq.n	8006604 <sbrk_aligned+0x34>
 80065ee:	1cc4      	adds	r4, r0, #3
 80065f0:	f024 0403 	bic.w	r4, r4, #3
 80065f4:	42a0      	cmp	r0, r4
 80065f6:	d007      	beq.n	8006608 <sbrk_aligned+0x38>
 80065f8:	1a21      	subs	r1, r4, r0
 80065fa:	4628      	mov	r0, r5
 80065fc:	f000 fcdc 	bl	8006fb8 <_sbrk_r>
 8006600:	3001      	adds	r0, #1
 8006602:	d101      	bne.n	8006608 <sbrk_aligned+0x38>
 8006604:	f04f 34ff 	mov.w	r4, #4294967295
 8006608:	4620      	mov	r0, r4
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	200007a0 	.word	0x200007a0

08006610 <_malloc_r>:
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	1ccd      	adds	r5, r1, #3
 8006616:	f025 0503 	bic.w	r5, r5, #3
 800661a:	3508      	adds	r5, #8
 800661c:	2d0c      	cmp	r5, #12
 800661e:	bf38      	it	cc
 8006620:	250c      	movcc	r5, #12
 8006622:	2d00      	cmp	r5, #0
 8006624:	4607      	mov	r7, r0
 8006626:	db01      	blt.n	800662c <_malloc_r+0x1c>
 8006628:	42a9      	cmp	r1, r5
 800662a:	d905      	bls.n	8006638 <_malloc_r+0x28>
 800662c:	230c      	movs	r3, #12
 800662e:	2600      	movs	r6, #0
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	4630      	mov	r0, r6
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006638:	4e2e      	ldr	r6, [pc, #184]	; (80066f4 <_malloc_r+0xe4>)
 800663a:	f001 fcb9 	bl	8007fb0 <__malloc_lock>
 800663e:	6833      	ldr	r3, [r6, #0]
 8006640:	461c      	mov	r4, r3
 8006642:	bb34      	cbnz	r4, 8006692 <_malloc_r+0x82>
 8006644:	4629      	mov	r1, r5
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff ffc2 	bl	80065d0 <sbrk_aligned>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	4604      	mov	r4, r0
 8006650:	d14d      	bne.n	80066ee <_malloc_r+0xde>
 8006652:	6834      	ldr	r4, [r6, #0]
 8006654:	4626      	mov	r6, r4
 8006656:	2e00      	cmp	r6, #0
 8006658:	d140      	bne.n	80066dc <_malloc_r+0xcc>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	4631      	mov	r1, r6
 800665e:	4638      	mov	r0, r7
 8006660:	eb04 0803 	add.w	r8, r4, r3
 8006664:	f000 fca8 	bl	8006fb8 <_sbrk_r>
 8006668:	4580      	cmp	r8, r0
 800666a:	d13a      	bne.n	80066e2 <_malloc_r+0xd2>
 800666c:	6821      	ldr	r1, [r4, #0]
 800666e:	3503      	adds	r5, #3
 8006670:	1a6d      	subs	r5, r5, r1
 8006672:	f025 0503 	bic.w	r5, r5, #3
 8006676:	3508      	adds	r5, #8
 8006678:	2d0c      	cmp	r5, #12
 800667a:	bf38      	it	cc
 800667c:	250c      	movcc	r5, #12
 800667e:	4638      	mov	r0, r7
 8006680:	4629      	mov	r1, r5
 8006682:	f7ff ffa5 	bl	80065d0 <sbrk_aligned>
 8006686:	3001      	adds	r0, #1
 8006688:	d02b      	beq.n	80066e2 <_malloc_r+0xd2>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	442b      	add	r3, r5
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	e00e      	b.n	80066b0 <_malloc_r+0xa0>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	1b52      	subs	r2, r2, r5
 8006696:	d41e      	bmi.n	80066d6 <_malloc_r+0xc6>
 8006698:	2a0b      	cmp	r2, #11
 800669a:	d916      	bls.n	80066ca <_malloc_r+0xba>
 800669c:	1961      	adds	r1, r4, r5
 800669e:	42a3      	cmp	r3, r4
 80066a0:	6025      	str	r5, [r4, #0]
 80066a2:	bf18      	it	ne
 80066a4:	6059      	strne	r1, [r3, #4]
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	bf08      	it	eq
 80066aa:	6031      	streq	r1, [r6, #0]
 80066ac:	5162      	str	r2, [r4, r5]
 80066ae:	604b      	str	r3, [r1, #4]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f104 060b 	add.w	r6, r4, #11
 80066b6:	f001 fc81 	bl	8007fbc <__malloc_unlock>
 80066ba:	f026 0607 	bic.w	r6, r6, #7
 80066be:	1d23      	adds	r3, r4, #4
 80066c0:	1af2      	subs	r2, r6, r3
 80066c2:	d0b6      	beq.n	8006632 <_malloc_r+0x22>
 80066c4:	1b9b      	subs	r3, r3, r6
 80066c6:	50a3      	str	r3, [r4, r2]
 80066c8:	e7b3      	b.n	8006632 <_malloc_r+0x22>
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	bf0c      	ite	eq
 80066d0:	6032      	streq	r2, [r6, #0]
 80066d2:	605a      	strne	r2, [r3, #4]
 80066d4:	e7ec      	b.n	80066b0 <_malloc_r+0xa0>
 80066d6:	4623      	mov	r3, r4
 80066d8:	6864      	ldr	r4, [r4, #4]
 80066da:	e7b2      	b.n	8006642 <_malloc_r+0x32>
 80066dc:	4634      	mov	r4, r6
 80066de:	6876      	ldr	r6, [r6, #4]
 80066e0:	e7b9      	b.n	8006656 <_malloc_r+0x46>
 80066e2:	230c      	movs	r3, #12
 80066e4:	4638      	mov	r0, r7
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	f001 fc68 	bl	8007fbc <__malloc_unlock>
 80066ec:	e7a1      	b.n	8006632 <_malloc_r+0x22>
 80066ee:	6025      	str	r5, [r4, #0]
 80066f0:	e7de      	b.n	80066b0 <_malloc_r+0xa0>
 80066f2:	bf00      	nop
 80066f4:	2000079c 	.word	0x2000079c

080066f8 <__cvt>:
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fe:	461f      	mov	r7, r3
 8006700:	bfbb      	ittet	lt
 8006702:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006706:	461f      	movlt	r7, r3
 8006708:	2300      	movge	r3, #0
 800670a:	232d      	movlt	r3, #45	; 0x2d
 800670c:	b088      	sub	sp, #32
 800670e:	4614      	mov	r4, r2
 8006710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006712:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006714:	7013      	strb	r3, [r2, #0]
 8006716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006718:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800671c:	f023 0820 	bic.w	r8, r3, #32
 8006720:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006724:	d005      	beq.n	8006732 <__cvt+0x3a>
 8006726:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800672a:	d100      	bne.n	800672e <__cvt+0x36>
 800672c:	3501      	adds	r5, #1
 800672e:	2302      	movs	r3, #2
 8006730:	e000      	b.n	8006734 <__cvt+0x3c>
 8006732:	2303      	movs	r3, #3
 8006734:	aa07      	add	r2, sp, #28
 8006736:	9204      	str	r2, [sp, #16]
 8006738:	aa06      	add	r2, sp, #24
 800673a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800673e:	e9cd 3500 	strd	r3, r5, [sp]
 8006742:	4622      	mov	r2, r4
 8006744:	463b      	mov	r3, r7
 8006746:	f000 fd5b 	bl	8007200 <_dtoa_r>
 800674a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800674e:	4606      	mov	r6, r0
 8006750:	d102      	bne.n	8006758 <__cvt+0x60>
 8006752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006754:	07db      	lsls	r3, r3, #31
 8006756:	d522      	bpl.n	800679e <__cvt+0xa6>
 8006758:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800675c:	eb06 0905 	add.w	r9, r6, r5
 8006760:	d110      	bne.n	8006784 <__cvt+0x8c>
 8006762:	7833      	ldrb	r3, [r6, #0]
 8006764:	2b30      	cmp	r3, #48	; 0x30
 8006766:	d10a      	bne.n	800677e <__cvt+0x86>
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	4620      	mov	r0, r4
 800676e:	4639      	mov	r1, r7
 8006770:	f7fa f932 	bl	80009d8 <__aeabi_dcmpeq>
 8006774:	b918      	cbnz	r0, 800677e <__cvt+0x86>
 8006776:	f1c5 0501 	rsb	r5, r5, #1
 800677a:	f8ca 5000 	str.w	r5, [sl]
 800677e:	f8da 3000 	ldr.w	r3, [sl]
 8006782:	4499      	add	r9, r3
 8006784:	2200      	movs	r2, #0
 8006786:	2300      	movs	r3, #0
 8006788:	4620      	mov	r0, r4
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f924 	bl	80009d8 <__aeabi_dcmpeq>
 8006790:	b108      	cbz	r0, 8006796 <__cvt+0x9e>
 8006792:	f8cd 901c 	str.w	r9, [sp, #28]
 8006796:	2230      	movs	r2, #48	; 0x30
 8006798:	9b07      	ldr	r3, [sp, #28]
 800679a:	454b      	cmp	r3, r9
 800679c:	d307      	bcc.n	80067ae <__cvt+0xb6>
 800679e:	4630      	mov	r0, r6
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067a4:	1b9b      	subs	r3, r3, r6
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	b008      	add	sp, #32
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	9107      	str	r1, [sp, #28]
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e7f0      	b.n	8006798 <__cvt+0xa0>

080067b6 <__exponent>:
 80067b6:	4603      	mov	r3, r0
 80067b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ba:	2900      	cmp	r1, #0
 80067bc:	f803 2b02 	strb.w	r2, [r3], #2
 80067c0:	bfb6      	itet	lt
 80067c2:	222d      	movlt	r2, #45	; 0x2d
 80067c4:	222b      	movge	r2, #43	; 0x2b
 80067c6:	4249      	neglt	r1, r1
 80067c8:	2909      	cmp	r1, #9
 80067ca:	7042      	strb	r2, [r0, #1]
 80067cc:	dd2b      	ble.n	8006826 <__exponent+0x70>
 80067ce:	f10d 0407 	add.w	r4, sp, #7
 80067d2:	46a4      	mov	ip, r4
 80067d4:	270a      	movs	r7, #10
 80067d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80067da:	460a      	mov	r2, r1
 80067dc:	46a6      	mov	lr, r4
 80067de:	fb07 1516 	mls	r5, r7, r6, r1
 80067e2:	2a63      	cmp	r2, #99	; 0x63
 80067e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80067e8:	4631      	mov	r1, r6
 80067ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80067ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067f2:	dcf0      	bgt.n	80067d6 <__exponent+0x20>
 80067f4:	3130      	adds	r1, #48	; 0x30
 80067f6:	f1ae 0502 	sub.w	r5, lr, #2
 80067fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067fe:	4629      	mov	r1, r5
 8006800:	1c44      	adds	r4, r0, #1
 8006802:	4561      	cmp	r1, ip
 8006804:	d30a      	bcc.n	800681c <__exponent+0x66>
 8006806:	f10d 0209 	add.w	r2, sp, #9
 800680a:	eba2 020e 	sub.w	r2, r2, lr
 800680e:	4565      	cmp	r5, ip
 8006810:	bf88      	it	hi
 8006812:	2200      	movhi	r2, #0
 8006814:	4413      	add	r3, r2
 8006816:	1a18      	subs	r0, r3, r0
 8006818:	b003      	add	sp, #12
 800681a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006820:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006824:	e7ed      	b.n	8006802 <__exponent+0x4c>
 8006826:	2330      	movs	r3, #48	; 0x30
 8006828:	3130      	adds	r1, #48	; 0x30
 800682a:	7083      	strb	r3, [r0, #2]
 800682c:	70c1      	strb	r1, [r0, #3]
 800682e:	1d03      	adds	r3, r0, #4
 8006830:	e7f1      	b.n	8006816 <__exponent+0x60>
	...

08006834 <_printf_float>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	b091      	sub	sp, #68	; 0x44
 800683a:	460c      	mov	r4, r1
 800683c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006840:	4616      	mov	r6, r2
 8006842:	461f      	mov	r7, r3
 8006844:	4605      	mov	r5, r0
 8006846:	f001 fb87 	bl	8007f58 <_localeconv_r>
 800684a:	6803      	ldr	r3, [r0, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	f7f9 fc96 	bl	8000180 <strlen>
 8006854:	2300      	movs	r3, #0
 8006856:	930e      	str	r3, [sp, #56]	; 0x38
 8006858:	f8d8 3000 	ldr.w	r3, [r8]
 800685c:	900a      	str	r0, [sp, #40]	; 0x28
 800685e:	3307      	adds	r3, #7
 8006860:	f023 0307 	bic.w	r3, r3, #7
 8006864:	f103 0208 	add.w	r2, r3, #8
 8006868:	f894 9018 	ldrb.w	r9, [r4, #24]
 800686c:	f8d4 b000 	ldr.w	fp, [r4]
 8006870:	f8c8 2000 	str.w	r2, [r8]
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800687c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006880:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006884:	930b      	str	r3, [sp, #44]	; 0x2c
 8006886:	f04f 32ff 	mov.w	r2, #4294967295
 800688a:	4640      	mov	r0, r8
 800688c:	4b9c      	ldr	r3, [pc, #624]	; (8006b00 <_printf_float+0x2cc>)
 800688e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006890:	f7fa f8d4 	bl	8000a3c <__aeabi_dcmpun>
 8006894:	bb70      	cbnz	r0, 80068f4 <_printf_float+0xc0>
 8006896:	f04f 32ff 	mov.w	r2, #4294967295
 800689a:	4640      	mov	r0, r8
 800689c:	4b98      	ldr	r3, [pc, #608]	; (8006b00 <_printf_float+0x2cc>)
 800689e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068a0:	f7fa f8ae 	bl	8000a00 <__aeabi_dcmple>
 80068a4:	bb30      	cbnz	r0, 80068f4 <_printf_float+0xc0>
 80068a6:	2200      	movs	r2, #0
 80068a8:	2300      	movs	r3, #0
 80068aa:	4640      	mov	r0, r8
 80068ac:	4651      	mov	r1, sl
 80068ae:	f7fa f89d 	bl	80009ec <__aeabi_dcmplt>
 80068b2:	b110      	cbz	r0, 80068ba <_printf_float+0x86>
 80068b4:	232d      	movs	r3, #45	; 0x2d
 80068b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ba:	4b92      	ldr	r3, [pc, #584]	; (8006b04 <_printf_float+0x2d0>)
 80068bc:	4892      	ldr	r0, [pc, #584]	; (8006b08 <_printf_float+0x2d4>)
 80068be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80068c2:	bf94      	ite	ls
 80068c4:	4698      	movls	r8, r3
 80068c6:	4680      	movhi	r8, r0
 80068c8:	2303      	movs	r3, #3
 80068ca:	f04f 0a00 	mov.w	sl, #0
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	f02b 0304 	bic.w	r3, fp, #4
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	4633      	mov	r3, r6
 80068d8:	4621      	mov	r1, r4
 80068da:	4628      	mov	r0, r5
 80068dc:	9700      	str	r7, [sp, #0]
 80068de:	aa0f      	add	r2, sp, #60	; 0x3c
 80068e0:	f000 f9d4 	bl	8006c8c <_printf_common>
 80068e4:	3001      	adds	r0, #1
 80068e6:	f040 8090 	bne.w	8006a0a <_printf_float+0x1d6>
 80068ea:	f04f 30ff 	mov.w	r0, #4294967295
 80068ee:	b011      	add	sp, #68	; 0x44
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	4642      	mov	r2, r8
 80068f6:	4653      	mov	r3, sl
 80068f8:	4640      	mov	r0, r8
 80068fa:	4651      	mov	r1, sl
 80068fc:	f7fa f89e 	bl	8000a3c <__aeabi_dcmpun>
 8006900:	b148      	cbz	r0, 8006916 <_printf_float+0xe2>
 8006902:	f1ba 0f00 	cmp.w	sl, #0
 8006906:	bfb8      	it	lt
 8006908:	232d      	movlt	r3, #45	; 0x2d
 800690a:	4880      	ldr	r0, [pc, #512]	; (8006b0c <_printf_float+0x2d8>)
 800690c:	bfb8      	it	lt
 800690e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006912:	4b7f      	ldr	r3, [pc, #508]	; (8006b10 <_printf_float+0x2dc>)
 8006914:	e7d3      	b.n	80068be <_printf_float+0x8a>
 8006916:	6863      	ldr	r3, [r4, #4]
 8006918:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	d142      	bne.n	80069a6 <_printf_float+0x172>
 8006920:	2306      	movs	r3, #6
 8006922:	6063      	str	r3, [r4, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	9206      	str	r2, [sp, #24]
 8006928:	aa0e      	add	r2, sp, #56	; 0x38
 800692a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800692e:	aa0d      	add	r2, sp, #52	; 0x34
 8006930:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006934:	9203      	str	r2, [sp, #12]
 8006936:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800693a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	4642      	mov	r2, r8
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4628      	mov	r0, r5
 8006948:	4653      	mov	r3, sl
 800694a:	910b      	str	r1, [sp, #44]	; 0x2c
 800694c:	f7ff fed4 	bl	80066f8 <__cvt>
 8006950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006952:	4680      	mov	r8, r0
 8006954:	2947      	cmp	r1, #71	; 0x47
 8006956:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006958:	d108      	bne.n	800696c <_printf_float+0x138>
 800695a:	1cc8      	adds	r0, r1, #3
 800695c:	db02      	blt.n	8006964 <_printf_float+0x130>
 800695e:	6863      	ldr	r3, [r4, #4]
 8006960:	4299      	cmp	r1, r3
 8006962:	dd40      	ble.n	80069e6 <_printf_float+0x1b2>
 8006964:	f1a9 0902 	sub.w	r9, r9, #2
 8006968:	fa5f f989 	uxtb.w	r9, r9
 800696c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006970:	d81f      	bhi.n	80069b2 <_printf_float+0x17e>
 8006972:	464a      	mov	r2, r9
 8006974:	3901      	subs	r1, #1
 8006976:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800697a:	910d      	str	r1, [sp, #52]	; 0x34
 800697c:	f7ff ff1b 	bl	80067b6 <__exponent>
 8006980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006982:	4682      	mov	sl, r0
 8006984:	1813      	adds	r3, r2, r0
 8006986:	2a01      	cmp	r2, #1
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	dc02      	bgt.n	8006992 <_printf_float+0x15e>
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	07d2      	lsls	r2, r2, #31
 8006990:	d501      	bpl.n	8006996 <_printf_float+0x162>
 8006992:	3301      	adds	r3, #1
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800699a:	2b00      	cmp	r3, #0
 800699c:	d09b      	beq.n	80068d6 <_printf_float+0xa2>
 800699e:	232d      	movs	r3, #45	; 0x2d
 80069a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a4:	e797      	b.n	80068d6 <_printf_float+0xa2>
 80069a6:	2947      	cmp	r1, #71	; 0x47
 80069a8:	d1bc      	bne.n	8006924 <_printf_float+0xf0>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ba      	bne.n	8006924 <_printf_float+0xf0>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e7b7      	b.n	8006922 <_printf_float+0xee>
 80069b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80069b6:	d118      	bne.n	80069ea <_printf_float+0x1b6>
 80069b8:	2900      	cmp	r1, #0
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	dd0b      	ble.n	80069d6 <_printf_float+0x1a2>
 80069be:	6121      	str	r1, [r4, #16]
 80069c0:	b913      	cbnz	r3, 80069c8 <_printf_float+0x194>
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	07d0      	lsls	r0, r2, #31
 80069c6:	d502      	bpl.n	80069ce <_printf_float+0x19a>
 80069c8:	3301      	adds	r3, #1
 80069ca:	440b      	add	r3, r1
 80069cc:	6123      	str	r3, [r4, #16]
 80069ce:	f04f 0a00 	mov.w	sl, #0
 80069d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069d4:	e7df      	b.n	8006996 <_printf_float+0x162>
 80069d6:	b913      	cbnz	r3, 80069de <_printf_float+0x1aa>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	07d2      	lsls	r2, r2, #31
 80069dc:	d501      	bpl.n	80069e2 <_printf_float+0x1ae>
 80069de:	3302      	adds	r3, #2
 80069e0:	e7f4      	b.n	80069cc <_printf_float+0x198>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f2      	b.n	80069cc <_printf_float+0x198>
 80069e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80069ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ec:	4299      	cmp	r1, r3
 80069ee:	db05      	blt.n	80069fc <_printf_float+0x1c8>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	6121      	str	r1, [r4, #16]
 80069f4:	07d8      	lsls	r0, r3, #31
 80069f6:	d5ea      	bpl.n	80069ce <_printf_float+0x19a>
 80069f8:	1c4b      	adds	r3, r1, #1
 80069fa:	e7e7      	b.n	80069cc <_printf_float+0x198>
 80069fc:	2900      	cmp	r1, #0
 80069fe:	bfcc      	ite	gt
 8006a00:	2201      	movgt	r2, #1
 8006a02:	f1c1 0202 	rsble	r2, r1, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	e7e0      	b.n	80069cc <_printf_float+0x198>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	055a      	lsls	r2, r3, #21
 8006a0e:	d407      	bmi.n	8006a20 <_printf_float+0x1ec>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	4642      	mov	r2, r8
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d12b      	bne.n	8006a76 <_printf_float+0x242>
 8006a1e:	e764      	b.n	80068ea <_printf_float+0xb6>
 8006a20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a24:	f240 80dd 	bls.w	8006be2 <_printf_float+0x3ae>
 8006a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f7f9 ffd2 	bl	80009d8 <__aeabi_dcmpeq>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d033      	beq.n	8006aa0 <_printf_float+0x26c>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	4a35      	ldr	r2, [pc, #212]	; (8006b14 <_printf_float+0x2e0>)
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f af51 	beq.w	80068ea <_printf_float+0xb6>
 8006a48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	db02      	blt.n	8006a56 <_printf_float+0x222>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	07d8      	lsls	r0, r3, #31
 8006a54:	d50f      	bpl.n	8006a76 <_printf_float+0x242>
 8006a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f af42 	beq.w	80068ea <_printf_float+0xb6>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	f104 091a 	add.w	r9, r4, #26
 8006a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a70:	3b01      	subs	r3, #1
 8006a72:	4543      	cmp	r3, r8
 8006a74:	dc09      	bgt.n	8006a8a <_printf_float+0x256>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	079b      	lsls	r3, r3, #30
 8006a7a:	f100 8102 	bmi.w	8006c82 <_printf_float+0x44e>
 8006a7e:	68e0      	ldr	r0, [r4, #12]
 8006a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a82:	4298      	cmp	r0, r3
 8006a84:	bfb8      	it	lt
 8006a86:	4618      	movlt	r0, r3
 8006a88:	e731      	b.n	80068ee <_printf_float+0xba>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	464a      	mov	r2, r9
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f af28 	beq.w	80068ea <_printf_float+0xb6>
 8006a9a:	f108 0801 	add.w	r8, r8, #1
 8006a9e:	e7e6      	b.n	8006a6e <_printf_float+0x23a>
 8006aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dc38      	bgt.n	8006b18 <_printf_float+0x2e4>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <_printf_float+0x2e0>)
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f af1a 	beq.w	80068ea <_printf_float+0xb6>
 8006ab6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d102      	bne.n	8006ac4 <_printf_float+0x290>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	07d9      	lsls	r1, r3, #31
 8006ac2:	d5d8      	bpl.n	8006a76 <_printf_float+0x242>
 8006ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f af0b 	beq.w	80068ea <_printf_float+0xb6>
 8006ad4:	f04f 0900 	mov.w	r9, #0
 8006ad8:	f104 0a1a 	add.w	sl, r4, #26
 8006adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ade:	425b      	negs	r3, r3
 8006ae0:	454b      	cmp	r3, r9
 8006ae2:	dc01      	bgt.n	8006ae8 <_printf_float+0x2b4>
 8006ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae6:	e794      	b.n	8006a12 <_printf_float+0x1de>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	4652      	mov	r2, sl
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f aef9 	beq.w	80068ea <_printf_float+0xb6>
 8006af8:	f109 0901 	add.w	r9, r9, #1
 8006afc:	e7ee      	b.n	8006adc <_printf_float+0x2a8>
 8006afe:	bf00      	nop
 8006b00:	7fefffff 	.word	0x7fefffff
 8006b04:	08009284 	.word	0x08009284
 8006b08:	08009288 	.word	0x08009288
 8006b0c:	08009290 	.word	0x08009290
 8006b10:	0800928c 	.word	0x0800928c
 8006b14:	08009294 	.word	0x08009294
 8006b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	bfa8      	it	ge
 8006b20:	461a      	movge	r2, r3
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	4691      	mov	r9, r2
 8006b26:	dc37      	bgt.n	8006b98 <_printf_float+0x364>
 8006b28:	f04f 0b00 	mov.w	fp, #0
 8006b2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b30:	f104 021a 	add.w	r2, r4, #26
 8006b34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006b38:	ebaa 0309 	sub.w	r3, sl, r9
 8006b3c:	455b      	cmp	r3, fp
 8006b3e:	dc33      	bgt.n	8006ba8 <_printf_float+0x374>
 8006b40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b44:	429a      	cmp	r2, r3
 8006b46:	db3b      	blt.n	8006bc0 <_printf_float+0x38c>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	07da      	lsls	r2, r3, #31
 8006b4c:	d438      	bmi.n	8006bc0 <_printf_float+0x38c>
 8006b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b52:	eba3 020a 	sub.w	r2, r3, sl
 8006b56:	eba3 0901 	sub.w	r9, r3, r1
 8006b5a:	4591      	cmp	r9, r2
 8006b5c:	bfa8      	it	ge
 8006b5e:	4691      	movge	r9, r2
 8006b60:	f1b9 0f00 	cmp.w	r9, #0
 8006b64:	dc34      	bgt.n	8006bd0 <_printf_float+0x39c>
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b6e:	f104 0a1a 	add.w	sl, r4, #26
 8006b72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	eba3 0309 	sub.w	r3, r3, r9
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	f77f af7a 	ble.w	8006a76 <_printf_float+0x242>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4652      	mov	r2, sl
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f aeac 	beq.w	80068ea <_printf_float+0xb6>
 8006b92:	f108 0801 	add.w	r8, r8, #1
 8006b96:	e7ec      	b.n	8006b72 <_printf_float+0x33e>
 8006b98:	4613      	mov	r3, r2
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	47b8      	blx	r7
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d1c0      	bne.n	8006b28 <_printf_float+0x2f4>
 8006ba6:	e6a0      	b.n	80068ea <_printf_float+0xb6>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4631      	mov	r1, r6
 8006bac:	4628      	mov	r0, r5
 8006bae:	920b      	str	r2, [sp, #44]	; 0x2c
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f ae99 	beq.w	80068ea <_printf_float+0xb6>
 8006bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bba:	f10b 0b01 	add.w	fp, fp, #1
 8006bbe:	e7b9      	b.n	8006b34 <_printf_float+0x300>
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d1bf      	bne.n	8006b4e <_printf_float+0x31a>
 8006bce:	e68c      	b.n	80068ea <_printf_float+0xb6>
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	eb08 020a 	add.w	r2, r8, sl
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d1c2      	bne.n	8006b66 <_printf_float+0x332>
 8006be0:	e683      	b.n	80068ea <_printf_float+0xb6>
 8006be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006be4:	2a01      	cmp	r2, #1
 8006be6:	dc01      	bgt.n	8006bec <_printf_float+0x3b8>
 8006be8:	07db      	lsls	r3, r3, #31
 8006bea:	d537      	bpl.n	8006c5c <_printf_float+0x428>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4642      	mov	r2, r8
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f ae77 	beq.w	80068ea <_printf_float+0xb6>
 8006bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f ae6f 	beq.w	80068ea <_printf_float+0xb6>
 8006c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	f7f9 fee0 	bl	80009d8 <__aeabi_dcmpeq>
 8006c18:	b9d8      	cbnz	r0, 8006c52 <_printf_float+0x41e>
 8006c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c1c:	f108 0201 	add.w	r2, r8, #1
 8006c20:	3b01      	subs	r3, #1
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d10e      	bne.n	8006c4a <_printf_float+0x416>
 8006c2c:	e65d      	b.n	80068ea <_printf_float+0xb6>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	464a      	mov	r2, r9
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae56 	beq.w	80068ea <_printf_float+0xb6>
 8006c3e:	f108 0801 	add.w	r8, r8, #1
 8006c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4543      	cmp	r3, r8
 8006c48:	dcf1      	bgt.n	8006c2e <_printf_float+0x3fa>
 8006c4a:	4653      	mov	r3, sl
 8006c4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c50:	e6e0      	b.n	8006a14 <_printf_float+0x1e0>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	f104 091a 	add.w	r9, r4, #26
 8006c5a:	e7f2      	b.n	8006c42 <_printf_float+0x40e>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	4642      	mov	r2, r8
 8006c60:	e7df      	b.n	8006c22 <_printf_float+0x3ee>
 8006c62:	2301      	movs	r3, #1
 8006c64:	464a      	mov	r2, r9
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae3c 	beq.w	80068ea <_printf_float+0xb6>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c7a:	1a5b      	subs	r3, r3, r1
 8006c7c:	4543      	cmp	r3, r8
 8006c7e:	dcf0      	bgt.n	8006c62 <_printf_float+0x42e>
 8006c80:	e6fd      	b.n	8006a7e <_printf_float+0x24a>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	f104 0919 	add.w	r9, r4, #25
 8006c8a:	e7f4      	b.n	8006c76 <_printf_float+0x442>

08006c8c <_printf_common>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	4616      	mov	r6, r2
 8006c92:	4699      	mov	r9, r3
 8006c94:	688a      	ldr	r2, [r1, #8]
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	4607      	mov	r7, r0
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	bfb8      	it	lt
 8006c9e:	4613      	movlt	r3, r2
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cac:	b10a      	cbz	r2, 8006cb2 <_printf_common+0x26>
 8006cae:	3301      	adds	r3, #1
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	0699      	lsls	r1, r3, #26
 8006cb6:	bf42      	ittt	mi
 8006cb8:	6833      	ldrmi	r3, [r6, #0]
 8006cba:	3302      	addmi	r3, #2
 8006cbc:	6033      	strmi	r3, [r6, #0]
 8006cbe:	6825      	ldr	r5, [r4, #0]
 8006cc0:	f015 0506 	ands.w	r5, r5, #6
 8006cc4:	d106      	bne.n	8006cd4 <_printf_common+0x48>
 8006cc6:	f104 0a19 	add.w	sl, r4, #25
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	6832      	ldr	r2, [r6, #0]
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	dc28      	bgt.n	8006d26 <_printf_common+0x9a>
 8006cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cd8:	1e13      	subs	r3, r2, #0
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	bf18      	it	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	0692      	lsls	r2, r2, #26
 8006ce2:	d42d      	bmi.n	8006d40 <_printf_common+0xb4>
 8006ce4:	4649      	mov	r1, r9
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d020      	beq.n	8006d34 <_printf_common+0xa8>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	68e5      	ldr	r5, [r4, #12]
 8006cf6:	f003 0306 	and.w	r3, r3, #6
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	bf18      	it	ne
 8006cfe:	2500      	movne	r5, #0
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	f04f 0600 	mov.w	r6, #0
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	bf08      	it	eq
 8006d0a:	1aad      	subeq	r5, r5, r2
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	bf08      	it	eq
 8006d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bfc4      	itt	gt
 8006d18:	1a9b      	subgt	r3, r3, r2
 8006d1a:	18ed      	addgt	r5, r5, r3
 8006d1c:	341a      	adds	r4, #26
 8006d1e:	42b5      	cmp	r5, r6
 8006d20:	d11a      	bne.n	8006d58 <_printf_common+0xcc>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e008      	b.n	8006d38 <_printf_common+0xac>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4652      	mov	r2, sl
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	47c0      	blx	r8
 8006d30:	3001      	adds	r0, #1
 8006d32:	d103      	bne.n	8006d3c <_printf_common+0xb0>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	e7c4      	b.n	8006cca <_printf_common+0x3e>
 8006d40:	2030      	movs	r0, #48	; 0x30
 8006d42:	18e1      	adds	r1, r4, r3
 8006d44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d4e:	4422      	add	r2, r4
 8006d50:	3302      	adds	r3, #2
 8006d52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d56:	e7c5      	b.n	8006ce4 <_printf_common+0x58>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c0      	blx	r8
 8006d62:	3001      	adds	r0, #1
 8006d64:	d0e6      	beq.n	8006d34 <_printf_common+0xa8>
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7d9      	b.n	8006d1e <_printf_common+0x92>
	...

08006d6c <_printf_i>:
 8006d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	7e0f      	ldrb	r7, [r1, #24]
 8006d72:	4691      	mov	r9, r2
 8006d74:	2f78      	cmp	r7, #120	; 0x78
 8006d76:	4680      	mov	r8, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	469a      	mov	sl, r3
 8006d7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d82:	d807      	bhi.n	8006d94 <_printf_i+0x28>
 8006d84:	2f62      	cmp	r7, #98	; 0x62
 8006d86:	d80a      	bhi.n	8006d9e <_printf_i+0x32>
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	f000 80d9 	beq.w	8006f40 <_printf_i+0x1d4>
 8006d8e:	2f58      	cmp	r7, #88	; 0x58
 8006d90:	f000 80a4 	beq.w	8006edc <_printf_i+0x170>
 8006d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d9c:	e03a      	b.n	8006e14 <_printf_i+0xa8>
 8006d9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006da2:	2b15      	cmp	r3, #21
 8006da4:	d8f6      	bhi.n	8006d94 <_printf_i+0x28>
 8006da6:	a101      	add	r1, pc, #4	; (adr r1, 8006dac <_printf_i+0x40>)
 8006da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dac:	08006e05 	.word	0x08006e05
 8006db0:	08006e19 	.word	0x08006e19
 8006db4:	08006d95 	.word	0x08006d95
 8006db8:	08006d95 	.word	0x08006d95
 8006dbc:	08006d95 	.word	0x08006d95
 8006dc0:	08006d95 	.word	0x08006d95
 8006dc4:	08006e19 	.word	0x08006e19
 8006dc8:	08006d95 	.word	0x08006d95
 8006dcc:	08006d95 	.word	0x08006d95
 8006dd0:	08006d95 	.word	0x08006d95
 8006dd4:	08006d95 	.word	0x08006d95
 8006dd8:	08006f27 	.word	0x08006f27
 8006ddc:	08006e49 	.word	0x08006e49
 8006de0:	08006f09 	.word	0x08006f09
 8006de4:	08006d95 	.word	0x08006d95
 8006de8:	08006d95 	.word	0x08006d95
 8006dec:	08006f49 	.word	0x08006f49
 8006df0:	08006d95 	.word	0x08006d95
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006d95 	.word	0x08006d95
 8006dfc:	08006d95 	.word	0x08006d95
 8006e00:	08006f11 	.word	0x08006f11
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	602a      	str	r2, [r5, #0]
 8006e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0a4      	b.n	8006f62 <_printf_i+0x1f6>
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	6829      	ldr	r1, [r5, #0]
 8006e1c:	0606      	lsls	r6, r0, #24
 8006e1e:	f101 0304 	add.w	r3, r1, #4
 8006e22:	d50a      	bpl.n	8006e3a <_printf_i+0xce>
 8006e24:	680e      	ldr	r6, [r1, #0]
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	2e00      	cmp	r6, #0
 8006e2a:	da03      	bge.n	8006e34 <_printf_i+0xc8>
 8006e2c:	232d      	movs	r3, #45	; 0x2d
 8006e2e:	4276      	negs	r6, r6
 8006e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e34:	230a      	movs	r3, #10
 8006e36:	485e      	ldr	r0, [pc, #376]	; (8006fb0 <_printf_i+0x244>)
 8006e38:	e019      	b.n	8006e6e <_printf_i+0x102>
 8006e3a:	680e      	ldr	r6, [r1, #0]
 8006e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e40:	602b      	str	r3, [r5, #0]
 8006e42:	bf18      	it	ne
 8006e44:	b236      	sxthne	r6, r6
 8006e46:	e7ef      	b.n	8006e28 <_printf_i+0xbc>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	6029      	str	r1, [r5, #0]
 8006e50:	0601      	lsls	r1, r0, #24
 8006e52:	d501      	bpl.n	8006e58 <_printf_i+0xec>
 8006e54:	681e      	ldr	r6, [r3, #0]
 8006e56:	e002      	b.n	8006e5e <_printf_i+0xf2>
 8006e58:	0646      	lsls	r6, r0, #25
 8006e5a:	d5fb      	bpl.n	8006e54 <_printf_i+0xe8>
 8006e5c:	881e      	ldrh	r6, [r3, #0]
 8006e5e:	2f6f      	cmp	r7, #111	; 0x6f
 8006e60:	bf0c      	ite	eq
 8006e62:	2308      	moveq	r3, #8
 8006e64:	230a      	movne	r3, #10
 8006e66:	4852      	ldr	r0, [pc, #328]	; (8006fb0 <_printf_i+0x244>)
 8006e68:	2100      	movs	r1, #0
 8006e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e6e:	6865      	ldr	r5, [r4, #4]
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	bfa8      	it	ge
 8006e74:	6821      	ldrge	r1, [r4, #0]
 8006e76:	60a5      	str	r5, [r4, #8]
 8006e78:	bfa4      	itt	ge
 8006e7a:	f021 0104 	bicge.w	r1, r1, #4
 8006e7e:	6021      	strge	r1, [r4, #0]
 8006e80:	b90e      	cbnz	r6, 8006e86 <_printf_i+0x11a>
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	d04d      	beq.n	8006f22 <_printf_i+0x1b6>
 8006e86:	4615      	mov	r5, r2
 8006e88:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e8c:	fb03 6711 	mls	r7, r3, r1, r6
 8006e90:	5dc7      	ldrb	r7, [r0, r7]
 8006e92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e96:	4637      	mov	r7, r6
 8006e98:	42bb      	cmp	r3, r7
 8006e9a:	460e      	mov	r6, r1
 8006e9c:	d9f4      	bls.n	8006e88 <_printf_i+0x11c>
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d10b      	bne.n	8006eba <_printf_i+0x14e>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	07de      	lsls	r6, r3, #31
 8006ea6:	d508      	bpl.n	8006eba <_printf_i+0x14e>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	6861      	ldr	r1, [r4, #4]
 8006eac:	4299      	cmp	r1, r3
 8006eae:	bfde      	ittt	le
 8006eb0:	2330      	movle	r3, #48	; 0x30
 8006eb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006eba:	1b52      	subs	r2, r2, r5
 8006ebc:	6122      	str	r2, [r4, #16]
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f8cd a000 	str.w	sl, [sp]
 8006ec8:	aa03      	add	r2, sp, #12
 8006eca:	f7ff fedf 	bl	8006c8c <_printf_common>
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d14c      	bne.n	8006f6c <_printf_i+0x200>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	b004      	add	sp, #16
 8006ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006edc:	4834      	ldr	r0, [pc, #208]	; (8006fb0 <_printf_i+0x244>)
 8006ede:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ee2:	6829      	ldr	r1, [r5, #0]
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eea:	6029      	str	r1, [r5, #0]
 8006eec:	061d      	lsls	r5, r3, #24
 8006eee:	d514      	bpl.n	8006f1a <_printf_i+0x1ae>
 8006ef0:	07df      	lsls	r7, r3, #31
 8006ef2:	bf44      	itt	mi
 8006ef4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef8:	6023      	strmi	r3, [r4, #0]
 8006efa:	b91e      	cbnz	r6, 8006f04 <_printf_i+0x198>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	f023 0320 	bic.w	r3, r3, #32
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	2310      	movs	r3, #16
 8006f06:	e7af      	b.n	8006e68 <_printf_i+0xfc>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	f043 0320 	orr.w	r3, r3, #32
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	2378      	movs	r3, #120	; 0x78
 8006f12:	4828      	ldr	r0, [pc, #160]	; (8006fb4 <_printf_i+0x248>)
 8006f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f18:	e7e3      	b.n	8006ee2 <_printf_i+0x176>
 8006f1a:	0659      	lsls	r1, r3, #25
 8006f1c:	bf48      	it	mi
 8006f1e:	b2b6      	uxthmi	r6, r6
 8006f20:	e7e6      	b.n	8006ef0 <_printf_i+0x184>
 8006f22:	4615      	mov	r5, r2
 8006f24:	e7bb      	b.n	8006e9e <_printf_i+0x132>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	6826      	ldr	r6, [r4, #0]
 8006f2a:	1d18      	adds	r0, r3, #4
 8006f2c:	6961      	ldr	r1, [r4, #20]
 8006f2e:	6028      	str	r0, [r5, #0]
 8006f30:	0635      	lsls	r5, r6, #24
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	d501      	bpl.n	8006f3a <_printf_i+0x1ce>
 8006f36:	6019      	str	r1, [r3, #0]
 8006f38:	e002      	b.n	8006f40 <_printf_i+0x1d4>
 8006f3a:	0670      	lsls	r0, r6, #25
 8006f3c:	d5fb      	bpl.n	8006f36 <_printf_i+0x1ca>
 8006f3e:	8019      	strh	r1, [r3, #0]
 8006f40:	2300      	movs	r3, #0
 8006f42:	4615      	mov	r5, r2
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	e7ba      	b.n	8006ebe <_printf_i+0x152>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	1d1a      	adds	r2, r3, #4
 8006f4e:	602a      	str	r2, [r5, #0]
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	6862      	ldr	r2, [r4, #4]
 8006f54:	4628      	mov	r0, r5
 8006f56:	f001 f81d 	bl	8007f94 <memchr>
 8006f5a:	b108      	cbz	r0, 8006f60 <_printf_i+0x1f4>
 8006f5c:	1b40      	subs	r0, r0, r5
 8006f5e:	6060      	str	r0, [r4, #4]
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	6123      	str	r3, [r4, #16]
 8006f64:	2300      	movs	r3, #0
 8006f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6a:	e7a8      	b.n	8006ebe <_printf_i+0x152>
 8006f6c:	462a      	mov	r2, r5
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	47d0      	blx	sl
 8006f76:	3001      	adds	r0, #1
 8006f78:	d0ab      	beq.n	8006ed2 <_printf_i+0x166>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	079b      	lsls	r3, r3, #30
 8006f7e:	d413      	bmi.n	8006fa8 <_printf_i+0x23c>
 8006f80:	68e0      	ldr	r0, [r4, #12]
 8006f82:	9b03      	ldr	r3, [sp, #12]
 8006f84:	4298      	cmp	r0, r3
 8006f86:	bfb8      	it	lt
 8006f88:	4618      	movlt	r0, r3
 8006f8a:	e7a4      	b.n	8006ed6 <_printf_i+0x16a>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4632      	mov	r2, r6
 8006f90:	4649      	mov	r1, r9
 8006f92:	4640      	mov	r0, r8
 8006f94:	47d0      	blx	sl
 8006f96:	3001      	adds	r0, #1
 8006f98:	d09b      	beq.n	8006ed2 <_printf_i+0x166>
 8006f9a:	3501      	adds	r5, #1
 8006f9c:	68e3      	ldr	r3, [r4, #12]
 8006f9e:	9903      	ldr	r1, [sp, #12]
 8006fa0:	1a5b      	subs	r3, r3, r1
 8006fa2:	42ab      	cmp	r3, r5
 8006fa4:	dcf2      	bgt.n	8006f8c <_printf_i+0x220>
 8006fa6:	e7eb      	b.n	8006f80 <_printf_i+0x214>
 8006fa8:	2500      	movs	r5, #0
 8006faa:	f104 0619 	add.w	r6, r4, #25
 8006fae:	e7f5      	b.n	8006f9c <_printf_i+0x230>
 8006fb0:	08009296 	.word	0x08009296
 8006fb4:	080092a7 	.word	0x080092a7

08006fb8 <_sbrk_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4d05      	ldr	r5, [pc, #20]	; (8006fd4 <_sbrk_r+0x1c>)
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	f7fb fc8c 	bl	80028e0 <_sbrk>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_sbrk_r+0x1a>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_sbrk_r+0x1a>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200007a4 	.word	0x200007a4

08006fd8 <siprintf>:
 8006fd8:	b40e      	push	{r1, r2, r3}
 8006fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fde:	b500      	push	{lr}
 8006fe0:	b09c      	sub	sp, #112	; 0x70
 8006fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8006fe4:	9002      	str	r0, [sp, #8]
 8006fe6:	9006      	str	r0, [sp, #24]
 8006fe8:	9107      	str	r1, [sp, #28]
 8006fea:	9104      	str	r1, [sp, #16]
 8006fec:	4808      	ldr	r0, [pc, #32]	; (8007010 <siprintf+0x38>)
 8006fee:	4909      	ldr	r1, [pc, #36]	; (8007014 <siprintf+0x3c>)
 8006ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff4:	9105      	str	r1, [sp, #20]
 8006ff6:	6800      	ldr	r0, [r0, #0]
 8006ff8:	a902      	add	r1, sp, #8
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	f001 fc1e 	bl	800883c <_svfiprintf_r>
 8007000:	2200      	movs	r2, #0
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	b01c      	add	sp, #112	; 0x70
 8007008:	f85d eb04 	ldr.w	lr, [sp], #4
 800700c:	b003      	add	sp, #12
 800700e:	4770      	bx	lr
 8007010:	2000000c 	.word	0x2000000c
 8007014:	ffff0208 	.word	0xffff0208

08007018 <__sread>:
 8007018:	b510      	push	{r4, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	f001 fd0c 	bl	8008a3c <_read_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	bfab      	itete	ge
 8007028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702a:	89a3      	ldrhlt	r3, [r4, #12]
 800702c:	181b      	addge	r3, r3, r0
 800702e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007032:	bfac      	ite	ge
 8007034:	6563      	strge	r3, [r4, #84]	; 0x54
 8007036:	81a3      	strhlt	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__swrite>:
 800703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	461f      	mov	r7, r3
 8007040:	898b      	ldrh	r3, [r1, #12]
 8007042:	4605      	mov	r5, r0
 8007044:	05db      	lsls	r3, r3, #23
 8007046:	460c      	mov	r4, r1
 8007048:	4616      	mov	r6, r2
 800704a:	d505      	bpl.n	8007058 <__swrite+0x1e>
 800704c:	2302      	movs	r3, #2
 800704e:	2200      	movs	r2, #0
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	f000 ff84 	bl	8007f60 <_lseek_r>
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	4632      	mov	r2, r6
 800705c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007060:	81a3      	strh	r3, [r4, #12]
 8007062:	4628      	mov	r0, r5
 8007064:	463b      	mov	r3, r7
 8007066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800706a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	f000 b817 	b.w	80070a0 <_write_r>

08007072 <__sseek>:
 8007072:	b510      	push	{r4, lr}
 8007074:	460c      	mov	r4, r1
 8007076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707a:	f000 ff71 	bl	8007f60 <_lseek_r>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	bf15      	itete	ne
 8007084:	6560      	strne	r0, [r4, #84]	; 0x54
 8007086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800708a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800708e:	81a3      	strheq	r3, [r4, #12]
 8007090:	bf18      	it	ne
 8007092:	81a3      	strhne	r3, [r4, #12]
 8007094:	bd10      	pop	{r4, pc}

08007096 <__sclose>:
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	f000 b813 	b.w	80070c4 <_close_r>
	...

080070a0 <_write_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	2200      	movs	r2, #0
 80070aa:	4d05      	ldr	r5, [pc, #20]	; (80070c0 <_write_r+0x20>)
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fb fbca 	bl	8002848 <_write>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_write_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_write_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	200007a4 	.word	0x200007a4

080070c4 <_close_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	2300      	movs	r3, #0
 80070c8:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <_close_r+0x1c>)
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	f7fb fbd6 	bl	8002880 <_close>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_close_r+0x1a>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_close_r+0x1a>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	200007a4 	.word	0x200007a4

080070e4 <quorem>:
 80070e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	6903      	ldr	r3, [r0, #16]
 80070ea:	690c      	ldr	r4, [r1, #16]
 80070ec:	4607      	mov	r7, r0
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	f2c0 8082 	blt.w	80071f8 <quorem+0x114>
 80070f4:	3c01      	subs	r4, #1
 80070f6:	f100 0514 	add.w	r5, r0, #20
 80070fa:	f101 0814 	add.w	r8, r1, #20
 80070fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710c:	3301      	adds	r3, #1
 800710e:	429a      	cmp	r2, r3
 8007110:	fbb2 f6f3 	udiv	r6, r2, r3
 8007114:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800711c:	d331      	bcc.n	8007182 <quorem+0x9e>
 800711e:	f04f 0e00 	mov.w	lr, #0
 8007122:	4640      	mov	r0, r8
 8007124:	46ac      	mov	ip, r5
 8007126:	46f2      	mov	sl, lr
 8007128:	f850 2b04 	ldr.w	r2, [r0], #4
 800712c:	b293      	uxth	r3, r2
 800712e:	fb06 e303 	mla	r3, r6, r3, lr
 8007132:	0c12      	lsrs	r2, r2, #16
 8007134:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007138:	b29b      	uxth	r3, r3
 800713a:	fb06 e202 	mla	r2, r6, r2, lr
 800713e:	ebaa 0303 	sub.w	r3, sl, r3
 8007142:	f8dc a000 	ldr.w	sl, [ip]
 8007146:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800714a:	fa1f fa8a 	uxth.w	sl, sl
 800714e:	4453      	add	r3, sl
 8007150:	f8dc a000 	ldr.w	sl, [ip]
 8007154:	b292      	uxth	r2, r2
 8007156:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800715a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800715e:	b29b      	uxth	r3, r3
 8007160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007164:	4581      	cmp	r9, r0
 8007166:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800716a:	f84c 3b04 	str.w	r3, [ip], #4
 800716e:	d2db      	bcs.n	8007128 <quorem+0x44>
 8007170:	f855 300b 	ldr.w	r3, [r5, fp]
 8007174:	b92b      	cbnz	r3, 8007182 <quorem+0x9e>
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	3b04      	subs	r3, #4
 800717a:	429d      	cmp	r5, r3
 800717c:	461a      	mov	r2, r3
 800717e:	d32f      	bcc.n	80071e0 <quorem+0xfc>
 8007180:	613c      	str	r4, [r7, #16]
 8007182:	4638      	mov	r0, r7
 8007184:	f001 f99e 	bl	80084c4 <__mcmp>
 8007188:	2800      	cmp	r0, #0
 800718a:	db25      	blt.n	80071d8 <quorem+0xf4>
 800718c:	4628      	mov	r0, r5
 800718e:	f04f 0c00 	mov.w	ip, #0
 8007192:	3601      	adds	r6, #1
 8007194:	f858 1b04 	ldr.w	r1, [r8], #4
 8007198:	f8d0 e000 	ldr.w	lr, [r0]
 800719c:	b28b      	uxth	r3, r1
 800719e:	ebac 0303 	sub.w	r3, ip, r3
 80071a2:	fa1f f28e 	uxth.w	r2, lr
 80071a6:	4413      	add	r3, r2
 80071a8:	0c0a      	lsrs	r2, r1, #16
 80071aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071b8:	45c1      	cmp	r9, r8
 80071ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071be:	f840 3b04 	str.w	r3, [r0], #4
 80071c2:	d2e7      	bcs.n	8007194 <quorem+0xb0>
 80071c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071cc:	b922      	cbnz	r2, 80071d8 <quorem+0xf4>
 80071ce:	3b04      	subs	r3, #4
 80071d0:	429d      	cmp	r5, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	d30a      	bcc.n	80071ec <quorem+0x108>
 80071d6:	613c      	str	r4, [r7, #16]
 80071d8:	4630      	mov	r0, r6
 80071da:	b003      	add	sp, #12
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	3b04      	subs	r3, #4
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d1cb      	bne.n	8007180 <quorem+0x9c>
 80071e8:	3c01      	subs	r4, #1
 80071ea:	e7c6      	b.n	800717a <quorem+0x96>
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	3b04      	subs	r3, #4
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d1f0      	bne.n	80071d6 <quorem+0xf2>
 80071f4:	3c01      	subs	r4, #1
 80071f6:	e7eb      	b.n	80071d0 <quorem+0xec>
 80071f8:	2000      	movs	r0, #0
 80071fa:	e7ee      	b.n	80071da <quorem+0xf6>
 80071fc:	0000      	movs	r0, r0
	...

08007200 <_dtoa_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	4616      	mov	r6, r2
 8007206:	461f      	mov	r7, r3
 8007208:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800720a:	b099      	sub	sp, #100	; 0x64
 800720c:	4605      	mov	r5, r0
 800720e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007212:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007216:	b974      	cbnz	r4, 8007236 <_dtoa_r+0x36>
 8007218:	2010      	movs	r0, #16
 800721a:	f000 feb3 	bl	8007f84 <malloc>
 800721e:	4602      	mov	r2, r0
 8007220:	6268      	str	r0, [r5, #36]	; 0x24
 8007222:	b920      	cbnz	r0, 800722e <_dtoa_r+0x2e>
 8007224:	21ea      	movs	r1, #234	; 0xea
 8007226:	4ba8      	ldr	r3, [pc, #672]	; (80074c8 <_dtoa_r+0x2c8>)
 8007228:	48a8      	ldr	r0, [pc, #672]	; (80074cc <_dtoa_r+0x2cc>)
 800722a:	f001 fc19 	bl	8008a60 <__assert_func>
 800722e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007232:	6004      	str	r4, [r0, #0]
 8007234:	60c4      	str	r4, [r0, #12]
 8007236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	b151      	cbz	r1, 8007252 <_dtoa_r+0x52>
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	2301      	movs	r3, #1
 8007240:	4093      	lsls	r3, r2
 8007242:	604a      	str	r2, [r1, #4]
 8007244:	608b      	str	r3, [r1, #8]
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fefe 	bl	8008048 <_Bfree>
 800724c:	2200      	movs	r2, #0
 800724e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	1e3b      	subs	r3, r7, #0
 8007254:	bfaf      	iteee	ge
 8007256:	2300      	movge	r3, #0
 8007258:	2201      	movlt	r2, #1
 800725a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800725e:	9305      	strlt	r3, [sp, #20]
 8007260:	bfa8      	it	ge
 8007262:	f8c8 3000 	strge.w	r3, [r8]
 8007266:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800726a:	4b99      	ldr	r3, [pc, #612]	; (80074d0 <_dtoa_r+0x2d0>)
 800726c:	bfb8      	it	lt
 800726e:	f8c8 2000 	strlt.w	r2, [r8]
 8007272:	ea33 0309 	bics.w	r3, r3, r9
 8007276:	d119      	bne.n	80072ac <_dtoa_r+0xac>
 8007278:	f242 730f 	movw	r3, #9999	; 0x270f
 800727c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007284:	4333      	orrs	r3, r6
 8007286:	f000 857f 	beq.w	8007d88 <_dtoa_r+0xb88>
 800728a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800728c:	b953      	cbnz	r3, 80072a4 <_dtoa_r+0xa4>
 800728e:	4b91      	ldr	r3, [pc, #580]	; (80074d4 <_dtoa_r+0x2d4>)
 8007290:	e022      	b.n	80072d8 <_dtoa_r+0xd8>
 8007292:	4b91      	ldr	r3, [pc, #580]	; (80074d8 <_dtoa_r+0x2d8>)
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	3308      	adds	r3, #8
 8007298:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	9803      	ldr	r0, [sp, #12]
 800729e:	b019      	add	sp, #100	; 0x64
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <_dtoa_r+0x2d4>)
 80072a6:	9303      	str	r3, [sp, #12]
 80072a8:	3303      	adds	r3, #3
 80072aa:	e7f5      	b.n	8007298 <_dtoa_r+0x98>
 80072ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80072b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80072b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	f7f9 fb8c 	bl	80009d8 <__aeabi_dcmpeq>
 80072c0:	4680      	mov	r8, r0
 80072c2:	b158      	cbz	r0, 80072dc <_dtoa_r+0xdc>
 80072c4:	2301      	movs	r3, #1
 80072c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8558 	beq.w	8007d82 <_dtoa_r+0xb82>
 80072d2:	4882      	ldr	r0, [pc, #520]	; (80074dc <_dtoa_r+0x2dc>)
 80072d4:	6018      	str	r0, [r3, #0]
 80072d6:	1e43      	subs	r3, r0, #1
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	e7df      	b.n	800729c <_dtoa_r+0x9c>
 80072dc:	ab16      	add	r3, sp, #88	; 0x58
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	ab17      	add	r3, sp, #92	; 0x5c
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4628      	mov	r0, r5
 80072e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072ea:	f001 f993 	bl	8008614 <__d2b>
 80072ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072f2:	4683      	mov	fp, r0
 80072f4:	2c00      	cmp	r4, #0
 80072f6:	d07f      	beq.n	80073f8 <_dtoa_r+0x1f8>
 80072f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007306:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800730a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800730e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007312:	2200      	movs	r2, #0
 8007314:	4b72      	ldr	r3, [pc, #456]	; (80074e0 <_dtoa_r+0x2e0>)
 8007316:	f7f8 ff3f 	bl	8000198 <__aeabi_dsub>
 800731a:	a365      	add	r3, pc, #404	; (adr r3, 80074b0 <_dtoa_r+0x2b0>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f7f9 f8f2 	bl	8000508 <__aeabi_dmul>
 8007324:	a364      	add	r3, pc, #400	; (adr r3, 80074b8 <_dtoa_r+0x2b8>)
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	f7f8 ff37 	bl	800019c <__adddf3>
 800732e:	4606      	mov	r6, r0
 8007330:	4620      	mov	r0, r4
 8007332:	460f      	mov	r7, r1
 8007334:	f7f9 f87e 	bl	8000434 <__aeabi_i2d>
 8007338:	a361      	add	r3, pc, #388	; (adr r3, 80074c0 <_dtoa_r+0x2c0>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f7f9 f8e3 	bl	8000508 <__aeabi_dmul>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f8 ff27 	bl	800019c <__adddf3>
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	f7f9 fb89 	bl	8000a68 <__aeabi_d2iz>
 8007356:	2200      	movs	r2, #0
 8007358:	4682      	mov	sl, r0
 800735a:	2300      	movs	r3, #0
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fb44 	bl	80009ec <__aeabi_dcmplt>
 8007364:	b148      	cbz	r0, 800737a <_dtoa_r+0x17a>
 8007366:	4650      	mov	r0, sl
 8007368:	f7f9 f864 	bl	8000434 <__aeabi_i2d>
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	f7f9 fb32 	bl	80009d8 <__aeabi_dcmpeq>
 8007374:	b908      	cbnz	r0, 800737a <_dtoa_r+0x17a>
 8007376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800737a:	f1ba 0f16 	cmp.w	sl, #22
 800737e:	d858      	bhi.n	8007432 <_dtoa_r+0x232>
 8007380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007384:	4b57      	ldr	r3, [pc, #348]	; (80074e4 <_dtoa_r+0x2e4>)
 8007386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 fb2d 	bl	80009ec <__aeabi_dcmplt>
 8007392:	2800      	cmp	r0, #0
 8007394:	d04f      	beq.n	8007436 <_dtoa_r+0x236>
 8007396:	2300      	movs	r3, #0
 8007398:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739c:	930f      	str	r3, [sp, #60]	; 0x3c
 800739e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073a0:	1b1c      	subs	r4, r3, r4
 80073a2:	1e63      	subs	r3, r4, #1
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	bf49      	itett	mi
 80073a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80073ac:	2300      	movpl	r3, #0
 80073ae:	9306      	strmi	r3, [sp, #24]
 80073b0:	2300      	movmi	r3, #0
 80073b2:	bf54      	ite	pl
 80073b4:	9306      	strpl	r3, [sp, #24]
 80073b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80073b8:	f1ba 0f00 	cmp.w	sl, #0
 80073bc:	db3d      	blt.n	800743a <_dtoa_r+0x23a>
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80073c4:	4453      	add	r3, sl
 80073c6:	9309      	str	r3, [sp, #36]	; 0x24
 80073c8:	2300      	movs	r3, #0
 80073ca:	930a      	str	r3, [sp, #40]	; 0x28
 80073cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	f200 808c 	bhi.w	80074ec <_dtoa_r+0x2ec>
 80073d4:	2b05      	cmp	r3, #5
 80073d6:	bfc4      	itt	gt
 80073d8:	3b04      	subgt	r3, #4
 80073da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80073dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073de:	bfc8      	it	gt
 80073e0:	2400      	movgt	r4, #0
 80073e2:	f1a3 0302 	sub.w	r3, r3, #2
 80073e6:	bfd8      	it	le
 80073e8:	2401      	movle	r4, #1
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	f200 808a 	bhi.w	8007504 <_dtoa_r+0x304>
 80073f0:	e8df f003 	tbb	[pc, r3]
 80073f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80073f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80073fc:	441c      	add	r4, r3
 80073fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007402:	2b20      	cmp	r3, #32
 8007404:	bfc3      	ittte	gt
 8007406:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800740a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800740e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007412:	f1c3 0320 	rsble	r3, r3, #32
 8007416:	bfc6      	itte	gt
 8007418:	fa26 f000 	lsrgt.w	r0, r6, r0
 800741c:	4318      	orrgt	r0, r3
 800741e:	fa06 f003 	lslle.w	r0, r6, r3
 8007422:	f7f8 fff7 	bl	8000414 <__aeabi_ui2d>
 8007426:	2301      	movs	r3, #1
 8007428:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800742c:	3c01      	subs	r4, #1
 800742e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007430:	e76f      	b.n	8007312 <_dtoa_r+0x112>
 8007432:	2301      	movs	r3, #1
 8007434:	e7b2      	b.n	800739c <_dtoa_r+0x19c>
 8007436:	900f      	str	r0, [sp, #60]	; 0x3c
 8007438:	e7b1      	b.n	800739e <_dtoa_r+0x19e>
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	eba3 030a 	sub.w	r3, r3, sl
 8007440:	9306      	str	r3, [sp, #24]
 8007442:	f1ca 0300 	rsb	r3, sl, #0
 8007446:	930a      	str	r3, [sp, #40]	; 0x28
 8007448:	2300      	movs	r3, #0
 800744a:	930e      	str	r3, [sp, #56]	; 0x38
 800744c:	e7be      	b.n	80073cc <_dtoa_r+0x1cc>
 800744e:	2300      	movs	r3, #0
 8007450:	930b      	str	r3, [sp, #44]	; 0x2c
 8007452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007454:	2b00      	cmp	r3, #0
 8007456:	dc58      	bgt.n	800750a <_dtoa_r+0x30a>
 8007458:	f04f 0901 	mov.w	r9, #1
 800745c:	464b      	mov	r3, r9
 800745e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007462:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007466:	2200      	movs	r2, #0
 8007468:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800746a:	6042      	str	r2, [r0, #4]
 800746c:	2204      	movs	r2, #4
 800746e:	f102 0614 	add.w	r6, r2, #20
 8007472:	429e      	cmp	r6, r3
 8007474:	6841      	ldr	r1, [r0, #4]
 8007476:	d94e      	bls.n	8007516 <_dtoa_r+0x316>
 8007478:	4628      	mov	r0, r5
 800747a:	f000 fda5 	bl	8007fc8 <_Balloc>
 800747e:	9003      	str	r0, [sp, #12]
 8007480:	2800      	cmp	r0, #0
 8007482:	d14c      	bne.n	800751e <_dtoa_r+0x31e>
 8007484:	4602      	mov	r2, r0
 8007486:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <_dtoa_r+0x2e8>)
 800748c:	e6cc      	b.n	8007228 <_dtoa_r+0x28>
 800748e:	2301      	movs	r3, #1
 8007490:	e7de      	b.n	8007450 <_dtoa_r+0x250>
 8007492:	2300      	movs	r3, #0
 8007494:	930b      	str	r3, [sp, #44]	; 0x2c
 8007496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007498:	eb0a 0903 	add.w	r9, sl, r3
 800749c:	f109 0301 	add.w	r3, r9, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	9308      	str	r3, [sp, #32]
 80074a4:	bfb8      	it	lt
 80074a6:	2301      	movlt	r3, #1
 80074a8:	e7dd      	b.n	8007466 <_dtoa_r+0x266>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7f2      	b.n	8007494 <_dtoa_r+0x294>
 80074ae:	bf00      	nop
 80074b0:	636f4361 	.word	0x636f4361
 80074b4:	3fd287a7 	.word	0x3fd287a7
 80074b8:	8b60c8b3 	.word	0x8b60c8b3
 80074bc:	3fc68a28 	.word	0x3fc68a28
 80074c0:	509f79fb 	.word	0x509f79fb
 80074c4:	3fd34413 	.word	0x3fd34413
 80074c8:	080092c5 	.word	0x080092c5
 80074cc:	080092dc 	.word	0x080092dc
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	080092c1 	.word	0x080092c1
 80074d8:	080092b8 	.word	0x080092b8
 80074dc:	08009295 	.word	0x08009295
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	080093d0 	.word	0x080093d0
 80074e8:	08009337 	.word	0x08009337
 80074ec:	2401      	movs	r4, #1
 80074ee:	2300      	movs	r3, #0
 80074f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80074f2:	9322      	str	r3, [sp, #136]	; 0x88
 80074f4:	f04f 39ff 	mov.w	r9, #4294967295
 80074f8:	2200      	movs	r2, #0
 80074fa:	2312      	movs	r3, #18
 80074fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007500:	9223      	str	r2, [sp, #140]	; 0x8c
 8007502:	e7b0      	b.n	8007466 <_dtoa_r+0x266>
 8007504:	2301      	movs	r3, #1
 8007506:	930b      	str	r3, [sp, #44]	; 0x2c
 8007508:	e7f4      	b.n	80074f4 <_dtoa_r+0x2f4>
 800750a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800750e:	464b      	mov	r3, r9
 8007510:	f8cd 9020 	str.w	r9, [sp, #32]
 8007514:	e7a7      	b.n	8007466 <_dtoa_r+0x266>
 8007516:	3101      	adds	r1, #1
 8007518:	6041      	str	r1, [r0, #4]
 800751a:	0052      	lsls	r2, r2, #1
 800751c:	e7a7      	b.n	800746e <_dtoa_r+0x26e>
 800751e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007520:	9a03      	ldr	r2, [sp, #12]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	9b08      	ldr	r3, [sp, #32]
 8007526:	2b0e      	cmp	r3, #14
 8007528:	f200 80a8 	bhi.w	800767c <_dtoa_r+0x47c>
 800752c:	2c00      	cmp	r4, #0
 800752e:	f000 80a5 	beq.w	800767c <_dtoa_r+0x47c>
 8007532:	f1ba 0f00 	cmp.w	sl, #0
 8007536:	dd34      	ble.n	80075a2 <_dtoa_r+0x3a2>
 8007538:	4a9a      	ldr	r2, [pc, #616]	; (80077a4 <_dtoa_r+0x5a4>)
 800753a:	f00a 030f 	and.w	r3, sl, #15
 800753e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007542:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007546:	e9d3 3400 	ldrd	r3, r4, [r3]
 800754a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800754e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007552:	d016      	beq.n	8007582 <_dtoa_r+0x382>
 8007554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007558:	4b93      	ldr	r3, [pc, #588]	; (80077a8 <_dtoa_r+0x5a8>)
 800755a:	2703      	movs	r7, #3
 800755c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007560:	f7f9 f8fc 	bl	800075c <__aeabi_ddiv>
 8007564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007568:	f004 040f 	and.w	r4, r4, #15
 800756c:	4e8e      	ldr	r6, [pc, #568]	; (80077a8 <_dtoa_r+0x5a8>)
 800756e:	b954      	cbnz	r4, 8007586 <_dtoa_r+0x386>
 8007570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007578:	f7f9 f8f0 	bl	800075c <__aeabi_ddiv>
 800757c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007580:	e029      	b.n	80075d6 <_dtoa_r+0x3d6>
 8007582:	2702      	movs	r7, #2
 8007584:	e7f2      	b.n	800756c <_dtoa_r+0x36c>
 8007586:	07e1      	lsls	r1, r4, #31
 8007588:	d508      	bpl.n	800759c <_dtoa_r+0x39c>
 800758a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800758e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007592:	f7f8 ffb9 	bl	8000508 <__aeabi_dmul>
 8007596:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800759a:	3701      	adds	r7, #1
 800759c:	1064      	asrs	r4, r4, #1
 800759e:	3608      	adds	r6, #8
 80075a0:	e7e5      	b.n	800756e <_dtoa_r+0x36e>
 80075a2:	f000 80a5 	beq.w	80076f0 <_dtoa_r+0x4f0>
 80075a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075aa:	f1ca 0400 	rsb	r4, sl, #0
 80075ae:	4b7d      	ldr	r3, [pc, #500]	; (80077a4 <_dtoa_r+0x5a4>)
 80075b0:	f004 020f 	and.w	r2, r4, #15
 80075b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 ffa4 	bl	8000508 <__aeabi_dmul>
 80075c0:	2702      	movs	r7, #2
 80075c2:	2300      	movs	r3, #0
 80075c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c8:	4e77      	ldr	r6, [pc, #476]	; (80077a8 <_dtoa_r+0x5a8>)
 80075ca:	1124      	asrs	r4, r4, #4
 80075cc:	2c00      	cmp	r4, #0
 80075ce:	f040 8084 	bne.w	80076da <_dtoa_r+0x4da>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d2      	bne.n	800757c <_dtoa_r+0x37c>
 80075d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 808b 	beq.w	80076f4 <_dtoa_r+0x4f4>
 80075de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80075e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ea:	2200      	movs	r2, #0
 80075ec:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <_dtoa_r+0x5ac>)
 80075ee:	f7f9 f9fd 	bl	80009ec <__aeabi_dcmplt>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d07e      	beq.n	80076f4 <_dtoa_r+0x4f4>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d07b      	beq.n	80076f4 <_dtoa_r+0x4f4>
 80075fc:	f1b9 0f00 	cmp.w	r9, #0
 8007600:	dd38      	ble.n	8007674 <_dtoa_r+0x474>
 8007602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007606:	2200      	movs	r2, #0
 8007608:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <_dtoa_r+0x5b0>)
 800760a:	f7f8 ff7d 	bl	8000508 <__aeabi_dmul>
 800760e:	464c      	mov	r4, r9
 8007610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007614:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007618:	3701      	adds	r7, #1
 800761a:	4638      	mov	r0, r7
 800761c:	f7f8 ff0a 	bl	8000434 <__aeabi_i2d>
 8007620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007624:	f7f8 ff70 	bl	8000508 <__aeabi_dmul>
 8007628:	2200      	movs	r2, #0
 800762a:	4b62      	ldr	r3, [pc, #392]	; (80077b4 <_dtoa_r+0x5b4>)
 800762c:	f7f8 fdb6 	bl	800019c <__adddf3>
 8007630:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007634:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007638:	9611      	str	r6, [sp, #68]	; 0x44
 800763a:	2c00      	cmp	r4, #0
 800763c:	d15d      	bne.n	80076fa <_dtoa_r+0x4fa>
 800763e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007642:	2200      	movs	r2, #0
 8007644:	4b5c      	ldr	r3, [pc, #368]	; (80077b8 <_dtoa_r+0x5b8>)
 8007646:	f7f8 fda7 	bl	8000198 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007652:	4633      	mov	r3, r6
 8007654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007656:	f7f9 f9e7 	bl	8000a28 <__aeabi_dcmpgt>
 800765a:	2800      	cmp	r0, #0
 800765c:	f040 829c 	bne.w	8007b98 <_dtoa_r+0x998>
 8007660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007666:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800766a:	f7f9 f9bf 	bl	80009ec <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8290 	bne.w	8007b94 <_dtoa_r+0x994>
 8007674:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007678:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800767c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f2c0 8152 	blt.w	8007928 <_dtoa_r+0x728>
 8007684:	f1ba 0f0e 	cmp.w	sl, #14
 8007688:	f300 814e 	bgt.w	8007928 <_dtoa_r+0x728>
 800768c:	4b45      	ldr	r3, [pc, #276]	; (80077a4 <_dtoa_r+0x5a4>)
 800768e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007692:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007696:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800769a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800769c:	2b00      	cmp	r3, #0
 800769e:	f280 80db 	bge.w	8007858 <_dtoa_r+0x658>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f300 80d7 	bgt.w	8007858 <_dtoa_r+0x658>
 80076aa:	f040 8272 	bne.w	8007b92 <_dtoa_r+0x992>
 80076ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4b40      	ldr	r3, [pc, #256]	; (80077b8 <_dtoa_r+0x5b8>)
 80076b6:	f7f8 ff27 	bl	8000508 <__aeabi_dmul>
 80076ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076be:	f7f9 f9a9 	bl	8000a14 <__aeabi_dcmpge>
 80076c2:	9c08      	ldr	r4, [sp, #32]
 80076c4:	4626      	mov	r6, r4
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8248 	bne.w	8007b5c <_dtoa_r+0x95c>
 80076cc:	2331      	movs	r3, #49	; 0x31
 80076ce:	9f03      	ldr	r7, [sp, #12]
 80076d0:	f10a 0a01 	add.w	sl, sl, #1
 80076d4:	f807 3b01 	strb.w	r3, [r7], #1
 80076d8:	e244      	b.n	8007b64 <_dtoa_r+0x964>
 80076da:	07e2      	lsls	r2, r4, #31
 80076dc:	d505      	bpl.n	80076ea <_dtoa_r+0x4ea>
 80076de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076e2:	f7f8 ff11 	bl	8000508 <__aeabi_dmul>
 80076e6:	2301      	movs	r3, #1
 80076e8:	3701      	adds	r7, #1
 80076ea:	1064      	asrs	r4, r4, #1
 80076ec:	3608      	adds	r6, #8
 80076ee:	e76d      	b.n	80075cc <_dtoa_r+0x3cc>
 80076f0:	2702      	movs	r7, #2
 80076f2:	e770      	b.n	80075d6 <_dtoa_r+0x3d6>
 80076f4:	46d0      	mov	r8, sl
 80076f6:	9c08      	ldr	r4, [sp, #32]
 80076f8:	e78f      	b.n	800761a <_dtoa_r+0x41a>
 80076fa:	9903      	ldr	r1, [sp, #12]
 80076fc:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <_dtoa_r+0x5a4>)
 80076fe:	4421      	add	r1, r4
 8007700:	9112      	str	r1, [sp, #72]	; 0x48
 8007702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007708:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800770c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007710:	2900      	cmp	r1, #0
 8007712:	d055      	beq.n	80077c0 <_dtoa_r+0x5c0>
 8007714:	2000      	movs	r0, #0
 8007716:	4929      	ldr	r1, [pc, #164]	; (80077bc <_dtoa_r+0x5bc>)
 8007718:	f7f9 f820 	bl	800075c <__aeabi_ddiv>
 800771c:	463b      	mov	r3, r7
 800771e:	4632      	mov	r2, r6
 8007720:	f7f8 fd3a 	bl	8000198 <__aeabi_dsub>
 8007724:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007728:	9f03      	ldr	r7, [sp, #12]
 800772a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800772e:	f7f9 f99b 	bl	8000a68 <__aeabi_d2iz>
 8007732:	4604      	mov	r4, r0
 8007734:	f7f8 fe7e 	bl	8000434 <__aeabi_i2d>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007740:	f7f8 fd2a 	bl	8000198 <__aeabi_dsub>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	3430      	adds	r4, #48	; 0x30
 800774a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800774e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007752:	f807 4b01 	strb.w	r4, [r7], #1
 8007756:	f7f9 f949 	bl	80009ec <__aeabi_dcmplt>
 800775a:	2800      	cmp	r0, #0
 800775c:	d174      	bne.n	8007848 <_dtoa_r+0x648>
 800775e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007762:	2000      	movs	r0, #0
 8007764:	4911      	ldr	r1, [pc, #68]	; (80077ac <_dtoa_r+0x5ac>)
 8007766:	f7f8 fd17 	bl	8000198 <__aeabi_dsub>
 800776a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800776e:	f7f9 f93d 	bl	80009ec <__aeabi_dcmplt>
 8007772:	2800      	cmp	r0, #0
 8007774:	f040 80b7 	bne.w	80078e6 <_dtoa_r+0x6e6>
 8007778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800777a:	429f      	cmp	r7, r3
 800777c:	f43f af7a 	beq.w	8007674 <_dtoa_r+0x474>
 8007780:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007784:	2200      	movs	r2, #0
 8007786:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <_dtoa_r+0x5b0>)
 8007788:	f7f8 febe 	bl	8000508 <__aeabi_dmul>
 800778c:	2200      	movs	r2, #0
 800778e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <_dtoa_r+0x5b0>)
 8007798:	f7f8 feb6 	bl	8000508 <__aeabi_dmul>
 800779c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a0:	e7c3      	b.n	800772a <_dtoa_r+0x52a>
 80077a2:	bf00      	nop
 80077a4:	080093d0 	.word	0x080093d0
 80077a8:	080093a8 	.word	0x080093a8
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	40240000 	.word	0x40240000
 80077b4:	401c0000 	.word	0x401c0000
 80077b8:	40140000 	.word	0x40140000
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f8 fea0 	bl	8000508 <__aeabi_dmul>
 80077c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077ce:	9c03      	ldr	r4, [sp, #12]
 80077d0:	9314      	str	r3, [sp, #80]	; 0x50
 80077d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077d6:	f7f9 f947 	bl	8000a68 <__aeabi_d2iz>
 80077da:	9015      	str	r0, [sp, #84]	; 0x54
 80077dc:	f7f8 fe2a 	bl	8000434 <__aeabi_i2d>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e8:	f7f8 fcd6 	bl	8000198 <__aeabi_dsub>
 80077ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ee:	4606      	mov	r6, r0
 80077f0:	3330      	adds	r3, #48	; 0x30
 80077f2:	f804 3b01 	strb.w	r3, [r4], #1
 80077f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077f8:	460f      	mov	r7, r1
 80077fa:	429c      	cmp	r4, r3
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	d124      	bne.n	800784c <_dtoa_r+0x64c>
 8007802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007806:	4bb0      	ldr	r3, [pc, #704]	; (8007ac8 <_dtoa_r+0x8c8>)
 8007808:	f7f8 fcc8 	bl	800019c <__adddf3>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f9 f908 	bl	8000a28 <__aeabi_dcmpgt>
 8007818:	2800      	cmp	r0, #0
 800781a:	d163      	bne.n	80078e4 <_dtoa_r+0x6e4>
 800781c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007820:	2000      	movs	r0, #0
 8007822:	49a9      	ldr	r1, [pc, #676]	; (8007ac8 <_dtoa_r+0x8c8>)
 8007824:	f7f8 fcb8 	bl	8000198 <__aeabi_dsub>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f8dc 	bl	80009ec <__aeabi_dcmplt>
 8007834:	2800      	cmp	r0, #0
 8007836:	f43f af1d 	beq.w	8007674 <_dtoa_r+0x474>
 800783a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800783c:	1e7b      	subs	r3, r7, #1
 800783e:	9314      	str	r3, [sp, #80]	; 0x50
 8007840:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007844:	2b30      	cmp	r3, #48	; 0x30
 8007846:	d0f8      	beq.n	800783a <_dtoa_r+0x63a>
 8007848:	46c2      	mov	sl, r8
 800784a:	e03b      	b.n	80078c4 <_dtoa_r+0x6c4>
 800784c:	4b9f      	ldr	r3, [pc, #636]	; (8007acc <_dtoa_r+0x8cc>)
 800784e:	f7f8 fe5b 	bl	8000508 <__aeabi_dmul>
 8007852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007856:	e7bc      	b.n	80077d2 <_dtoa_r+0x5d2>
 8007858:	9f03      	ldr	r7, [sp, #12]
 800785a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800785e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 ff79 	bl	800075c <__aeabi_ddiv>
 800786a:	f7f9 f8fd 	bl	8000a68 <__aeabi_d2iz>
 800786e:	4604      	mov	r4, r0
 8007870:	f7f8 fde0 	bl	8000434 <__aeabi_i2d>
 8007874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007878:	f7f8 fe46 	bl	8000508 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	f7f8 fc88 	bl	8000198 <__aeabi_dsub>
 8007888:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800788c:	f807 6b01 	strb.w	r6, [r7], #1
 8007890:	9e03      	ldr	r6, [sp, #12]
 8007892:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007896:	1bbe      	subs	r6, r7, r6
 8007898:	45b4      	cmp	ip, r6
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	d136      	bne.n	800790e <_dtoa_r+0x70e>
 80078a0:	f7f8 fc7c 	bl	800019c <__adddf3>
 80078a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078a8:	4680      	mov	r8, r0
 80078aa:	4689      	mov	r9, r1
 80078ac:	f7f9 f8bc 	bl	8000a28 <__aeabi_dcmpgt>
 80078b0:	bb58      	cbnz	r0, 800790a <_dtoa_r+0x70a>
 80078b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078b6:	4640      	mov	r0, r8
 80078b8:	4649      	mov	r1, r9
 80078ba:	f7f9 f88d 	bl	80009d8 <__aeabi_dcmpeq>
 80078be:	b108      	cbz	r0, 80078c4 <_dtoa_r+0x6c4>
 80078c0:	07e1      	lsls	r1, r4, #31
 80078c2:	d422      	bmi.n	800790a <_dtoa_r+0x70a>
 80078c4:	4628      	mov	r0, r5
 80078c6:	4659      	mov	r1, fp
 80078c8:	f000 fbbe 	bl	8008048 <_Bfree>
 80078cc:	2300      	movs	r3, #0
 80078ce:	703b      	strb	r3, [r7, #0]
 80078d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078d2:	f10a 0001 	add.w	r0, sl, #1
 80078d6:	6018      	str	r0, [r3, #0]
 80078d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f43f acde 	beq.w	800729c <_dtoa_r+0x9c>
 80078e0:	601f      	str	r7, [r3, #0]
 80078e2:	e4db      	b.n	800729c <_dtoa_r+0x9c>
 80078e4:	4627      	mov	r7, r4
 80078e6:	463b      	mov	r3, r7
 80078e8:	461f      	mov	r7, r3
 80078ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ee:	2a39      	cmp	r2, #57	; 0x39
 80078f0:	d107      	bne.n	8007902 <_dtoa_r+0x702>
 80078f2:	9a03      	ldr	r2, [sp, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d1f7      	bne.n	80078e8 <_dtoa_r+0x6e8>
 80078f8:	2230      	movs	r2, #48	; 0x30
 80078fa:	9903      	ldr	r1, [sp, #12]
 80078fc:	f108 0801 	add.w	r8, r8, #1
 8007900:	700a      	strb	r2, [r1, #0]
 8007902:	781a      	ldrb	r2, [r3, #0]
 8007904:	3201      	adds	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e79e      	b.n	8007848 <_dtoa_r+0x648>
 800790a:	46d0      	mov	r8, sl
 800790c:	e7eb      	b.n	80078e6 <_dtoa_r+0x6e6>
 800790e:	2200      	movs	r2, #0
 8007910:	4b6e      	ldr	r3, [pc, #440]	; (8007acc <_dtoa_r+0x8cc>)
 8007912:	f7f8 fdf9 	bl	8000508 <__aeabi_dmul>
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	4680      	mov	r8, r0
 800791c:	4689      	mov	r9, r1
 800791e:	f7f9 f85b 	bl	80009d8 <__aeabi_dcmpeq>
 8007922:	2800      	cmp	r0, #0
 8007924:	d09b      	beq.n	800785e <_dtoa_r+0x65e>
 8007926:	e7cd      	b.n	80078c4 <_dtoa_r+0x6c4>
 8007928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800792a:	2a00      	cmp	r2, #0
 800792c:	f000 80d0 	beq.w	8007ad0 <_dtoa_r+0x8d0>
 8007930:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007932:	2a01      	cmp	r2, #1
 8007934:	f300 80ae 	bgt.w	8007a94 <_dtoa_r+0x894>
 8007938:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800793a:	2a00      	cmp	r2, #0
 800793c:	f000 80a6 	beq.w	8007a8c <_dtoa_r+0x88c>
 8007940:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007944:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007946:	9f06      	ldr	r7, [sp, #24]
 8007948:	9a06      	ldr	r2, [sp, #24]
 800794a:	2101      	movs	r1, #1
 800794c:	441a      	add	r2, r3
 800794e:	9206      	str	r2, [sp, #24]
 8007950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007952:	4628      	mov	r0, r5
 8007954:	441a      	add	r2, r3
 8007956:	9209      	str	r2, [sp, #36]	; 0x24
 8007958:	f000 fc2c 	bl	80081b4 <__i2b>
 800795c:	4606      	mov	r6, r0
 800795e:	2f00      	cmp	r7, #0
 8007960:	dd0c      	ble.n	800797c <_dtoa_r+0x77c>
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	2b00      	cmp	r3, #0
 8007966:	dd09      	ble.n	800797c <_dtoa_r+0x77c>
 8007968:	42bb      	cmp	r3, r7
 800796a:	bfa8      	it	ge
 800796c:	463b      	movge	r3, r7
 800796e:	9a06      	ldr	r2, [sp, #24]
 8007970:	1aff      	subs	r7, r7, r3
 8007972:	1ad2      	subs	r2, r2, r3
 8007974:	9206      	str	r2, [sp, #24]
 8007976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797e:	b1f3      	cbz	r3, 80079be <_dtoa_r+0x7be>
 8007980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 80a8 	beq.w	8007ad8 <_dtoa_r+0x8d8>
 8007988:	2c00      	cmp	r4, #0
 800798a:	dd10      	ble.n	80079ae <_dtoa_r+0x7ae>
 800798c:	4631      	mov	r1, r6
 800798e:	4622      	mov	r2, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f000 fccd 	bl	8008330 <__pow5mult>
 8007996:	465a      	mov	r2, fp
 8007998:	4601      	mov	r1, r0
 800799a:	4606      	mov	r6, r0
 800799c:	4628      	mov	r0, r5
 800799e:	f000 fc1f 	bl	80081e0 <__multiply>
 80079a2:	4680      	mov	r8, r0
 80079a4:	4659      	mov	r1, fp
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 fb4e 	bl	8008048 <_Bfree>
 80079ac:	46c3      	mov	fp, r8
 80079ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b0:	1b1a      	subs	r2, r3, r4
 80079b2:	d004      	beq.n	80079be <_dtoa_r+0x7be>
 80079b4:	4659      	mov	r1, fp
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fcba 	bl	8008330 <__pow5mult>
 80079bc:	4683      	mov	fp, r0
 80079be:	2101      	movs	r1, #1
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 fbf7 	bl	80081b4 <__i2b>
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	4604      	mov	r4, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f340 8086 	ble.w	8007adc <_dtoa_r+0x8dc>
 80079d0:	461a      	mov	r2, r3
 80079d2:	4601      	mov	r1, r0
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fcab 	bl	8008330 <__pow5mult>
 80079da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079dc:	4604      	mov	r4, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	dd7f      	ble.n	8007ae2 <_dtoa_r+0x8e2>
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079ec:	6918      	ldr	r0, [r3, #16]
 80079ee:	f000 fb93 	bl	8008118 <__hi0bits>
 80079f2:	f1c0 0020 	rsb	r0, r0, #32
 80079f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f8:	4418      	add	r0, r3
 80079fa:	f010 001f 	ands.w	r0, r0, #31
 80079fe:	f000 8092 	beq.w	8007b26 <_dtoa_r+0x926>
 8007a02:	f1c0 0320 	rsb	r3, r0, #32
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	f340 808a 	ble.w	8007b20 <_dtoa_r+0x920>
 8007a0c:	f1c0 001c 	rsb	r0, r0, #28
 8007a10:	9b06      	ldr	r3, [sp, #24]
 8007a12:	4407      	add	r7, r0
 8007a14:	4403      	add	r3, r0
 8007a16:	9306      	str	r3, [sp, #24]
 8007a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1a:	4403      	add	r3, r0
 8007a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1e:	9b06      	ldr	r3, [sp, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	dd05      	ble.n	8007a30 <_dtoa_r+0x830>
 8007a24:	4659      	mov	r1, fp
 8007a26:	461a      	mov	r2, r3
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 fcdb 	bl	80083e4 <__lshift>
 8007a2e:	4683      	mov	fp, r0
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dd05      	ble.n	8007a42 <_dtoa_r+0x842>
 8007a36:	4621      	mov	r1, r4
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 fcd2 	bl	80083e4 <__lshift>
 8007a40:	4604      	mov	r4, r0
 8007a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d070      	beq.n	8007b2a <_dtoa_r+0x92a>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fd3a 	bl	80084c4 <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	da6a      	bge.n	8007b2a <_dtoa_r+0x92a>
 8007a54:	2300      	movs	r3, #0
 8007a56:	4659      	mov	r1, fp
 8007a58:	220a      	movs	r2, #10
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 fb16 	bl	800808c <__multadd>
 8007a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a62:	4683      	mov	fp, r0
 8007a64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8194 	beq.w	8007d96 <_dtoa_r+0xb96>
 8007a6e:	4631      	mov	r1, r6
 8007a70:	2300      	movs	r3, #0
 8007a72:	220a      	movs	r2, #10
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 fb09 	bl	800808c <__multadd>
 8007a7a:	f1b9 0f00 	cmp.w	r9, #0
 8007a7e:	4606      	mov	r6, r0
 8007a80:	f300 8093 	bgt.w	8007baa <_dtoa_r+0x9aa>
 8007a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dc57      	bgt.n	8007b3a <_dtoa_r+0x93a>
 8007a8a:	e08e      	b.n	8007baa <_dtoa_r+0x9aa>
 8007a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a92:	e757      	b.n	8007944 <_dtoa_r+0x744>
 8007a94:	9b08      	ldr	r3, [sp, #32]
 8007a96:	1e5c      	subs	r4, r3, #1
 8007a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	bfb7      	itett	lt
 8007a9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007aa0:	1b1c      	subge	r4, r3, r4
 8007aa2:	1ae2      	sublt	r2, r4, r3
 8007aa4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007aa6:	bfbe      	ittt	lt
 8007aa8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007aaa:	189b      	addlt	r3, r3, r2
 8007aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007aae:	9b08      	ldr	r3, [sp, #32]
 8007ab0:	bfb8      	it	lt
 8007ab2:	2400      	movlt	r4, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bfbb      	ittet	lt
 8007ab8:	9b06      	ldrlt	r3, [sp, #24]
 8007aba:	9a08      	ldrlt	r2, [sp, #32]
 8007abc:	9f06      	ldrge	r7, [sp, #24]
 8007abe:	1a9f      	sublt	r7, r3, r2
 8007ac0:	bfac      	ite	ge
 8007ac2:	9b08      	ldrge	r3, [sp, #32]
 8007ac4:	2300      	movlt	r3, #0
 8007ac6:	e73f      	b.n	8007948 <_dtoa_r+0x748>
 8007ac8:	3fe00000 	.word	0x3fe00000
 8007acc:	40240000 	.word	0x40240000
 8007ad0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ad2:	9f06      	ldr	r7, [sp, #24]
 8007ad4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007ad6:	e742      	b.n	800795e <_dtoa_r+0x75e>
 8007ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ada:	e76b      	b.n	80079b4 <_dtoa_r+0x7b4>
 8007adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	dc19      	bgt.n	8007b16 <_dtoa_r+0x916>
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	b9bb      	cbnz	r3, 8007b16 <_dtoa_r+0x916>
 8007ae6:	9b05      	ldr	r3, [sp, #20]
 8007ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aec:	b99b      	cbnz	r3, 8007b16 <_dtoa_r+0x916>
 8007aee:	9b05      	ldr	r3, [sp, #20]
 8007af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	0d1b      	lsrs	r3, r3, #20
 8007af6:	051b      	lsls	r3, r3, #20
 8007af8:	b183      	cbz	r3, 8007b1c <_dtoa_r+0x91c>
 8007afa:	f04f 0801 	mov.w	r8, #1
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	3301      	adds	r3, #1
 8007b02:	9306      	str	r3, [sp, #24]
 8007b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b06:	3301      	adds	r3, #1
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f47f af6a 	bne.w	80079e6 <_dtoa_r+0x7e6>
 8007b12:	2001      	movs	r0, #1
 8007b14:	e76f      	b.n	80079f6 <_dtoa_r+0x7f6>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	e7f6      	b.n	8007b0a <_dtoa_r+0x90a>
 8007b1c:	4698      	mov	r8, r3
 8007b1e:	e7f4      	b.n	8007b0a <_dtoa_r+0x90a>
 8007b20:	f43f af7d 	beq.w	8007a1e <_dtoa_r+0x81e>
 8007b24:	4618      	mov	r0, r3
 8007b26:	301c      	adds	r0, #28
 8007b28:	e772      	b.n	8007a10 <_dtoa_r+0x810>
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dc36      	bgt.n	8007b9e <_dtoa_r+0x99e>
 8007b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	dd33      	ble.n	8007b9e <_dtoa_r+0x99e>
 8007b36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b3a:	f1b9 0f00 	cmp.w	r9, #0
 8007b3e:	d10d      	bne.n	8007b5c <_dtoa_r+0x95c>
 8007b40:	4621      	mov	r1, r4
 8007b42:	464b      	mov	r3, r9
 8007b44:	2205      	movs	r2, #5
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 faa0 	bl	800808c <__multadd>
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4658      	mov	r0, fp
 8007b52:	f000 fcb7 	bl	80084c4 <__mcmp>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f73f adb8 	bgt.w	80076cc <_dtoa_r+0x4cc>
 8007b5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b5e:	9f03      	ldr	r7, [sp, #12]
 8007b60:	ea6f 0a03 	mvn.w	sl, r3
 8007b64:	f04f 0800 	mov.w	r8, #0
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 fa6c 	bl	8008048 <_Bfree>
 8007b70:	2e00      	cmp	r6, #0
 8007b72:	f43f aea7 	beq.w	80078c4 <_dtoa_r+0x6c4>
 8007b76:	f1b8 0f00 	cmp.w	r8, #0
 8007b7a:	d005      	beq.n	8007b88 <_dtoa_r+0x988>
 8007b7c:	45b0      	cmp	r8, r6
 8007b7e:	d003      	beq.n	8007b88 <_dtoa_r+0x988>
 8007b80:	4641      	mov	r1, r8
 8007b82:	4628      	mov	r0, r5
 8007b84:	f000 fa60 	bl	8008048 <_Bfree>
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 fa5c 	bl	8008048 <_Bfree>
 8007b90:	e698      	b.n	80078c4 <_dtoa_r+0x6c4>
 8007b92:	2400      	movs	r4, #0
 8007b94:	4626      	mov	r6, r4
 8007b96:	e7e1      	b.n	8007b5c <_dtoa_r+0x95c>
 8007b98:	46c2      	mov	sl, r8
 8007b9a:	4626      	mov	r6, r4
 8007b9c:	e596      	b.n	80076cc <_dtoa_r+0x4cc>
 8007b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ba0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80fd 	beq.w	8007da4 <_dtoa_r+0xba4>
 8007baa:	2f00      	cmp	r7, #0
 8007bac:	dd05      	ble.n	8007bba <_dtoa_r+0x9ba>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	463a      	mov	r2, r7
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 fc16 	bl	80083e4 <__lshift>
 8007bb8:	4606      	mov	r6, r0
 8007bba:	f1b8 0f00 	cmp.w	r8, #0
 8007bbe:	d05c      	beq.n	8007c7a <_dtoa_r+0xa7a>
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	6871      	ldr	r1, [r6, #4]
 8007bc4:	f000 fa00 	bl	8007fc8 <_Balloc>
 8007bc8:	4607      	mov	r7, r0
 8007bca:	b928      	cbnz	r0, 8007bd8 <_dtoa_r+0x9d8>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bd2:	4b7f      	ldr	r3, [pc, #508]	; (8007dd0 <_dtoa_r+0xbd0>)
 8007bd4:	f7ff bb28 	b.w	8007228 <_dtoa_r+0x28>
 8007bd8:	6932      	ldr	r2, [r6, #16]
 8007bda:	f106 010c 	add.w	r1, r6, #12
 8007bde:	3202      	adds	r2, #2
 8007be0:	0092      	lsls	r2, r2, #2
 8007be2:	300c      	adds	r0, #12
 8007be4:	f7fe fcdd 	bl	80065a2 <memcpy>
 8007be8:	2201      	movs	r2, #1
 8007bea:	4639      	mov	r1, r7
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fbf9 	bl	80083e4 <__lshift>
 8007bf2:	46b0      	mov	r8, r6
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	444b      	add	r3, r9
 8007c00:	930a      	str	r3, [sp, #40]	; 0x28
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0a:	9b08      	ldr	r3, [sp, #32]
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4658      	mov	r0, fp
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f7ff fa66 	bl	80070e4 <quorem>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	3330      	adds	r3, #48	; 0x30
 8007c1e:	9006      	str	r0, [sp, #24]
 8007c20:	4658      	mov	r0, fp
 8007c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c24:	f000 fc4e 	bl	80084c4 <__mcmp>
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4681      	mov	r9, r0
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 fc64 	bl	80084fc <__mdiff>
 8007c34:	68c2      	ldr	r2, [r0, #12]
 8007c36:	4607      	mov	r7, r0
 8007c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3a:	bb02      	cbnz	r2, 8007c7e <_dtoa_r+0xa7e>
 8007c3c:	4601      	mov	r1, r0
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f000 fc40 	bl	80084c4 <__mcmp>
 8007c44:	4602      	mov	r2, r0
 8007c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007c50:	f000 f9fa 	bl	8008048 <_Bfree>
 8007c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c58:	9f08      	ldr	r7, [sp, #32]
 8007c5a:	ea43 0102 	orr.w	r1, r3, r2
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	430b      	orrs	r3, r1
 8007c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c64:	d10d      	bne.n	8007c82 <_dtoa_r+0xa82>
 8007c66:	2b39      	cmp	r3, #57	; 0x39
 8007c68:	d029      	beq.n	8007cbe <_dtoa_r+0xabe>
 8007c6a:	f1b9 0f00 	cmp.w	r9, #0
 8007c6e:	dd01      	ble.n	8007c74 <_dtoa_r+0xa74>
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	3331      	adds	r3, #49	; 0x31
 8007c74:	9a04      	ldr	r2, [sp, #16]
 8007c76:	7013      	strb	r3, [r2, #0]
 8007c78:	e776      	b.n	8007b68 <_dtoa_r+0x968>
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	e7b9      	b.n	8007bf2 <_dtoa_r+0x9f2>
 8007c7e:	2201      	movs	r2, #1
 8007c80:	e7e2      	b.n	8007c48 <_dtoa_r+0xa48>
 8007c82:	f1b9 0f00 	cmp.w	r9, #0
 8007c86:	db06      	blt.n	8007c96 <_dtoa_r+0xa96>
 8007c88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c8a:	ea41 0909 	orr.w	r9, r1, r9
 8007c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c90:	ea59 0101 	orrs.w	r1, r9, r1
 8007c94:	d120      	bne.n	8007cd8 <_dtoa_r+0xad8>
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	ddec      	ble.n	8007c74 <_dtoa_r+0xa74>
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	f000 fb9f 	bl	80083e4 <__lshift>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4683      	mov	fp, r0
 8007caa:	f000 fc0b 	bl	80084c4 <__mcmp>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	dc02      	bgt.n	8007cba <_dtoa_r+0xaba>
 8007cb4:	d1de      	bne.n	8007c74 <_dtoa_r+0xa74>
 8007cb6:	07da      	lsls	r2, r3, #31
 8007cb8:	d5dc      	bpl.n	8007c74 <_dtoa_r+0xa74>
 8007cba:	2b39      	cmp	r3, #57	; 0x39
 8007cbc:	d1d8      	bne.n	8007c70 <_dtoa_r+0xa70>
 8007cbe:	2339      	movs	r3, #57	; 0x39
 8007cc0:	9a04      	ldr	r2, [sp, #16]
 8007cc2:	7013      	strb	r3, [r2, #0]
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	2a39      	cmp	r2, #57	; 0x39
 8007cd0:	d050      	beq.n	8007d74 <_dtoa_r+0xb74>
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e747      	b.n	8007b68 <_dtoa_r+0x968>
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	dd03      	ble.n	8007ce4 <_dtoa_r+0xae4>
 8007cdc:	2b39      	cmp	r3, #57	; 0x39
 8007cde:	d0ee      	beq.n	8007cbe <_dtoa_r+0xabe>
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	e7c7      	b.n	8007c74 <_dtoa_r+0xa74>
 8007ce4:	9a08      	ldr	r2, [sp, #32]
 8007ce6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ce8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cec:	428a      	cmp	r2, r1
 8007cee:	d02a      	beq.n	8007d46 <_dtoa_r+0xb46>
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f9c8 	bl	800808c <__multadd>
 8007cfc:	45b0      	cmp	r8, r6
 8007cfe:	4683      	mov	fp, r0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	f04f 020a 	mov.w	r2, #10
 8007d08:	4641      	mov	r1, r8
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	d107      	bne.n	8007d1e <_dtoa_r+0xb1e>
 8007d0e:	f000 f9bd 	bl	800808c <__multadd>
 8007d12:	4680      	mov	r8, r0
 8007d14:	4606      	mov	r6, r0
 8007d16:	9b08      	ldr	r3, [sp, #32]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	e775      	b.n	8007c0a <_dtoa_r+0xa0a>
 8007d1e:	f000 f9b5 	bl	800808c <__multadd>
 8007d22:	4631      	mov	r1, r6
 8007d24:	4680      	mov	r8, r0
 8007d26:	2300      	movs	r3, #0
 8007d28:	220a      	movs	r2, #10
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f9ae 	bl	800808c <__multadd>
 8007d30:	4606      	mov	r6, r0
 8007d32:	e7f0      	b.n	8007d16 <_dtoa_r+0xb16>
 8007d34:	f1b9 0f00 	cmp.w	r9, #0
 8007d38:	bfcc      	ite	gt
 8007d3a:	464f      	movgt	r7, r9
 8007d3c:	2701      	movle	r7, #1
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	9a03      	ldr	r2, [sp, #12]
 8007d44:	4417      	add	r7, r2
 8007d46:	4659      	mov	r1, fp
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	9308      	str	r3, [sp, #32]
 8007d4e:	f000 fb49 	bl	80083e4 <__lshift>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4683      	mov	fp, r0
 8007d56:	f000 fbb5 	bl	80084c4 <__mcmp>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	dcb2      	bgt.n	8007cc4 <_dtoa_r+0xac4>
 8007d5e:	d102      	bne.n	8007d66 <_dtoa_r+0xb66>
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d4ae      	bmi.n	8007cc4 <_dtoa_r+0xac4>
 8007d66:	463b      	mov	r3, r7
 8007d68:	461f      	mov	r7, r3
 8007d6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d6e:	2a30      	cmp	r2, #48	; 0x30
 8007d70:	d0fa      	beq.n	8007d68 <_dtoa_r+0xb68>
 8007d72:	e6f9      	b.n	8007b68 <_dtoa_r+0x968>
 8007d74:	9a03      	ldr	r2, [sp, #12]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d1a5      	bne.n	8007cc6 <_dtoa_r+0xac6>
 8007d7a:	2331      	movs	r3, #49	; 0x31
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	e779      	b.n	8007c76 <_dtoa_r+0xa76>
 8007d82:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <_dtoa_r+0xbd4>)
 8007d84:	f7ff baa8 	b.w	80072d8 <_dtoa_r+0xd8>
 8007d88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f47f aa81 	bne.w	8007292 <_dtoa_r+0x92>
 8007d90:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <_dtoa_r+0xbd8>)
 8007d92:	f7ff baa1 	b.w	80072d8 <_dtoa_r+0xd8>
 8007d96:	f1b9 0f00 	cmp.w	r9, #0
 8007d9a:	dc03      	bgt.n	8007da4 <_dtoa_r+0xba4>
 8007d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	f73f aecb 	bgt.w	8007b3a <_dtoa_r+0x93a>
 8007da4:	9f03      	ldr	r7, [sp, #12]
 8007da6:	4621      	mov	r1, r4
 8007da8:	4658      	mov	r0, fp
 8007daa:	f7ff f99b 	bl	80070e4 <quorem>
 8007dae:	9a03      	ldr	r2, [sp, #12]
 8007db0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007db4:	f807 3b01 	strb.w	r3, [r7], #1
 8007db8:	1aba      	subs	r2, r7, r2
 8007dba:	4591      	cmp	r9, r2
 8007dbc:	ddba      	ble.n	8007d34 <_dtoa_r+0xb34>
 8007dbe:	4659      	mov	r1, fp
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	220a      	movs	r2, #10
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 f961 	bl	800808c <__multadd>
 8007dca:	4683      	mov	fp, r0
 8007dcc:	e7eb      	b.n	8007da6 <_dtoa_r+0xba6>
 8007dce:	bf00      	nop
 8007dd0:	08009337 	.word	0x08009337
 8007dd4:	08009294 	.word	0x08009294
 8007dd8:	080092b8 	.word	0x080092b8

08007ddc <__sflush_r>:
 8007ddc:	898a      	ldrh	r2, [r1, #12]
 8007dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de0:	4605      	mov	r5, r0
 8007de2:	0710      	lsls	r0, r2, #28
 8007de4:	460c      	mov	r4, r1
 8007de6:	d457      	bmi.n	8007e98 <__sflush_r+0xbc>
 8007de8:	684b      	ldr	r3, [r1, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dc04      	bgt.n	8007df8 <__sflush_r+0x1c>
 8007dee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dc01      	bgt.n	8007df8 <__sflush_r+0x1c>
 8007df4:	2000      	movs	r0, #0
 8007df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d0fa      	beq.n	8007df4 <__sflush_r+0x18>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e04:	682f      	ldr	r7, [r5, #0]
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	d032      	beq.n	8007e70 <__sflush_r+0x94>
 8007e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	075a      	lsls	r2, r3, #29
 8007e10:	d505      	bpl.n	8007e1e <__sflush_r+0x42>
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	1ac0      	subs	r0, r0, r3
 8007e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e18:	b10b      	cbz	r3, 8007e1e <__sflush_r+0x42>
 8007e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e1c:	1ac0      	subs	r0, r0, r3
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4602      	mov	r2, r0
 8007e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e24:	4628      	mov	r0, r5
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	47b0      	blx	r6
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	d106      	bne.n	8007e3e <__sflush_r+0x62>
 8007e30:	6829      	ldr	r1, [r5, #0]
 8007e32:	291d      	cmp	r1, #29
 8007e34:	d82c      	bhi.n	8007e90 <__sflush_r+0xb4>
 8007e36:	4a29      	ldr	r2, [pc, #164]	; (8007edc <__sflush_r+0x100>)
 8007e38:	40ca      	lsrs	r2, r1
 8007e3a:	07d6      	lsls	r6, r2, #31
 8007e3c:	d528      	bpl.n	8007e90 <__sflush_r+0xb4>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	6062      	str	r2, [r4, #4]
 8007e42:	6922      	ldr	r2, [r4, #16]
 8007e44:	04d9      	lsls	r1, r3, #19
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	d504      	bpl.n	8007e54 <__sflush_r+0x78>
 8007e4a:	1c42      	adds	r2, r0, #1
 8007e4c:	d101      	bne.n	8007e52 <__sflush_r+0x76>
 8007e4e:	682b      	ldr	r3, [r5, #0]
 8007e50:	b903      	cbnz	r3, 8007e54 <__sflush_r+0x78>
 8007e52:	6560      	str	r0, [r4, #84]	; 0x54
 8007e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e56:	602f      	str	r7, [r5, #0]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d0cb      	beq.n	8007df4 <__sflush_r+0x18>
 8007e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e60:	4299      	cmp	r1, r3
 8007e62:	d002      	beq.n	8007e6a <__sflush_r+0x8e>
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 fc45 	bl	80086f4 <_free_r>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e6e:	e7c2      	b.n	8007df6 <__sflush_r+0x1a>
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	2301      	movs	r3, #1
 8007e74:	4628      	mov	r0, r5
 8007e76:	47b0      	blx	r6
 8007e78:	1c41      	adds	r1, r0, #1
 8007e7a:	d1c7      	bne.n	8007e0c <__sflush_r+0x30>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0c4      	beq.n	8007e0c <__sflush_r+0x30>
 8007e82:	2b1d      	cmp	r3, #29
 8007e84:	d001      	beq.n	8007e8a <__sflush_r+0xae>
 8007e86:	2b16      	cmp	r3, #22
 8007e88:	d101      	bne.n	8007e8e <__sflush_r+0xb2>
 8007e8a:	602f      	str	r7, [r5, #0]
 8007e8c:	e7b2      	b.n	8007df4 <__sflush_r+0x18>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	e7ae      	b.n	8007df6 <__sflush_r+0x1a>
 8007e98:	690f      	ldr	r7, [r1, #16]
 8007e9a:	2f00      	cmp	r7, #0
 8007e9c:	d0aa      	beq.n	8007df4 <__sflush_r+0x18>
 8007e9e:	0793      	lsls	r3, r2, #30
 8007ea0:	bf18      	it	ne
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	680e      	ldr	r6, [r1, #0]
 8007ea6:	bf08      	it	eq
 8007ea8:	694b      	ldreq	r3, [r1, #20]
 8007eaa:	1bf6      	subs	r6, r6, r7
 8007eac:	600f      	str	r7, [r1, #0]
 8007eae:	608b      	str	r3, [r1, #8]
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	dd9f      	ble.n	8007df4 <__sflush_r+0x18>
 8007eb4:	4633      	mov	r3, r6
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4628      	mov	r0, r5
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ec0:	47e0      	blx	ip
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	dc06      	bgt.n	8007ed4 <__sflush_r+0xf8>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	e790      	b.n	8007df6 <__sflush_r+0x1a>
 8007ed4:	4407      	add	r7, r0
 8007ed6:	1a36      	subs	r6, r6, r0
 8007ed8:	e7ea      	b.n	8007eb0 <__sflush_r+0xd4>
 8007eda:	bf00      	nop
 8007edc:	20400001 	.word	0x20400001

08007ee0 <_fflush_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	690b      	ldr	r3, [r1, #16]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b913      	cbnz	r3, 8007ef0 <_fflush_r+0x10>
 8007eea:	2500      	movs	r5, #0
 8007eec:	4628      	mov	r0, r5
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	b118      	cbz	r0, 8007efa <_fflush_r+0x1a>
 8007ef2:	6983      	ldr	r3, [r0, #24]
 8007ef4:	b90b      	cbnz	r3, 8007efa <_fflush_r+0x1a>
 8007ef6:	f7fe fa8f 	bl	8006418 <__sinit>
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <_fflush_r+0x6c>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d11b      	bne.n	8007f38 <_fflush_r+0x58>
 8007f00:	686c      	ldr	r4, [r5, #4]
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0ef      	beq.n	8007eea <_fflush_r+0xa>
 8007f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f0c:	07d0      	lsls	r0, r2, #31
 8007f0e:	d404      	bmi.n	8007f1a <_fflush_r+0x3a>
 8007f10:	0599      	lsls	r1, r3, #22
 8007f12:	d402      	bmi.n	8007f1a <_fflush_r+0x3a>
 8007f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f16:	f7fe fb42 	bl	800659e <__retarget_lock_acquire_recursive>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	f7ff ff5d 	bl	8007ddc <__sflush_r>
 8007f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f24:	4605      	mov	r5, r0
 8007f26:	07da      	lsls	r2, r3, #31
 8007f28:	d4e0      	bmi.n	8007eec <_fflush_r+0xc>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	059b      	lsls	r3, r3, #22
 8007f2e:	d4dd      	bmi.n	8007eec <_fflush_r+0xc>
 8007f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f32:	f7fe fb35 	bl	80065a0 <__retarget_lock_release_recursive>
 8007f36:	e7d9      	b.n	8007eec <_fflush_r+0xc>
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <_fflush_r+0x70>)
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d101      	bne.n	8007f42 <_fflush_r+0x62>
 8007f3e:	68ac      	ldr	r4, [r5, #8]
 8007f40:	e7df      	b.n	8007f02 <_fflush_r+0x22>
 8007f42:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <_fflush_r+0x74>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	bf08      	it	eq
 8007f48:	68ec      	ldreq	r4, [r5, #12]
 8007f4a:	e7da      	b.n	8007f02 <_fflush_r+0x22>
 8007f4c:	08009240 	.word	0x08009240
 8007f50:	08009260 	.word	0x08009260
 8007f54:	08009220 	.word	0x08009220

08007f58 <_localeconv_r>:
 8007f58:	4800      	ldr	r0, [pc, #0]	; (8007f5c <_localeconv_r+0x4>)
 8007f5a:	4770      	bx	lr
 8007f5c:	20000160 	.word	0x20000160

08007f60 <_lseek_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4d05      	ldr	r5, [pc, #20]	; (8007f80 <_lseek_r+0x20>)
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7fa fcaa 	bl	80028c8 <_lseek>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_lseek_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_lseek_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	200007a4 	.word	0x200007a4

08007f84 <malloc>:
 8007f84:	4b02      	ldr	r3, [pc, #8]	; (8007f90 <malloc+0xc>)
 8007f86:	4601      	mov	r1, r0
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	f7fe bb41 	b.w	8006610 <_malloc_r>
 8007f8e:	bf00      	nop
 8007f90:	2000000c 	.word	0x2000000c

08007f94 <memchr>:
 8007f94:	4603      	mov	r3, r0
 8007f96:	b510      	push	{r4, lr}
 8007f98:	b2c9      	uxtb	r1, r1
 8007f9a:	4402      	add	r2, r0
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	d101      	bne.n	8007fa6 <memchr+0x12>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e003      	b.n	8007fae <memchr+0x1a>
 8007fa6:	7804      	ldrb	r4, [r0, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	428c      	cmp	r4, r1
 8007fac:	d1f6      	bne.n	8007f9c <memchr+0x8>
 8007fae:	bd10      	pop	{r4, pc}

08007fb0 <__malloc_lock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__malloc_lock+0x8>)
 8007fb2:	f7fe baf4 	b.w	800659e <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	20000798 	.word	0x20000798

08007fbc <__malloc_unlock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <__malloc_unlock+0x8>)
 8007fbe:	f7fe baef 	b.w	80065a0 <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	20000798 	.word	0x20000798

08007fc8 <_Balloc>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460d      	mov	r5, r1
 8007fd0:	b976      	cbnz	r6, 8007ff0 <_Balloc+0x28>
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	f7ff ffd6 	bl	8007f84 <malloc>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6260      	str	r0, [r4, #36]	; 0x24
 8007fdc:	b920      	cbnz	r0, 8007fe8 <_Balloc+0x20>
 8007fde:	2166      	movs	r1, #102	; 0x66
 8007fe0:	4b17      	ldr	r3, [pc, #92]	; (8008040 <_Balloc+0x78>)
 8007fe2:	4818      	ldr	r0, [pc, #96]	; (8008044 <_Balloc+0x7c>)
 8007fe4:	f000 fd3c 	bl	8008a60 <__assert_func>
 8007fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fec:	6006      	str	r6, [r0, #0]
 8007fee:	60c6      	str	r6, [r0, #12]
 8007ff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ff2:	68f3      	ldr	r3, [r6, #12]
 8007ff4:	b183      	cbz	r3, 8008018 <_Balloc+0x50>
 8007ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ffe:	b9b8      	cbnz	r0, 8008030 <_Balloc+0x68>
 8008000:	2101      	movs	r1, #1
 8008002:	fa01 f605 	lsl.w	r6, r1, r5
 8008006:	1d72      	adds	r2, r6, #5
 8008008:	4620      	mov	r0, r4
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	f000 fb5e 	bl	80086cc <_calloc_r>
 8008010:	b160      	cbz	r0, 800802c <_Balloc+0x64>
 8008012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008016:	e00e      	b.n	8008036 <_Balloc+0x6e>
 8008018:	2221      	movs	r2, #33	; 0x21
 800801a:	2104      	movs	r1, #4
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fb55 	bl	80086cc <_calloc_r>
 8008022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008024:	60f0      	str	r0, [r6, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e4      	bne.n	8007ff6 <_Balloc+0x2e>
 800802c:	2000      	movs	r0, #0
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008036:	2300      	movs	r3, #0
 8008038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800803c:	e7f7      	b.n	800802e <_Balloc+0x66>
 800803e:	bf00      	nop
 8008040:	080092c5 	.word	0x080092c5
 8008044:	08009348 	.word	0x08009348

08008048 <_Bfree>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	b976      	cbnz	r6, 8008070 <_Bfree+0x28>
 8008052:	2010      	movs	r0, #16
 8008054:	f7ff ff96 	bl	8007f84 <malloc>
 8008058:	4602      	mov	r2, r0
 800805a:	6268      	str	r0, [r5, #36]	; 0x24
 800805c:	b920      	cbnz	r0, 8008068 <_Bfree+0x20>
 800805e:	218a      	movs	r1, #138	; 0x8a
 8008060:	4b08      	ldr	r3, [pc, #32]	; (8008084 <_Bfree+0x3c>)
 8008062:	4809      	ldr	r0, [pc, #36]	; (8008088 <_Bfree+0x40>)
 8008064:	f000 fcfc 	bl	8008a60 <__assert_func>
 8008068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800806c:	6006      	str	r6, [r0, #0]
 800806e:	60c6      	str	r6, [r0, #12]
 8008070:	b13c      	cbz	r4, 8008082 <_Bfree+0x3a>
 8008072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008074:	6862      	ldr	r2, [r4, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800807c:	6021      	str	r1, [r4, #0]
 800807e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	080092c5 	.word	0x080092c5
 8008088:	08009348 	.word	0x08009348

0800808c <__multadd>:
 800808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	4607      	mov	r7, r0
 8008092:	460c      	mov	r4, r1
 8008094:	461e      	mov	r6, r3
 8008096:	2000      	movs	r0, #0
 8008098:	690d      	ldr	r5, [r1, #16]
 800809a:	f101 0c14 	add.w	ip, r1, #20
 800809e:	f8dc 3000 	ldr.w	r3, [ip]
 80080a2:	3001      	adds	r0, #1
 80080a4:	b299      	uxth	r1, r3
 80080a6:	fb02 6101 	mla	r1, r2, r1, r6
 80080aa:	0c1e      	lsrs	r6, r3, #16
 80080ac:	0c0b      	lsrs	r3, r1, #16
 80080ae:	fb02 3306 	mla	r3, r2, r6, r3
 80080b2:	b289      	uxth	r1, r1
 80080b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080b8:	4285      	cmp	r5, r0
 80080ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080be:	f84c 1b04 	str.w	r1, [ip], #4
 80080c2:	dcec      	bgt.n	800809e <__multadd+0x12>
 80080c4:	b30e      	cbz	r6, 800810a <__multadd+0x7e>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	dc19      	bgt.n	8008100 <__multadd+0x74>
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4638      	mov	r0, r7
 80080d0:	3101      	adds	r1, #1
 80080d2:	f7ff ff79 	bl	8007fc8 <_Balloc>
 80080d6:	4680      	mov	r8, r0
 80080d8:	b928      	cbnz	r0, 80080e6 <__multadd+0x5a>
 80080da:	4602      	mov	r2, r0
 80080dc:	21b5      	movs	r1, #181	; 0xb5
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <__multadd+0x84>)
 80080e0:	480c      	ldr	r0, [pc, #48]	; (8008114 <__multadd+0x88>)
 80080e2:	f000 fcbd 	bl	8008a60 <__assert_func>
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	f104 010c 	add.w	r1, r4, #12
 80080ec:	3202      	adds	r2, #2
 80080ee:	0092      	lsls	r2, r2, #2
 80080f0:	300c      	adds	r0, #12
 80080f2:	f7fe fa56 	bl	80065a2 <memcpy>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4638      	mov	r0, r7
 80080fa:	f7ff ffa5 	bl	8008048 <_Bfree>
 80080fe:	4644      	mov	r4, r8
 8008100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008104:	3501      	adds	r5, #1
 8008106:	615e      	str	r6, [r3, #20]
 8008108:	6125      	str	r5, [r4, #16]
 800810a:	4620      	mov	r0, r4
 800810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008110:	08009337 	.word	0x08009337
 8008114:	08009348 	.word	0x08009348

08008118 <__hi0bits>:
 8008118:	0c02      	lsrs	r2, r0, #16
 800811a:	0412      	lsls	r2, r2, #16
 800811c:	4603      	mov	r3, r0
 800811e:	b9ca      	cbnz	r2, 8008154 <__hi0bits+0x3c>
 8008120:	0403      	lsls	r3, r0, #16
 8008122:	2010      	movs	r0, #16
 8008124:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008128:	bf04      	itt	eq
 800812a:	021b      	lsleq	r3, r3, #8
 800812c:	3008      	addeq	r0, #8
 800812e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008132:	bf04      	itt	eq
 8008134:	011b      	lsleq	r3, r3, #4
 8008136:	3004      	addeq	r0, #4
 8008138:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800813c:	bf04      	itt	eq
 800813e:	009b      	lsleq	r3, r3, #2
 8008140:	3002      	addeq	r0, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	db05      	blt.n	8008152 <__hi0bits+0x3a>
 8008146:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800814a:	f100 0001 	add.w	r0, r0, #1
 800814e:	bf08      	it	eq
 8008150:	2020      	moveq	r0, #32
 8008152:	4770      	bx	lr
 8008154:	2000      	movs	r0, #0
 8008156:	e7e5      	b.n	8008124 <__hi0bits+0xc>

08008158 <__lo0bits>:
 8008158:	6803      	ldr	r3, [r0, #0]
 800815a:	4602      	mov	r2, r0
 800815c:	f013 0007 	ands.w	r0, r3, #7
 8008160:	d00b      	beq.n	800817a <__lo0bits+0x22>
 8008162:	07d9      	lsls	r1, r3, #31
 8008164:	d421      	bmi.n	80081aa <__lo0bits+0x52>
 8008166:	0798      	lsls	r0, r3, #30
 8008168:	bf49      	itett	mi
 800816a:	085b      	lsrmi	r3, r3, #1
 800816c:	089b      	lsrpl	r3, r3, #2
 800816e:	2001      	movmi	r0, #1
 8008170:	6013      	strmi	r3, [r2, #0]
 8008172:	bf5c      	itt	pl
 8008174:	2002      	movpl	r0, #2
 8008176:	6013      	strpl	r3, [r2, #0]
 8008178:	4770      	bx	lr
 800817a:	b299      	uxth	r1, r3
 800817c:	b909      	cbnz	r1, 8008182 <__lo0bits+0x2a>
 800817e:	2010      	movs	r0, #16
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	b2d9      	uxtb	r1, r3
 8008184:	b909      	cbnz	r1, 800818a <__lo0bits+0x32>
 8008186:	3008      	adds	r0, #8
 8008188:	0a1b      	lsrs	r3, r3, #8
 800818a:	0719      	lsls	r1, r3, #28
 800818c:	bf04      	itt	eq
 800818e:	091b      	lsreq	r3, r3, #4
 8008190:	3004      	addeq	r0, #4
 8008192:	0799      	lsls	r1, r3, #30
 8008194:	bf04      	itt	eq
 8008196:	089b      	lsreq	r3, r3, #2
 8008198:	3002      	addeq	r0, #2
 800819a:	07d9      	lsls	r1, r3, #31
 800819c:	d403      	bmi.n	80081a6 <__lo0bits+0x4e>
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	f100 0001 	add.w	r0, r0, #1
 80081a4:	d003      	beq.n	80081ae <__lo0bits+0x56>
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	4770      	bx	lr
 80081aa:	2000      	movs	r0, #0
 80081ac:	4770      	bx	lr
 80081ae:	2020      	movs	r0, #32
 80081b0:	4770      	bx	lr
	...

080081b4 <__i2b>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	460c      	mov	r4, r1
 80081b8:	2101      	movs	r1, #1
 80081ba:	f7ff ff05 	bl	8007fc8 <_Balloc>
 80081be:	4602      	mov	r2, r0
 80081c0:	b928      	cbnz	r0, 80081ce <__i2b+0x1a>
 80081c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081c6:	4b04      	ldr	r3, [pc, #16]	; (80081d8 <__i2b+0x24>)
 80081c8:	4804      	ldr	r0, [pc, #16]	; (80081dc <__i2b+0x28>)
 80081ca:	f000 fc49 	bl	8008a60 <__assert_func>
 80081ce:	2301      	movs	r3, #1
 80081d0:	6144      	str	r4, [r0, #20]
 80081d2:	6103      	str	r3, [r0, #16]
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	bf00      	nop
 80081d8:	08009337 	.word	0x08009337
 80081dc:	08009348 	.word	0x08009348

080081e0 <__multiply>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4691      	mov	r9, r2
 80081e6:	690a      	ldr	r2, [r1, #16]
 80081e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081ec:	460c      	mov	r4, r1
 80081ee:	429a      	cmp	r2, r3
 80081f0:	bfbe      	ittt	lt
 80081f2:	460b      	movlt	r3, r1
 80081f4:	464c      	movlt	r4, r9
 80081f6:	4699      	movlt	r9, r3
 80081f8:	6927      	ldr	r7, [r4, #16]
 80081fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	6861      	ldr	r1, [r4, #4]
 8008202:	eb07 060a 	add.w	r6, r7, sl
 8008206:	42b3      	cmp	r3, r6
 8008208:	b085      	sub	sp, #20
 800820a:	bfb8      	it	lt
 800820c:	3101      	addlt	r1, #1
 800820e:	f7ff fedb 	bl	8007fc8 <_Balloc>
 8008212:	b930      	cbnz	r0, 8008222 <__multiply+0x42>
 8008214:	4602      	mov	r2, r0
 8008216:	f240 115d 	movw	r1, #349	; 0x15d
 800821a:	4b43      	ldr	r3, [pc, #268]	; (8008328 <__multiply+0x148>)
 800821c:	4843      	ldr	r0, [pc, #268]	; (800832c <__multiply+0x14c>)
 800821e:	f000 fc1f 	bl	8008a60 <__assert_func>
 8008222:	f100 0514 	add.w	r5, r0, #20
 8008226:	462b      	mov	r3, r5
 8008228:	2200      	movs	r2, #0
 800822a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800822e:	4543      	cmp	r3, r8
 8008230:	d321      	bcc.n	8008276 <__multiply+0x96>
 8008232:	f104 0314 	add.w	r3, r4, #20
 8008236:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800823a:	f109 0314 	add.w	r3, r9, #20
 800823e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008242:	9202      	str	r2, [sp, #8]
 8008244:	1b3a      	subs	r2, r7, r4
 8008246:	3a15      	subs	r2, #21
 8008248:	f022 0203 	bic.w	r2, r2, #3
 800824c:	3204      	adds	r2, #4
 800824e:	f104 0115 	add.w	r1, r4, #21
 8008252:	428f      	cmp	r7, r1
 8008254:	bf38      	it	cc
 8008256:	2204      	movcc	r2, #4
 8008258:	9201      	str	r2, [sp, #4]
 800825a:	9a02      	ldr	r2, [sp, #8]
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d80c      	bhi.n	800827c <__multiply+0x9c>
 8008262:	2e00      	cmp	r6, #0
 8008264:	dd03      	ble.n	800826e <__multiply+0x8e>
 8008266:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800826a:	2b00      	cmp	r3, #0
 800826c:	d059      	beq.n	8008322 <__multiply+0x142>
 800826e:	6106      	str	r6, [r0, #16]
 8008270:	b005      	add	sp, #20
 8008272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008276:	f843 2b04 	str.w	r2, [r3], #4
 800827a:	e7d8      	b.n	800822e <__multiply+0x4e>
 800827c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008280:	f1ba 0f00 	cmp.w	sl, #0
 8008284:	d023      	beq.n	80082ce <__multiply+0xee>
 8008286:	46a9      	mov	r9, r5
 8008288:	f04f 0c00 	mov.w	ip, #0
 800828c:	f104 0e14 	add.w	lr, r4, #20
 8008290:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008294:	f8d9 1000 	ldr.w	r1, [r9]
 8008298:	fa1f fb82 	uxth.w	fp, r2
 800829c:	b289      	uxth	r1, r1
 800829e:	fb0a 110b 	mla	r1, sl, fp, r1
 80082a2:	4461      	add	r1, ip
 80082a4:	f8d9 c000 	ldr.w	ip, [r9]
 80082a8:	0c12      	lsrs	r2, r2, #16
 80082aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082ae:	fb0a c202 	mla	r2, sl, r2, ip
 80082b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082b6:	b289      	uxth	r1, r1
 80082b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082bc:	4577      	cmp	r7, lr
 80082be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082c2:	f849 1b04 	str.w	r1, [r9], #4
 80082c6:	d8e3      	bhi.n	8008290 <__multiply+0xb0>
 80082c8:	9a01      	ldr	r2, [sp, #4]
 80082ca:	f845 c002 	str.w	ip, [r5, r2]
 80082ce:	9a03      	ldr	r2, [sp, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082d6:	f1b9 0f00 	cmp.w	r9, #0
 80082da:	d020      	beq.n	800831e <__multiply+0x13e>
 80082dc:	46ae      	mov	lr, r5
 80082de:	f04f 0a00 	mov.w	sl, #0
 80082e2:	6829      	ldr	r1, [r5, #0]
 80082e4:	f104 0c14 	add.w	ip, r4, #20
 80082e8:	f8bc b000 	ldrh.w	fp, [ip]
 80082ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082f0:	b289      	uxth	r1, r1
 80082f2:	fb09 220b 	mla	r2, r9, fp, r2
 80082f6:	4492      	add	sl, r2
 80082f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008300:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008304:	f8be 1000 	ldrh.w	r1, [lr]
 8008308:	0c12      	lsrs	r2, r2, #16
 800830a:	fb09 1102 	mla	r1, r9, r2, r1
 800830e:	4567      	cmp	r7, ip
 8008310:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008318:	d8e6      	bhi.n	80082e8 <__multiply+0x108>
 800831a:	9a01      	ldr	r2, [sp, #4]
 800831c:	50a9      	str	r1, [r5, r2]
 800831e:	3504      	adds	r5, #4
 8008320:	e79b      	b.n	800825a <__multiply+0x7a>
 8008322:	3e01      	subs	r6, #1
 8008324:	e79d      	b.n	8008262 <__multiply+0x82>
 8008326:	bf00      	nop
 8008328:	08009337 	.word	0x08009337
 800832c:	08009348 	.word	0x08009348

08008330 <__pow5mult>:
 8008330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008334:	4615      	mov	r5, r2
 8008336:	f012 0203 	ands.w	r2, r2, #3
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	d007      	beq.n	8008350 <__pow5mult+0x20>
 8008340:	4c25      	ldr	r4, [pc, #148]	; (80083d8 <__pow5mult+0xa8>)
 8008342:	3a01      	subs	r2, #1
 8008344:	2300      	movs	r3, #0
 8008346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800834a:	f7ff fe9f 	bl	800808c <__multadd>
 800834e:	4607      	mov	r7, r0
 8008350:	10ad      	asrs	r5, r5, #2
 8008352:	d03d      	beq.n	80083d0 <__pow5mult+0xa0>
 8008354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008356:	b97c      	cbnz	r4, 8008378 <__pow5mult+0x48>
 8008358:	2010      	movs	r0, #16
 800835a:	f7ff fe13 	bl	8007f84 <malloc>
 800835e:	4602      	mov	r2, r0
 8008360:	6270      	str	r0, [r6, #36]	; 0x24
 8008362:	b928      	cbnz	r0, 8008370 <__pow5mult+0x40>
 8008364:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008368:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <__pow5mult+0xac>)
 800836a:	481d      	ldr	r0, [pc, #116]	; (80083e0 <__pow5mult+0xb0>)
 800836c:	f000 fb78 	bl	8008a60 <__assert_func>
 8008370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008374:	6004      	str	r4, [r0, #0]
 8008376:	60c4      	str	r4, [r0, #12]
 8008378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800837c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008380:	b94c      	cbnz	r4, 8008396 <__pow5mult+0x66>
 8008382:	f240 2171 	movw	r1, #625	; 0x271
 8008386:	4630      	mov	r0, r6
 8008388:	f7ff ff14 	bl	80081b4 <__i2b>
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	f8c8 0008 	str.w	r0, [r8, #8]
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	f04f 0900 	mov.w	r9, #0
 800839a:	07eb      	lsls	r3, r5, #31
 800839c:	d50a      	bpl.n	80083b4 <__pow5mult+0x84>
 800839e:	4639      	mov	r1, r7
 80083a0:	4622      	mov	r2, r4
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7ff ff1c 	bl	80081e0 <__multiply>
 80083a8:	4680      	mov	r8, r0
 80083aa:	4639      	mov	r1, r7
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff fe4b 	bl	8008048 <_Bfree>
 80083b2:	4647      	mov	r7, r8
 80083b4:	106d      	asrs	r5, r5, #1
 80083b6:	d00b      	beq.n	80083d0 <__pow5mult+0xa0>
 80083b8:	6820      	ldr	r0, [r4, #0]
 80083ba:	b938      	cbnz	r0, 80083cc <__pow5mult+0x9c>
 80083bc:	4622      	mov	r2, r4
 80083be:	4621      	mov	r1, r4
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ff0d 	bl	80081e0 <__multiply>
 80083c6:	6020      	str	r0, [r4, #0]
 80083c8:	f8c0 9000 	str.w	r9, [r0]
 80083cc:	4604      	mov	r4, r0
 80083ce:	e7e4      	b.n	800839a <__pow5mult+0x6a>
 80083d0:	4638      	mov	r0, r7
 80083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d6:	bf00      	nop
 80083d8:	08009498 	.word	0x08009498
 80083dc:	080092c5 	.word	0x080092c5
 80083e0:	08009348 	.word	0x08009348

080083e4 <__lshift>:
 80083e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	460c      	mov	r4, r1
 80083ea:	4607      	mov	r7, r0
 80083ec:	4691      	mov	r9, r2
 80083ee:	6923      	ldr	r3, [r4, #16]
 80083f0:	6849      	ldr	r1, [r1, #4]
 80083f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083fc:	f108 0601 	add.w	r6, r8, #1
 8008400:	42b3      	cmp	r3, r6
 8008402:	db0b      	blt.n	800841c <__lshift+0x38>
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff fddf 	bl	8007fc8 <_Balloc>
 800840a:	4605      	mov	r5, r0
 800840c:	b948      	cbnz	r0, 8008422 <__lshift+0x3e>
 800840e:	4602      	mov	r2, r0
 8008410:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008414:	4b29      	ldr	r3, [pc, #164]	; (80084bc <__lshift+0xd8>)
 8008416:	482a      	ldr	r0, [pc, #168]	; (80084c0 <__lshift+0xdc>)
 8008418:	f000 fb22 	bl	8008a60 <__assert_func>
 800841c:	3101      	adds	r1, #1
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	e7ee      	b.n	8008400 <__lshift+0x1c>
 8008422:	2300      	movs	r3, #0
 8008424:	f100 0114 	add.w	r1, r0, #20
 8008428:	f100 0210 	add.w	r2, r0, #16
 800842c:	4618      	mov	r0, r3
 800842e:	4553      	cmp	r3, sl
 8008430:	db37      	blt.n	80084a2 <__lshift+0xbe>
 8008432:	6920      	ldr	r0, [r4, #16]
 8008434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008438:	f104 0314 	add.w	r3, r4, #20
 800843c:	f019 091f 	ands.w	r9, r9, #31
 8008440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008448:	d02f      	beq.n	80084aa <__lshift+0xc6>
 800844a:	468a      	mov	sl, r1
 800844c:	f04f 0c00 	mov.w	ip, #0
 8008450:	f1c9 0e20 	rsb	lr, r9, #32
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	fa02 f209 	lsl.w	r2, r2, r9
 800845a:	ea42 020c 	orr.w	r2, r2, ip
 800845e:	f84a 2b04 	str.w	r2, [sl], #4
 8008462:	f853 2b04 	ldr.w	r2, [r3], #4
 8008466:	4298      	cmp	r0, r3
 8008468:	fa22 fc0e 	lsr.w	ip, r2, lr
 800846c:	d8f2      	bhi.n	8008454 <__lshift+0x70>
 800846e:	1b03      	subs	r3, r0, r4
 8008470:	3b15      	subs	r3, #21
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	3304      	adds	r3, #4
 8008478:	f104 0215 	add.w	r2, r4, #21
 800847c:	4290      	cmp	r0, r2
 800847e:	bf38      	it	cc
 8008480:	2304      	movcc	r3, #4
 8008482:	f841 c003 	str.w	ip, [r1, r3]
 8008486:	f1bc 0f00 	cmp.w	ip, #0
 800848a:	d001      	beq.n	8008490 <__lshift+0xac>
 800848c:	f108 0602 	add.w	r6, r8, #2
 8008490:	3e01      	subs	r6, #1
 8008492:	4638      	mov	r0, r7
 8008494:	4621      	mov	r1, r4
 8008496:	612e      	str	r6, [r5, #16]
 8008498:	f7ff fdd6 	bl	8008048 <_Bfree>
 800849c:	4628      	mov	r0, r5
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084a6:	3301      	adds	r3, #1
 80084a8:	e7c1      	b.n	800842e <__lshift+0x4a>
 80084aa:	3904      	subs	r1, #4
 80084ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b0:	4298      	cmp	r0, r3
 80084b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80084b6:	d8f9      	bhi.n	80084ac <__lshift+0xc8>
 80084b8:	e7ea      	b.n	8008490 <__lshift+0xac>
 80084ba:	bf00      	nop
 80084bc:	08009337 	.word	0x08009337
 80084c0:	08009348 	.word	0x08009348

080084c4 <__mcmp>:
 80084c4:	4603      	mov	r3, r0
 80084c6:	690a      	ldr	r2, [r1, #16]
 80084c8:	6900      	ldr	r0, [r0, #16]
 80084ca:	b530      	push	{r4, r5, lr}
 80084cc:	1a80      	subs	r0, r0, r2
 80084ce:	d10d      	bne.n	80084ec <__mcmp+0x28>
 80084d0:	3314      	adds	r3, #20
 80084d2:	3114      	adds	r1, #20
 80084d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084e4:	4295      	cmp	r5, r2
 80084e6:	d002      	beq.n	80084ee <__mcmp+0x2a>
 80084e8:	d304      	bcc.n	80084f4 <__mcmp+0x30>
 80084ea:	2001      	movs	r0, #1
 80084ec:	bd30      	pop	{r4, r5, pc}
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	d3f4      	bcc.n	80084dc <__mcmp+0x18>
 80084f2:	e7fb      	b.n	80084ec <__mcmp+0x28>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e7f8      	b.n	80084ec <__mcmp+0x28>
	...

080084fc <__mdiff>:
 80084fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	460d      	mov	r5, r1
 8008502:	4607      	mov	r7, r0
 8008504:	4611      	mov	r1, r2
 8008506:	4628      	mov	r0, r5
 8008508:	4614      	mov	r4, r2
 800850a:	f7ff ffdb 	bl	80084c4 <__mcmp>
 800850e:	1e06      	subs	r6, r0, #0
 8008510:	d111      	bne.n	8008536 <__mdiff+0x3a>
 8008512:	4631      	mov	r1, r6
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff fd57 	bl	8007fc8 <_Balloc>
 800851a:	4602      	mov	r2, r0
 800851c:	b928      	cbnz	r0, 800852a <__mdiff+0x2e>
 800851e:	f240 2132 	movw	r1, #562	; 0x232
 8008522:	4b3a      	ldr	r3, [pc, #232]	; (800860c <__mdiff+0x110>)
 8008524:	483a      	ldr	r0, [pc, #232]	; (8008610 <__mdiff+0x114>)
 8008526:	f000 fa9b 	bl	8008a60 <__assert_func>
 800852a:	2301      	movs	r3, #1
 800852c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008530:	4610      	mov	r0, r2
 8008532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	bfa4      	itt	ge
 8008538:	4623      	movge	r3, r4
 800853a:	462c      	movge	r4, r5
 800853c:	4638      	mov	r0, r7
 800853e:	6861      	ldr	r1, [r4, #4]
 8008540:	bfa6      	itte	ge
 8008542:	461d      	movge	r5, r3
 8008544:	2600      	movge	r6, #0
 8008546:	2601      	movlt	r6, #1
 8008548:	f7ff fd3e 	bl	8007fc8 <_Balloc>
 800854c:	4602      	mov	r2, r0
 800854e:	b918      	cbnz	r0, 8008558 <__mdiff+0x5c>
 8008550:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008554:	4b2d      	ldr	r3, [pc, #180]	; (800860c <__mdiff+0x110>)
 8008556:	e7e5      	b.n	8008524 <__mdiff+0x28>
 8008558:	f102 0814 	add.w	r8, r2, #20
 800855c:	46c2      	mov	sl, r8
 800855e:	f04f 0c00 	mov.w	ip, #0
 8008562:	6927      	ldr	r7, [r4, #16]
 8008564:	60c6      	str	r6, [r0, #12]
 8008566:	692e      	ldr	r6, [r5, #16]
 8008568:	f104 0014 	add.w	r0, r4, #20
 800856c:	f105 0914 	add.w	r9, r5, #20
 8008570:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008574:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008578:	3410      	adds	r4, #16
 800857a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800857e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008582:	fa1f f18b 	uxth.w	r1, fp
 8008586:	448c      	add	ip, r1
 8008588:	b299      	uxth	r1, r3
 800858a:	0c1b      	lsrs	r3, r3, #16
 800858c:	ebac 0101 	sub.w	r1, ip, r1
 8008590:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008594:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008598:	b289      	uxth	r1, r1
 800859a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800859e:	454e      	cmp	r6, r9
 80085a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80085a4:	f84a 3b04 	str.w	r3, [sl], #4
 80085a8:	d8e7      	bhi.n	800857a <__mdiff+0x7e>
 80085aa:	1b73      	subs	r3, r6, r5
 80085ac:	3b15      	subs	r3, #21
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	3515      	adds	r5, #21
 80085b4:	3304      	adds	r3, #4
 80085b6:	42ae      	cmp	r6, r5
 80085b8:	bf38      	it	cc
 80085ba:	2304      	movcc	r3, #4
 80085bc:	4418      	add	r0, r3
 80085be:	4443      	add	r3, r8
 80085c0:	461e      	mov	r6, r3
 80085c2:	4605      	mov	r5, r0
 80085c4:	4575      	cmp	r5, lr
 80085c6:	d30e      	bcc.n	80085e6 <__mdiff+0xea>
 80085c8:	f10e 0103 	add.w	r1, lr, #3
 80085cc:	1a09      	subs	r1, r1, r0
 80085ce:	f021 0103 	bic.w	r1, r1, #3
 80085d2:	3803      	subs	r0, #3
 80085d4:	4586      	cmp	lr, r0
 80085d6:	bf38      	it	cc
 80085d8:	2100      	movcc	r1, #0
 80085da:	4419      	add	r1, r3
 80085dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80085e0:	b18b      	cbz	r3, 8008606 <__mdiff+0x10a>
 80085e2:	6117      	str	r7, [r2, #16]
 80085e4:	e7a4      	b.n	8008530 <__mdiff+0x34>
 80085e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80085ea:	fa1f f188 	uxth.w	r1, r8
 80085ee:	4461      	add	r1, ip
 80085f0:	140c      	asrs	r4, r1, #16
 80085f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085f6:	b289      	uxth	r1, r1
 80085f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80085fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008600:	f846 1b04 	str.w	r1, [r6], #4
 8008604:	e7de      	b.n	80085c4 <__mdiff+0xc8>
 8008606:	3f01      	subs	r7, #1
 8008608:	e7e8      	b.n	80085dc <__mdiff+0xe0>
 800860a:	bf00      	nop
 800860c:	08009337 	.word	0x08009337
 8008610:	08009348 	.word	0x08009348

08008614 <__d2b>:
 8008614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008618:	2101      	movs	r1, #1
 800861a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800861e:	4690      	mov	r8, r2
 8008620:	461d      	mov	r5, r3
 8008622:	f7ff fcd1 	bl	8007fc8 <_Balloc>
 8008626:	4604      	mov	r4, r0
 8008628:	b930      	cbnz	r0, 8008638 <__d2b+0x24>
 800862a:	4602      	mov	r2, r0
 800862c:	f240 310a 	movw	r1, #778	; 0x30a
 8008630:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <__d2b+0xb0>)
 8008632:	4825      	ldr	r0, [pc, #148]	; (80086c8 <__d2b+0xb4>)
 8008634:	f000 fa14 	bl	8008a60 <__assert_func>
 8008638:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800863c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008640:	bb2d      	cbnz	r5, 800868e <__d2b+0x7a>
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f1b8 0300 	subs.w	r3, r8, #0
 8008648:	d026      	beq.n	8008698 <__d2b+0x84>
 800864a:	4668      	mov	r0, sp
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	f7ff fd83 	bl	8008158 <__lo0bits>
 8008652:	9900      	ldr	r1, [sp, #0]
 8008654:	b1f0      	cbz	r0, 8008694 <__d2b+0x80>
 8008656:	9a01      	ldr	r2, [sp, #4]
 8008658:	f1c0 0320 	rsb	r3, r0, #32
 800865c:	fa02 f303 	lsl.w	r3, r2, r3
 8008660:	430b      	orrs	r3, r1
 8008662:	40c2      	lsrs	r2, r0
 8008664:	6163      	str	r3, [r4, #20]
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf14      	ite	ne
 800866e:	2102      	movne	r1, #2
 8008670:	2101      	moveq	r1, #1
 8008672:	61a3      	str	r3, [r4, #24]
 8008674:	6121      	str	r1, [r4, #16]
 8008676:	b1c5      	cbz	r5, 80086aa <__d2b+0x96>
 8008678:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800867c:	4405      	add	r5, r0
 800867e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008682:	603d      	str	r5, [r7, #0]
 8008684:	6030      	str	r0, [r6, #0]
 8008686:	4620      	mov	r0, r4
 8008688:	b002      	add	sp, #8
 800868a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008692:	e7d6      	b.n	8008642 <__d2b+0x2e>
 8008694:	6161      	str	r1, [r4, #20]
 8008696:	e7e7      	b.n	8008668 <__d2b+0x54>
 8008698:	a801      	add	r0, sp, #4
 800869a:	f7ff fd5d 	bl	8008158 <__lo0bits>
 800869e:	2101      	movs	r1, #1
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	6121      	str	r1, [r4, #16]
 80086a4:	6163      	str	r3, [r4, #20]
 80086a6:	3020      	adds	r0, #32
 80086a8:	e7e5      	b.n	8008676 <__d2b+0x62>
 80086aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80086ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086b2:	6038      	str	r0, [r7, #0]
 80086b4:	6918      	ldr	r0, [r3, #16]
 80086b6:	f7ff fd2f 	bl	8008118 <__hi0bits>
 80086ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80086be:	6031      	str	r1, [r6, #0]
 80086c0:	e7e1      	b.n	8008686 <__d2b+0x72>
 80086c2:	bf00      	nop
 80086c4:	08009337 	.word	0x08009337
 80086c8:	08009348 	.word	0x08009348

080086cc <_calloc_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	fba1 5402 	umull	r5, r4, r1, r2
 80086d2:	b934      	cbnz	r4, 80086e2 <_calloc_r+0x16>
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7fd ff9b 	bl	8006610 <_malloc_r>
 80086da:	4606      	mov	r6, r0
 80086dc:	b928      	cbnz	r0, 80086ea <_calloc_r+0x1e>
 80086de:	4630      	mov	r0, r6
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	220c      	movs	r2, #12
 80086e4:	2600      	movs	r6, #0
 80086e6:	6002      	str	r2, [r0, #0]
 80086e8:	e7f9      	b.n	80086de <_calloc_r+0x12>
 80086ea:	462a      	mov	r2, r5
 80086ec:	4621      	mov	r1, r4
 80086ee:	f7fd ff66 	bl	80065be <memset>
 80086f2:	e7f4      	b.n	80086de <_calloc_r+0x12>

080086f4 <_free_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d040      	beq.n	800877e <_free_r+0x8a>
 80086fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008700:	1f0c      	subs	r4, r1, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	bfb8      	it	lt
 8008706:	18e4      	addlt	r4, r4, r3
 8008708:	f7ff fc52 	bl	8007fb0 <__malloc_lock>
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <_free_r+0x8c>)
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	b933      	cbnz	r3, 8008720 <_free_r+0x2c>
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	6014      	str	r4, [r2, #0]
 8008716:	4628      	mov	r0, r5
 8008718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871c:	f7ff bc4e 	b.w	8007fbc <__malloc_unlock>
 8008720:	42a3      	cmp	r3, r4
 8008722:	d908      	bls.n	8008736 <_free_r+0x42>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	1821      	adds	r1, r4, r0
 8008728:	428b      	cmp	r3, r1
 800872a:	bf01      	itttt	eq
 800872c:	6819      	ldreq	r1, [r3, #0]
 800872e:	685b      	ldreq	r3, [r3, #4]
 8008730:	1809      	addeq	r1, r1, r0
 8008732:	6021      	streq	r1, [r4, #0]
 8008734:	e7ed      	b.n	8008712 <_free_r+0x1e>
 8008736:	461a      	mov	r2, r3
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	b10b      	cbz	r3, 8008740 <_free_r+0x4c>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d9fa      	bls.n	8008736 <_free_r+0x42>
 8008740:	6811      	ldr	r1, [r2, #0]
 8008742:	1850      	adds	r0, r2, r1
 8008744:	42a0      	cmp	r0, r4
 8008746:	d10b      	bne.n	8008760 <_free_r+0x6c>
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	4401      	add	r1, r0
 800874c:	1850      	adds	r0, r2, r1
 800874e:	4283      	cmp	r3, r0
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	d1e0      	bne.n	8008716 <_free_r+0x22>
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4401      	add	r1, r0
 800875a:	6011      	str	r1, [r2, #0]
 800875c:	6053      	str	r3, [r2, #4]
 800875e:	e7da      	b.n	8008716 <_free_r+0x22>
 8008760:	d902      	bls.n	8008768 <_free_r+0x74>
 8008762:	230c      	movs	r3, #12
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	e7d6      	b.n	8008716 <_free_r+0x22>
 8008768:	6820      	ldr	r0, [r4, #0]
 800876a:	1821      	adds	r1, r4, r0
 800876c:	428b      	cmp	r3, r1
 800876e:	bf01      	itttt	eq
 8008770:	6819      	ldreq	r1, [r3, #0]
 8008772:	685b      	ldreq	r3, [r3, #4]
 8008774:	1809      	addeq	r1, r1, r0
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6063      	str	r3, [r4, #4]
 800877a:	6054      	str	r4, [r2, #4]
 800877c:	e7cb      	b.n	8008716 <_free_r+0x22>
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	2000079c 	.word	0x2000079c

08008784 <__ssputs_r>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	688e      	ldr	r6, [r1, #8]
 800878a:	4682      	mov	sl, r0
 800878c:	429e      	cmp	r6, r3
 800878e:	460c      	mov	r4, r1
 8008790:	4690      	mov	r8, r2
 8008792:	461f      	mov	r7, r3
 8008794:	d838      	bhi.n	8008808 <__ssputs_r+0x84>
 8008796:	898a      	ldrh	r2, [r1, #12]
 8008798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800879c:	d032      	beq.n	8008804 <__ssputs_r+0x80>
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	6909      	ldr	r1, [r1, #16]
 80087a2:	3301      	adds	r3, #1
 80087a4:	eba5 0901 	sub.w	r9, r5, r1
 80087a8:	6965      	ldr	r5, [r4, #20]
 80087aa:	444b      	add	r3, r9
 80087ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087b4:	106d      	asrs	r5, r5, #1
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf38      	it	cc
 80087ba:	461d      	movcc	r5, r3
 80087bc:	0553      	lsls	r3, r2, #21
 80087be:	d531      	bpl.n	8008824 <__ssputs_r+0xa0>
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7fd ff25 	bl	8006610 <_malloc_r>
 80087c6:	4606      	mov	r6, r0
 80087c8:	b950      	cbnz	r0, 80087e0 <__ssputs_r+0x5c>
 80087ca:	230c      	movs	r3, #12
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	f8ca 3000 	str.w	r3, [sl]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e0:	464a      	mov	r2, r9
 80087e2:	6921      	ldr	r1, [r4, #16]
 80087e4:	f7fd fedd 	bl	80065a2 <memcpy>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	6126      	str	r6, [r4, #16]
 80087f6:	444e      	add	r6, r9
 80087f8:	6026      	str	r6, [r4, #0]
 80087fa:	463e      	mov	r6, r7
 80087fc:	6165      	str	r5, [r4, #20]
 80087fe:	eba5 0509 	sub.w	r5, r5, r9
 8008802:	60a5      	str	r5, [r4, #8]
 8008804:	42be      	cmp	r6, r7
 8008806:	d900      	bls.n	800880a <__ssputs_r+0x86>
 8008808:	463e      	mov	r6, r7
 800880a:	4632      	mov	r2, r6
 800880c:	4641      	mov	r1, r8
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	f000 f968 	bl	8008ae4 <memmove>
 8008814:	68a3      	ldr	r3, [r4, #8]
 8008816:	2000      	movs	r0, #0
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	60a3      	str	r3, [r4, #8]
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	4433      	add	r3, r6
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	e7db      	b.n	80087dc <__ssputs_r+0x58>
 8008824:	462a      	mov	r2, r5
 8008826:	f000 f977 	bl	8008b18 <_realloc_r>
 800882a:	4606      	mov	r6, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d1e1      	bne.n	80087f4 <__ssputs_r+0x70>
 8008830:	4650      	mov	r0, sl
 8008832:	6921      	ldr	r1, [r4, #16]
 8008834:	f7ff ff5e 	bl	80086f4 <_free_r>
 8008838:	e7c7      	b.n	80087ca <__ssputs_r+0x46>
	...

0800883c <_svfiprintf_r>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	4698      	mov	r8, r3
 8008842:	898b      	ldrh	r3, [r1, #12]
 8008844:	4607      	mov	r7, r0
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	460d      	mov	r5, r1
 800884a:	4614      	mov	r4, r2
 800884c:	b09d      	sub	sp, #116	; 0x74
 800884e:	d50e      	bpl.n	800886e <_svfiprintf_r+0x32>
 8008850:	690b      	ldr	r3, [r1, #16]
 8008852:	b963      	cbnz	r3, 800886e <_svfiprintf_r+0x32>
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	f7fd fedb 	bl	8006610 <_malloc_r>
 800885a:	6028      	str	r0, [r5, #0]
 800885c:	6128      	str	r0, [r5, #16]
 800885e:	b920      	cbnz	r0, 800886a <_svfiprintf_r+0x2e>
 8008860:	230c      	movs	r3, #12
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e0d1      	b.n	8008a0e <_svfiprintf_r+0x1d2>
 800886a:	2340      	movs	r3, #64	; 0x40
 800886c:	616b      	str	r3, [r5, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	9309      	str	r3, [sp, #36]	; 0x24
 8008872:	2320      	movs	r3, #32
 8008874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008878:	2330      	movs	r3, #48	; 0x30
 800887a:	f04f 0901 	mov.w	r9, #1
 800887e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008882:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a28 <_svfiprintf_r+0x1ec>
 8008886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800888a:	4623      	mov	r3, r4
 800888c:	469a      	mov	sl, r3
 800888e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008892:	b10a      	cbz	r2, 8008898 <_svfiprintf_r+0x5c>
 8008894:	2a25      	cmp	r2, #37	; 0x25
 8008896:	d1f9      	bne.n	800888c <_svfiprintf_r+0x50>
 8008898:	ebba 0b04 	subs.w	fp, sl, r4
 800889c:	d00b      	beq.n	80088b6 <_svfiprintf_r+0x7a>
 800889e:	465b      	mov	r3, fp
 80088a0:	4622      	mov	r2, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	4638      	mov	r0, r7
 80088a6:	f7ff ff6d 	bl	8008784 <__ssputs_r>
 80088aa:	3001      	adds	r0, #1
 80088ac:	f000 80aa 	beq.w	8008a04 <_svfiprintf_r+0x1c8>
 80088b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b2:	445a      	add	r2, fp
 80088b4:	9209      	str	r2, [sp, #36]	; 0x24
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80a2 	beq.w	8008a04 <_svfiprintf_r+0x1c8>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088ca:	f10a 0a01 	add.w	sl, sl, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d6:	931a      	str	r3, [sp, #104]	; 0x68
 80088d8:	4654      	mov	r4, sl
 80088da:	2205      	movs	r2, #5
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	4851      	ldr	r0, [pc, #324]	; (8008a28 <_svfiprintf_r+0x1ec>)
 80088e2:	f7ff fb57 	bl	8007f94 <memchr>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	b9d8      	cbnz	r0, 8008922 <_svfiprintf_r+0xe6>
 80088ea:	06d0      	lsls	r0, r2, #27
 80088ec:	bf44      	itt	mi
 80088ee:	2320      	movmi	r3, #32
 80088f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f4:	0711      	lsls	r1, r2, #28
 80088f6:	bf44      	itt	mi
 80088f8:	232b      	movmi	r3, #43	; 0x2b
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b2a      	cmp	r3, #42	; 0x2a
 8008904:	d015      	beq.n	8008932 <_svfiprintf_r+0xf6>
 8008906:	4654      	mov	r4, sl
 8008908:	2000      	movs	r0, #0
 800890a:	f04f 0c0a 	mov.w	ip, #10
 800890e:	9a07      	ldr	r2, [sp, #28]
 8008910:	4621      	mov	r1, r4
 8008912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008916:	3b30      	subs	r3, #48	; 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d94e      	bls.n	80089ba <_svfiprintf_r+0x17e>
 800891c:	b1b0      	cbz	r0, 800894c <_svfiprintf_r+0x110>
 800891e:	9207      	str	r2, [sp, #28]
 8008920:	e014      	b.n	800894c <_svfiprintf_r+0x110>
 8008922:	eba0 0308 	sub.w	r3, r0, r8
 8008926:	fa09 f303 	lsl.w	r3, r9, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	46a2      	mov	sl, r4
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	e7d2      	b.n	80088d8 <_svfiprintf_r+0x9c>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1d19      	adds	r1, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfbb      	ittet	lt
 800893e:	425b      	neglt	r3, r3
 8008940:	f042 0202 	orrlt.w	r2, r2, #2
 8008944:	9307      	strge	r3, [sp, #28]
 8008946:	9307      	strlt	r3, [sp, #28]
 8008948:	bfb8      	it	lt
 800894a:	9204      	strlt	r2, [sp, #16]
 800894c:	7823      	ldrb	r3, [r4, #0]
 800894e:	2b2e      	cmp	r3, #46	; 0x2e
 8008950:	d10c      	bne.n	800896c <_svfiprintf_r+0x130>
 8008952:	7863      	ldrb	r3, [r4, #1]
 8008954:	2b2a      	cmp	r3, #42	; 0x2a
 8008956:	d135      	bne.n	80089c4 <_svfiprintf_r+0x188>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	3402      	adds	r4, #2
 800895c:	1d1a      	adds	r2, r3, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	9203      	str	r2, [sp, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	bfb8      	it	lt
 8008966:	f04f 33ff 	movlt.w	r3, #4294967295
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008a2c <_svfiprintf_r+0x1f0>
 8008970:	2203      	movs	r2, #3
 8008972:	4650      	mov	r0, sl
 8008974:	7821      	ldrb	r1, [r4, #0]
 8008976:	f7ff fb0d 	bl	8007f94 <memchr>
 800897a:	b140      	cbz	r0, 800898e <_svfiprintf_r+0x152>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	eba0 000a 	sub.w	r0, r0, sl
 8008982:	fa03 f000 	lsl.w	r0, r3, r0
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	3401      	adds	r4, #1
 800898a:	4303      	orrs	r3, r0
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	2206      	movs	r2, #6
 8008994:	4826      	ldr	r0, [pc, #152]	; (8008a30 <_svfiprintf_r+0x1f4>)
 8008996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800899a:	f7ff fafb 	bl	8007f94 <memchr>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d038      	beq.n	8008a14 <_svfiprintf_r+0x1d8>
 80089a2:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <_svfiprintf_r+0x1f8>)
 80089a4:	bb1b      	cbnz	r3, 80089ee <_svfiprintf_r+0x1b2>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	3307      	adds	r3, #7
 80089aa:	f023 0307 	bic.w	r3, r3, #7
 80089ae:	3308      	adds	r3, #8
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b4:	4433      	add	r3, r6
 80089b6:	9309      	str	r3, [sp, #36]	; 0x24
 80089b8:	e767      	b.n	800888a <_svfiprintf_r+0x4e>
 80089ba:	460c      	mov	r4, r1
 80089bc:	2001      	movs	r0, #1
 80089be:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c2:	e7a5      	b.n	8008910 <_svfiprintf_r+0xd4>
 80089c4:	2300      	movs	r3, #0
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4619      	mov	r1, r3
 80089cc:	3401      	adds	r4, #1
 80089ce:	9305      	str	r3, [sp, #20]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d6:	3a30      	subs	r2, #48	; 0x30
 80089d8:	2a09      	cmp	r2, #9
 80089da:	d903      	bls.n	80089e4 <_svfiprintf_r+0x1a8>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0c5      	beq.n	800896c <_svfiprintf_r+0x130>
 80089e0:	9105      	str	r1, [sp, #20]
 80089e2:	e7c3      	b.n	800896c <_svfiprintf_r+0x130>
 80089e4:	4604      	mov	r4, r0
 80089e6:	2301      	movs	r3, #1
 80089e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ec:	e7f0      	b.n	80089d0 <_svfiprintf_r+0x194>
 80089ee:	ab03      	add	r3, sp, #12
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	462a      	mov	r2, r5
 80089f4:	4638      	mov	r0, r7
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <_svfiprintf_r+0x1fc>)
 80089f8:	a904      	add	r1, sp, #16
 80089fa:	f7fd ff1b 	bl	8006834 <_printf_float>
 80089fe:	1c42      	adds	r2, r0, #1
 8008a00:	4606      	mov	r6, r0
 8008a02:	d1d6      	bne.n	80089b2 <_svfiprintf_r+0x176>
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af2c 	bmi.w	8008864 <_svfiprintf_r+0x28>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	b01d      	add	sp, #116	; 0x74
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	ab03      	add	r3, sp, #12
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	462a      	mov	r2, r5
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <_svfiprintf_r+0x1fc>)
 8008a1e:	a904      	add	r1, sp, #16
 8008a20:	f7fe f9a4 	bl	8006d6c <_printf_i>
 8008a24:	e7eb      	b.n	80089fe <_svfiprintf_r+0x1c2>
 8008a26:	bf00      	nop
 8008a28:	080094a4 	.word	0x080094a4
 8008a2c:	080094aa 	.word	0x080094aa
 8008a30:	080094ae 	.word	0x080094ae
 8008a34:	08006835 	.word	0x08006835
 8008a38:	08008785 	.word	0x08008785

08008a3c <_read_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	4d05      	ldr	r5, [pc, #20]	; (8008a5c <_read_r+0x20>)
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f9 fedf 	bl	800280e <_read>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_read_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_read_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	200007a4 	.word	0x200007a4

08008a60 <__assert_func>:
 8008a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a62:	4614      	mov	r4, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <__assert_func+0x2c>)
 8008a68:	4605      	mov	r5, r0
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68d8      	ldr	r0, [r3, #12]
 8008a6e:	b14c      	cbz	r4, 8008a84 <__assert_func+0x24>
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <__assert_func+0x30>)
 8008a72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a76:	9100      	str	r1, [sp, #0]
 8008a78:	462b      	mov	r3, r5
 8008a7a:	4906      	ldr	r1, [pc, #24]	; (8008a94 <__assert_func+0x34>)
 8008a7c:	f000 f80e 	bl	8008a9c <fiprintf>
 8008a80:	f000 fa9e 	bl	8008fc0 <abort>
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <__assert_func+0x38>)
 8008a86:	461c      	mov	r4, r3
 8008a88:	e7f3      	b.n	8008a72 <__assert_func+0x12>
 8008a8a:	bf00      	nop
 8008a8c:	2000000c 	.word	0x2000000c
 8008a90:	080094b5 	.word	0x080094b5
 8008a94:	080094c2 	.word	0x080094c2
 8008a98:	080094f0 	.word	0x080094f0

08008a9c <fiprintf>:
 8008a9c:	b40e      	push	{r1, r2, r3}
 8008a9e:	b503      	push	{r0, r1, lr}
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	4805      	ldr	r0, [pc, #20]	; (8008abc <fiprintf+0x20>)
 8008aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	f000 f889 	bl	8008bc4 <_vfiprintf_r>
 8008ab2:	b002      	add	sp, #8
 8008ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab8:	b003      	add	sp, #12
 8008aba:	4770      	bx	lr
 8008abc:	2000000c 	.word	0x2000000c

08008ac0 <__ascii_mbtowc>:
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	b901      	cbnz	r1, 8008ac6 <__ascii_mbtowc+0x6>
 8008ac4:	a901      	add	r1, sp, #4
 8008ac6:	b142      	cbz	r2, 8008ada <__ascii_mbtowc+0x1a>
 8008ac8:	b14b      	cbz	r3, 8008ade <__ascii_mbtowc+0x1e>
 8008aca:	7813      	ldrb	r3, [r2, #0]
 8008acc:	600b      	str	r3, [r1, #0]
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	1e10      	subs	r0, r2, #0
 8008ad2:	bf18      	it	ne
 8008ad4:	2001      	movne	r0, #1
 8008ad6:	b002      	add	sp, #8
 8008ad8:	4770      	bx	lr
 8008ada:	4610      	mov	r0, r2
 8008adc:	e7fb      	b.n	8008ad6 <__ascii_mbtowc+0x16>
 8008ade:	f06f 0001 	mvn.w	r0, #1
 8008ae2:	e7f8      	b.n	8008ad6 <__ascii_mbtowc+0x16>

08008ae4 <memmove>:
 8008ae4:	4288      	cmp	r0, r1
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	eb01 0402 	add.w	r4, r1, r2
 8008aec:	d902      	bls.n	8008af4 <memmove+0x10>
 8008aee:	4284      	cmp	r4, r0
 8008af0:	4623      	mov	r3, r4
 8008af2:	d807      	bhi.n	8008b04 <memmove+0x20>
 8008af4:	1e43      	subs	r3, r0, #1
 8008af6:	42a1      	cmp	r1, r4
 8008af8:	d008      	beq.n	8008b0c <memmove+0x28>
 8008afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b02:	e7f8      	b.n	8008af6 <memmove+0x12>
 8008b04:	4601      	mov	r1, r0
 8008b06:	4402      	add	r2, r0
 8008b08:	428a      	cmp	r2, r1
 8008b0a:	d100      	bne.n	8008b0e <memmove+0x2a>
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b16:	e7f7      	b.n	8008b08 <memmove+0x24>

08008b18 <_realloc_r>:
 8008b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4614      	mov	r4, r2
 8008b20:	460e      	mov	r6, r1
 8008b22:	b921      	cbnz	r1, 8008b2e <_realloc_r+0x16>
 8008b24:	4611      	mov	r1, r2
 8008b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	f7fd bd71 	b.w	8006610 <_malloc_r>
 8008b2e:	b92a      	cbnz	r2, 8008b3c <_realloc_r+0x24>
 8008b30:	f7ff fde0 	bl	80086f4 <_free_r>
 8008b34:	4625      	mov	r5, r4
 8008b36:	4628      	mov	r0, r5
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3c:	f000 faac 	bl	8009098 <_malloc_usable_size_r>
 8008b40:	4284      	cmp	r4, r0
 8008b42:	4607      	mov	r7, r0
 8008b44:	d802      	bhi.n	8008b4c <_realloc_r+0x34>
 8008b46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b4a:	d812      	bhi.n	8008b72 <_realloc_r+0x5a>
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4640      	mov	r0, r8
 8008b50:	f7fd fd5e 	bl	8006610 <_malloc_r>
 8008b54:	4605      	mov	r5, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d0ed      	beq.n	8008b36 <_realloc_r+0x1e>
 8008b5a:	42bc      	cmp	r4, r7
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	4631      	mov	r1, r6
 8008b60:	bf28      	it	cs
 8008b62:	463a      	movcs	r2, r7
 8008b64:	f7fd fd1d 	bl	80065a2 <memcpy>
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f7ff fdc2 	bl	80086f4 <_free_r>
 8008b70:	e7e1      	b.n	8008b36 <_realloc_r+0x1e>
 8008b72:	4635      	mov	r5, r6
 8008b74:	e7df      	b.n	8008b36 <_realloc_r+0x1e>

08008b76 <__sfputc_r>:
 8008b76:	6893      	ldr	r3, [r2, #8]
 8008b78:	b410      	push	{r4}
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	6093      	str	r3, [r2, #8]
 8008b80:	da07      	bge.n	8008b92 <__sfputc_r+0x1c>
 8008b82:	6994      	ldr	r4, [r2, #24]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	db01      	blt.n	8008b8c <__sfputc_r+0x16>
 8008b88:	290a      	cmp	r1, #10
 8008b8a:	d102      	bne.n	8008b92 <__sfputc_r+0x1c>
 8008b8c:	bc10      	pop	{r4}
 8008b8e:	f000 b949 	b.w	8008e24 <__swbuf_r>
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	1c58      	adds	r0, r3, #1
 8008b96:	6010      	str	r0, [r2, #0]
 8008b98:	7019      	strb	r1, [r3, #0]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	bc10      	pop	{r4}
 8008b9e:	4770      	bx	lr

08008ba0 <__sfputs_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	18d5      	adds	r5, r2, r3
 8008baa:	42ac      	cmp	r4, r5
 8008bac:	d101      	bne.n	8008bb2 <__sfputs_r+0x12>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e007      	b.n	8008bc2 <__sfputs_r+0x22>
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	f7ff ffdc 	bl	8008b76 <__sfputc_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d1f3      	bne.n	8008baa <__sfputs_r+0xa>
 8008bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bc4 <_vfiprintf_r>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	460d      	mov	r5, r1
 8008bca:	4614      	mov	r4, r2
 8008bcc:	4698      	mov	r8, r3
 8008bce:	4606      	mov	r6, r0
 8008bd0:	b09d      	sub	sp, #116	; 0x74
 8008bd2:	b118      	cbz	r0, 8008bdc <_vfiprintf_r+0x18>
 8008bd4:	6983      	ldr	r3, [r0, #24]
 8008bd6:	b90b      	cbnz	r3, 8008bdc <_vfiprintf_r+0x18>
 8008bd8:	f7fd fc1e 	bl	8006418 <__sinit>
 8008bdc:	4b89      	ldr	r3, [pc, #548]	; (8008e04 <_vfiprintf_r+0x240>)
 8008bde:	429d      	cmp	r5, r3
 8008be0:	d11b      	bne.n	8008c1a <_vfiprintf_r+0x56>
 8008be2:	6875      	ldr	r5, [r6, #4]
 8008be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be6:	07d9      	lsls	r1, r3, #31
 8008be8:	d405      	bmi.n	8008bf6 <_vfiprintf_r+0x32>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	059a      	lsls	r2, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_vfiprintf_r+0x32>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf2:	f7fd fcd4 	bl	800659e <__retarget_lock_acquire_recursive>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	071b      	lsls	r3, r3, #28
 8008bfa:	d501      	bpl.n	8008c00 <_vfiprintf_r+0x3c>
 8008bfc:	692b      	ldr	r3, [r5, #16]
 8008bfe:	b9eb      	cbnz	r3, 8008c3c <_vfiprintf_r+0x78>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f96e 	bl	8008ee4 <__swsetup_r>
 8008c08:	b1c0      	cbz	r0, 8008c3c <_vfiprintf_r+0x78>
 8008c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c0c:	07dc      	lsls	r4, r3, #31
 8008c0e:	d50e      	bpl.n	8008c2e <_vfiprintf_r+0x6a>
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	b01d      	add	sp, #116	; 0x74
 8008c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	; (8008e08 <_vfiprintf_r+0x244>)
 8008c1c:	429d      	cmp	r5, r3
 8008c1e:	d101      	bne.n	8008c24 <_vfiprintf_r+0x60>
 8008c20:	68b5      	ldr	r5, [r6, #8]
 8008c22:	e7df      	b.n	8008be4 <_vfiprintf_r+0x20>
 8008c24:	4b79      	ldr	r3, [pc, #484]	; (8008e0c <_vfiprintf_r+0x248>)
 8008c26:	429d      	cmp	r5, r3
 8008c28:	bf08      	it	eq
 8008c2a:	68f5      	ldreq	r5, [r6, #12]
 8008c2c:	e7da      	b.n	8008be4 <_vfiprintf_r+0x20>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	0598      	lsls	r0, r3, #22
 8008c32:	d4ed      	bmi.n	8008c10 <_vfiprintf_r+0x4c>
 8008c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c36:	f7fd fcb3 	bl	80065a0 <__retarget_lock_release_recursive>
 8008c3a:	e7e9      	b.n	8008c10 <_vfiprintf_r+0x4c>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c40:	2320      	movs	r3, #32
 8008c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c46:	2330      	movs	r3, #48	; 0x30
 8008c48:	f04f 0901 	mov.w	r9, #1
 8008c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e10 <_vfiprintf_r+0x24c>
 8008c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c58:	4623      	mov	r3, r4
 8008c5a:	469a      	mov	sl, r3
 8008c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c60:	b10a      	cbz	r2, 8008c66 <_vfiprintf_r+0xa2>
 8008c62:	2a25      	cmp	r2, #37	; 0x25
 8008c64:	d1f9      	bne.n	8008c5a <_vfiprintf_r+0x96>
 8008c66:	ebba 0b04 	subs.w	fp, sl, r4
 8008c6a:	d00b      	beq.n	8008c84 <_vfiprintf_r+0xc0>
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	4622      	mov	r2, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff ff94 	bl	8008ba0 <__sfputs_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f000 80aa 	beq.w	8008dd2 <_vfiprintf_r+0x20e>
 8008c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c80:	445a      	add	r2, fp
 8008c82:	9209      	str	r2, [sp, #36]	; 0x24
 8008c84:	f89a 3000 	ldrb.w	r3, [sl]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80a2 	beq.w	8008dd2 <_vfiprintf_r+0x20e>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f04f 32ff 	mov.w	r2, #4294967295
 8008c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c98:	f10a 0a01 	add.w	sl, sl, #1
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	9307      	str	r3, [sp, #28]
 8008ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ca6:	4654      	mov	r4, sl
 8008ca8:	2205      	movs	r2, #5
 8008caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cae:	4858      	ldr	r0, [pc, #352]	; (8008e10 <_vfiprintf_r+0x24c>)
 8008cb0:	f7ff f970 	bl	8007f94 <memchr>
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	b9d8      	cbnz	r0, 8008cf0 <_vfiprintf_r+0x12c>
 8008cb8:	06d1      	lsls	r1, r2, #27
 8008cba:	bf44      	itt	mi
 8008cbc:	2320      	movmi	r3, #32
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc2:	0713      	lsls	r3, r2, #28
 8008cc4:	bf44      	itt	mi
 8008cc6:	232b      	movmi	r3, #43	; 0x2b
 8008cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd2:	d015      	beq.n	8008d00 <_vfiprintf_r+0x13c>
 8008cd4:	4654      	mov	r4, sl
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f04f 0c0a 	mov.w	ip, #10
 8008cdc:	9a07      	ldr	r2, [sp, #28]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce4:	3b30      	subs	r3, #48	; 0x30
 8008ce6:	2b09      	cmp	r3, #9
 8008ce8:	d94e      	bls.n	8008d88 <_vfiprintf_r+0x1c4>
 8008cea:	b1b0      	cbz	r0, 8008d1a <_vfiprintf_r+0x156>
 8008cec:	9207      	str	r2, [sp, #28]
 8008cee:	e014      	b.n	8008d1a <_vfiprintf_r+0x156>
 8008cf0:	eba0 0308 	sub.w	r3, r0, r8
 8008cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	46a2      	mov	sl, r4
 8008cfc:	9304      	str	r3, [sp, #16]
 8008cfe:	e7d2      	b.n	8008ca6 <_vfiprintf_r+0xe2>
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	1d19      	adds	r1, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	9103      	str	r1, [sp, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bfbb      	ittet	lt
 8008d0c:	425b      	neglt	r3, r3
 8008d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d12:	9307      	strge	r3, [sp, #28]
 8008d14:	9307      	strlt	r3, [sp, #28]
 8008d16:	bfb8      	it	lt
 8008d18:	9204      	strlt	r2, [sp, #16]
 8008d1a:	7823      	ldrb	r3, [r4, #0]
 8008d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d1e:	d10c      	bne.n	8008d3a <_vfiprintf_r+0x176>
 8008d20:	7863      	ldrb	r3, [r4, #1]
 8008d22:	2b2a      	cmp	r3, #42	; 0x2a
 8008d24:	d135      	bne.n	8008d92 <_vfiprintf_r+0x1ce>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	3402      	adds	r4, #2
 8008d2a:	1d1a      	adds	r2, r3, #4
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	9203      	str	r2, [sp, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bfb8      	it	lt
 8008d34:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d38:	9305      	str	r3, [sp, #20]
 8008d3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008e14 <_vfiprintf_r+0x250>
 8008d3e:	2203      	movs	r2, #3
 8008d40:	4650      	mov	r0, sl
 8008d42:	7821      	ldrb	r1, [r4, #0]
 8008d44:	f7ff f926 	bl	8007f94 <memchr>
 8008d48:	b140      	cbz	r0, 8008d5c <_vfiprintf_r+0x198>
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	eba0 000a 	sub.w	r0, r0, sl
 8008d50:	fa03 f000 	lsl.w	r0, r3, r0
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	3401      	adds	r4, #1
 8008d58:	4303      	orrs	r3, r0
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d60:	2206      	movs	r2, #6
 8008d62:	482d      	ldr	r0, [pc, #180]	; (8008e18 <_vfiprintf_r+0x254>)
 8008d64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d68:	f7ff f914 	bl	8007f94 <memchr>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d03f      	beq.n	8008df0 <_vfiprintf_r+0x22c>
 8008d70:	4b2a      	ldr	r3, [pc, #168]	; (8008e1c <_vfiprintf_r+0x258>)
 8008d72:	bb1b      	cbnz	r3, 8008dbc <_vfiprintf_r+0x1f8>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	3307      	adds	r3, #7
 8008d78:	f023 0307 	bic.w	r3, r3, #7
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	9303      	str	r3, [sp, #12]
 8008d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d82:	443b      	add	r3, r7
 8008d84:	9309      	str	r3, [sp, #36]	; 0x24
 8008d86:	e767      	b.n	8008c58 <_vfiprintf_r+0x94>
 8008d88:	460c      	mov	r4, r1
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d90:	e7a5      	b.n	8008cde <_vfiprintf_r+0x11a>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f04f 0c0a 	mov.w	ip, #10
 8008d98:	4619      	mov	r1, r3
 8008d9a:	3401      	adds	r4, #1
 8008d9c:	9305      	str	r3, [sp, #20]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da4:	3a30      	subs	r2, #48	; 0x30
 8008da6:	2a09      	cmp	r2, #9
 8008da8:	d903      	bls.n	8008db2 <_vfiprintf_r+0x1ee>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0c5      	beq.n	8008d3a <_vfiprintf_r+0x176>
 8008dae:	9105      	str	r1, [sp, #20]
 8008db0:	e7c3      	b.n	8008d3a <_vfiprintf_r+0x176>
 8008db2:	4604      	mov	r4, r0
 8008db4:	2301      	movs	r3, #1
 8008db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dba:	e7f0      	b.n	8008d9e <_vfiprintf_r+0x1da>
 8008dbc:	ab03      	add	r3, sp, #12
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <_vfiprintf_r+0x25c>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	f7fd fd34 	bl	8006834 <_printf_float>
 8008dcc:	4607      	mov	r7, r0
 8008dce:	1c78      	adds	r0, r7, #1
 8008dd0:	d1d6      	bne.n	8008d80 <_vfiprintf_r+0x1bc>
 8008dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dd4:	07d9      	lsls	r1, r3, #31
 8008dd6:	d405      	bmi.n	8008de4 <_vfiprintf_r+0x220>
 8008dd8:	89ab      	ldrh	r3, [r5, #12]
 8008dda:	059a      	lsls	r2, r3, #22
 8008ddc:	d402      	bmi.n	8008de4 <_vfiprintf_r+0x220>
 8008dde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de0:	f7fd fbde 	bl	80065a0 <__retarget_lock_release_recursive>
 8008de4:	89ab      	ldrh	r3, [r5, #12]
 8008de6:	065b      	lsls	r3, r3, #25
 8008de8:	f53f af12 	bmi.w	8008c10 <_vfiprintf_r+0x4c>
 8008dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dee:	e711      	b.n	8008c14 <_vfiprintf_r+0x50>
 8008df0:	ab03      	add	r3, sp, #12
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	462a      	mov	r2, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <_vfiprintf_r+0x25c>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	f7fd ffb6 	bl	8006d6c <_printf_i>
 8008e00:	e7e4      	b.n	8008dcc <_vfiprintf_r+0x208>
 8008e02:	bf00      	nop
 8008e04:	08009240 	.word	0x08009240
 8008e08:	08009260 	.word	0x08009260
 8008e0c:	08009220 	.word	0x08009220
 8008e10:	080094a4 	.word	0x080094a4
 8008e14:	080094aa 	.word	0x080094aa
 8008e18:	080094ae 	.word	0x080094ae
 8008e1c:	08006835 	.word	0x08006835
 8008e20:	08008ba1 	.word	0x08008ba1

08008e24 <__swbuf_r>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	460e      	mov	r6, r1
 8008e28:	4614      	mov	r4, r2
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	b118      	cbz	r0, 8008e36 <__swbuf_r+0x12>
 8008e2e:	6983      	ldr	r3, [r0, #24]
 8008e30:	b90b      	cbnz	r3, 8008e36 <__swbuf_r+0x12>
 8008e32:	f7fd faf1 	bl	8006418 <__sinit>
 8008e36:	4b21      	ldr	r3, [pc, #132]	; (8008ebc <__swbuf_r+0x98>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d12b      	bne.n	8008e94 <__swbuf_r+0x70>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	69a3      	ldr	r3, [r4, #24]
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	071a      	lsls	r2, r3, #28
 8008e46:	d52f      	bpl.n	8008ea8 <__swbuf_r+0x84>
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	b36b      	cbz	r3, 8008ea8 <__swbuf_r+0x84>
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	6820      	ldr	r0, [r4, #0]
 8008e50:	b2f6      	uxtb	r6, r6
 8008e52:	1ac0      	subs	r0, r0, r3
 8008e54:	6963      	ldr	r3, [r4, #20]
 8008e56:	4637      	mov	r7, r6
 8008e58:	4283      	cmp	r3, r0
 8008e5a:	dc04      	bgt.n	8008e66 <__swbuf_r+0x42>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f7ff f83e 	bl	8007ee0 <_fflush_r>
 8008e64:	bb30      	cbnz	r0, 8008eb4 <__swbuf_r+0x90>
 8008e66:	68a3      	ldr	r3, [r4, #8]
 8008e68:	3001      	adds	r0, #1
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	60a3      	str	r3, [r4, #8]
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	6022      	str	r2, [r4, #0]
 8008e74:	701e      	strb	r6, [r3, #0]
 8008e76:	6963      	ldr	r3, [r4, #20]
 8008e78:	4283      	cmp	r3, r0
 8008e7a:	d004      	beq.n	8008e86 <__swbuf_r+0x62>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	07db      	lsls	r3, r3, #31
 8008e80:	d506      	bpl.n	8008e90 <__swbuf_r+0x6c>
 8008e82:	2e0a      	cmp	r6, #10
 8008e84:	d104      	bne.n	8008e90 <__swbuf_r+0x6c>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f7ff f829 	bl	8007ee0 <_fflush_r>
 8008e8e:	b988      	cbnz	r0, 8008eb4 <__swbuf_r+0x90>
 8008e90:	4638      	mov	r0, r7
 8008e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <__swbuf_r+0x9c>)
 8008e96:	429c      	cmp	r4, r3
 8008e98:	d101      	bne.n	8008e9e <__swbuf_r+0x7a>
 8008e9a:	68ac      	ldr	r4, [r5, #8]
 8008e9c:	e7cf      	b.n	8008e3e <__swbuf_r+0x1a>
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <__swbuf_r+0xa0>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	bf08      	it	eq
 8008ea4:	68ec      	ldreq	r4, [r5, #12]
 8008ea6:	e7ca      	b.n	8008e3e <__swbuf_r+0x1a>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f000 f81a 	bl	8008ee4 <__swsetup_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d0cb      	beq.n	8008e4c <__swbuf_r+0x28>
 8008eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8008eb8:	e7ea      	b.n	8008e90 <__swbuf_r+0x6c>
 8008eba:	bf00      	nop
 8008ebc:	08009240 	.word	0x08009240
 8008ec0:	08009260 	.word	0x08009260
 8008ec4:	08009220 	.word	0x08009220

08008ec8 <__ascii_wctomb>:
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4608      	mov	r0, r1
 8008ecc:	b141      	cbz	r1, 8008ee0 <__ascii_wctomb+0x18>
 8008ece:	2aff      	cmp	r2, #255	; 0xff
 8008ed0:	d904      	bls.n	8008edc <__ascii_wctomb+0x14>
 8008ed2:	228a      	movs	r2, #138	; 0x8a
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	4770      	bx	lr
 8008edc:	2001      	movs	r0, #1
 8008ede:	700a      	strb	r2, [r1, #0]
 8008ee0:	4770      	bx	lr
	...

08008ee4 <__swsetup_r>:
 8008ee4:	4b32      	ldr	r3, [pc, #200]	; (8008fb0 <__swsetup_r+0xcc>)
 8008ee6:	b570      	push	{r4, r5, r6, lr}
 8008ee8:	681d      	ldr	r5, [r3, #0]
 8008eea:	4606      	mov	r6, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	b125      	cbz	r5, 8008efa <__swsetup_r+0x16>
 8008ef0:	69ab      	ldr	r3, [r5, #24]
 8008ef2:	b913      	cbnz	r3, 8008efa <__swsetup_r+0x16>
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f7fd fa8f 	bl	8006418 <__sinit>
 8008efa:	4b2e      	ldr	r3, [pc, #184]	; (8008fb4 <__swsetup_r+0xd0>)
 8008efc:	429c      	cmp	r4, r3
 8008efe:	d10f      	bne.n	8008f20 <__swsetup_r+0x3c>
 8008f00:	686c      	ldr	r4, [r5, #4]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f08:	0719      	lsls	r1, r3, #28
 8008f0a:	d42c      	bmi.n	8008f66 <__swsetup_r+0x82>
 8008f0c:	06dd      	lsls	r5, r3, #27
 8008f0e:	d411      	bmi.n	8008f34 <__swsetup_r+0x50>
 8008f10:	2309      	movs	r3, #9
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	e03e      	b.n	8008f9e <__swsetup_r+0xba>
 8008f20:	4b25      	ldr	r3, [pc, #148]	; (8008fb8 <__swsetup_r+0xd4>)
 8008f22:	429c      	cmp	r4, r3
 8008f24:	d101      	bne.n	8008f2a <__swsetup_r+0x46>
 8008f26:	68ac      	ldr	r4, [r5, #8]
 8008f28:	e7eb      	b.n	8008f02 <__swsetup_r+0x1e>
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <__swsetup_r+0xd8>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	bf08      	it	eq
 8008f30:	68ec      	ldreq	r4, [r5, #12]
 8008f32:	e7e6      	b.n	8008f02 <__swsetup_r+0x1e>
 8008f34:	0758      	lsls	r0, r3, #29
 8008f36:	d512      	bpl.n	8008f5e <__swsetup_r+0x7a>
 8008f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f3a:	b141      	cbz	r1, 8008f4e <__swsetup_r+0x6a>
 8008f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f40:	4299      	cmp	r1, r3
 8008f42:	d002      	beq.n	8008f4a <__swsetup_r+0x66>
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7ff fbd5 	bl	80086f4 <_free_r>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	2300      	movs	r3, #0
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f043 0308 	orr.w	r3, r3, #8
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	b94b      	cbnz	r3, 8008f7e <__swsetup_r+0x9a>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f74:	d003      	beq.n	8008f7e <__swsetup_r+0x9a>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f000 f84d 	bl	8009018 <__smakebuf_r>
 8008f7e:	89a0      	ldrh	r0, [r4, #12]
 8008f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f84:	f010 0301 	ands.w	r3, r0, #1
 8008f88:	d00a      	beq.n	8008fa0 <__swsetup_r+0xbc>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60a3      	str	r3, [r4, #8]
 8008f8e:	6963      	ldr	r3, [r4, #20]
 8008f90:	425b      	negs	r3, r3
 8008f92:	61a3      	str	r3, [r4, #24]
 8008f94:	6923      	ldr	r3, [r4, #16]
 8008f96:	b943      	cbnz	r3, 8008faa <__swsetup_r+0xc6>
 8008f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f9c:	d1ba      	bne.n	8008f14 <__swsetup_r+0x30>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	0781      	lsls	r1, r0, #30
 8008fa2:	bf58      	it	pl
 8008fa4:	6963      	ldrpl	r3, [r4, #20]
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	e7f4      	b.n	8008f94 <__swsetup_r+0xb0>
 8008faa:	2000      	movs	r0, #0
 8008fac:	e7f7      	b.n	8008f9e <__swsetup_r+0xba>
 8008fae:	bf00      	nop
 8008fb0:	2000000c 	.word	0x2000000c
 8008fb4:	08009240 	.word	0x08009240
 8008fb8:	08009260 	.word	0x08009260
 8008fbc:	08009220 	.word	0x08009220

08008fc0 <abort>:
 8008fc0:	2006      	movs	r0, #6
 8008fc2:	b508      	push	{r3, lr}
 8008fc4:	f000 f898 	bl	80090f8 <raise>
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f7f9 fc16 	bl	80027fa <_exit>

08008fce <__swhatbuf_r>:
 8008fce:	b570      	push	{r4, r5, r6, lr}
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	461d      	mov	r5, r3
 8008fdc:	b096      	sub	sp, #88	; 0x58
 8008fde:	da08      	bge.n	8008ff2 <__swhatbuf_r+0x24>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fe6:	602a      	str	r2, [r5, #0]
 8008fe8:	061a      	lsls	r2, r3, #24
 8008fea:	d410      	bmi.n	800900e <__swhatbuf_r+0x40>
 8008fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff0:	e00e      	b.n	8009010 <__swhatbuf_r+0x42>
 8008ff2:	466a      	mov	r2, sp
 8008ff4:	f000 f89c 	bl	8009130 <_fstat_r>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	dbf1      	blt.n	8008fe0 <__swhatbuf_r+0x12>
 8008ffc:	9a01      	ldr	r2, [sp, #4]
 8008ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009006:	425a      	negs	r2, r3
 8009008:	415a      	adcs	r2, r3
 800900a:	602a      	str	r2, [r5, #0]
 800900c:	e7ee      	b.n	8008fec <__swhatbuf_r+0x1e>
 800900e:	2340      	movs	r3, #64	; 0x40
 8009010:	2000      	movs	r0, #0
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	b016      	add	sp, #88	; 0x58
 8009016:	bd70      	pop	{r4, r5, r6, pc}

08009018 <__smakebuf_r>:
 8009018:	898b      	ldrh	r3, [r1, #12]
 800901a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800901c:	079d      	lsls	r5, r3, #30
 800901e:	4606      	mov	r6, r0
 8009020:	460c      	mov	r4, r1
 8009022:	d507      	bpl.n	8009034 <__smakebuf_r+0x1c>
 8009024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	2301      	movs	r3, #1
 800902e:	6163      	str	r3, [r4, #20]
 8009030:	b002      	add	sp, #8
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	466a      	mov	r2, sp
 8009036:	ab01      	add	r3, sp, #4
 8009038:	f7ff ffc9 	bl	8008fce <__swhatbuf_r>
 800903c:	9900      	ldr	r1, [sp, #0]
 800903e:	4605      	mov	r5, r0
 8009040:	4630      	mov	r0, r6
 8009042:	f7fd fae5 	bl	8006610 <_malloc_r>
 8009046:	b948      	cbnz	r0, 800905c <__smakebuf_r+0x44>
 8009048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904c:	059a      	lsls	r2, r3, #22
 800904e:	d4ef      	bmi.n	8009030 <__smakebuf_r+0x18>
 8009050:	f023 0303 	bic.w	r3, r3, #3
 8009054:	f043 0302 	orr.w	r3, r3, #2
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	e7e3      	b.n	8009024 <__smakebuf_r+0xc>
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <__smakebuf_r+0x7c>)
 800905e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	6120      	str	r0, [r4, #16]
 800906e:	6163      	str	r3, [r4, #20]
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	b15b      	cbz	r3, 800908c <__smakebuf_r+0x74>
 8009074:	4630      	mov	r0, r6
 8009076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907a:	f000 f86b 	bl	8009154 <_isatty_r>
 800907e:	b128      	cbz	r0, 800908c <__smakebuf_r+0x74>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	89a0      	ldrh	r0, [r4, #12]
 800908e:	4305      	orrs	r5, r0
 8009090:	81a5      	strh	r5, [r4, #12]
 8009092:	e7cd      	b.n	8009030 <__smakebuf_r+0x18>
 8009094:	080063b1 	.word	0x080063b1

08009098 <_malloc_usable_size_r>:
 8009098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800909c:	1f18      	subs	r0, r3, #4
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bfbc      	itt	lt
 80090a2:	580b      	ldrlt	r3, [r1, r0]
 80090a4:	18c0      	addlt	r0, r0, r3
 80090a6:	4770      	bx	lr

080090a8 <_raise_r>:
 80090a8:	291f      	cmp	r1, #31
 80090aa:	b538      	push	{r3, r4, r5, lr}
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	d904      	bls.n	80090bc <_raise_r+0x14>
 80090b2:	2316      	movs	r3, #22
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090be:	b112      	cbz	r2, 80090c6 <_raise_r+0x1e>
 80090c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090c4:	b94b      	cbnz	r3, 80090da <_raise_r+0x32>
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f830 	bl	800912c <_getpid_r>
 80090cc:	462a      	mov	r2, r5
 80090ce:	4601      	mov	r1, r0
 80090d0:	4620      	mov	r0, r4
 80090d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d6:	f000 b817 	b.w	8009108 <_kill_r>
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d00a      	beq.n	80090f4 <_raise_r+0x4c>
 80090de:	1c59      	adds	r1, r3, #1
 80090e0:	d103      	bne.n	80090ea <_raise_r+0x42>
 80090e2:	2316      	movs	r3, #22
 80090e4:	6003      	str	r3, [r0, #0]
 80090e6:	2001      	movs	r0, #1
 80090e8:	e7e7      	b.n	80090ba <_raise_r+0x12>
 80090ea:	2400      	movs	r4, #0
 80090ec:	4628      	mov	r0, r5
 80090ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090f2:	4798      	blx	r3
 80090f4:	2000      	movs	r0, #0
 80090f6:	e7e0      	b.n	80090ba <_raise_r+0x12>

080090f8 <raise>:
 80090f8:	4b02      	ldr	r3, [pc, #8]	; (8009104 <raise+0xc>)
 80090fa:	4601      	mov	r1, r0
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	f7ff bfd3 	b.w	80090a8 <_raise_r>
 8009102:	bf00      	nop
 8009104:	2000000c 	.word	0x2000000c

08009108 <_kill_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	2300      	movs	r3, #0
 800910c:	4d06      	ldr	r5, [pc, #24]	; (8009128 <_kill_r+0x20>)
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	f7f9 fb60 	bl	80027da <_kill>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	d102      	bne.n	8009124 <_kill_r+0x1c>
 800911e:	682b      	ldr	r3, [r5, #0]
 8009120:	b103      	cbz	r3, 8009124 <_kill_r+0x1c>
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	bd38      	pop	{r3, r4, r5, pc}
 8009126:	bf00      	nop
 8009128:	200007a4 	.word	0x200007a4

0800912c <_getpid_r>:
 800912c:	f7f9 bb4e 	b.w	80027cc <_getpid>

08009130 <_fstat_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	2300      	movs	r3, #0
 8009134:	4d06      	ldr	r5, [pc, #24]	; (8009150 <_fstat_r+0x20>)
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	f7f9 fbaa 	bl	8002896 <_fstat>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	d102      	bne.n	800914c <_fstat_r+0x1c>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	b103      	cbz	r3, 800914c <_fstat_r+0x1c>
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	200007a4 	.word	0x200007a4

08009154 <_isatty_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	2300      	movs	r3, #0
 8009158:	4d05      	ldr	r5, [pc, #20]	; (8009170 <_isatty_r+0x1c>)
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	602b      	str	r3, [r5, #0]
 8009160:	f7f9 fba8 	bl	80028b4 <_isatty>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_isatty_r+0x1a>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_isatty_r+0x1a>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	200007a4 	.word	0x200007a4

08009174 <_init>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	bf00      	nop
 8009178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917a:	bc08      	pop	{r3}
 800917c:	469e      	mov	lr, r3
 800917e:	4770      	bx	lr

08009180 <_fini>:
 8009180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009182:	bf00      	nop
 8009184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009186:	bc08      	pop	{r3}
 8009188:	469e      	mov	lr, r3
 800918a:	4770      	bx	lr
